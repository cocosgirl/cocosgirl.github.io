{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":1,"renderable":0},{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/jquery-3.6.4.min.js","path":"js/jquery-3.6.4.min.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/.DS_Store","hash":"1c7324e976b880113b623b50ec811296cec438d7","modified":1741603892319},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1741603892319},{"_id":"source/_posts/1-HTML基础知识.md","hash":"d8c34637e4e53fbbd89b9d1461bd450964f206b0","modified":1741603892319},{"_id":"source/_posts/2-语义化.md","hash":"734e152dcb406c589517562226ba076cac2c68e8","modified":1741603892319},{"_id":"source/_posts/2d游戏工具使用.md","hash":"27763b3281d51d97ee5c8cbf1bb151e454f0052a","modified":1741603892319},{"_id":"source/_posts/3-CSS基础知识.md","hash":"fec9eddd3610d80b5b2cbb16ddfaff479f3970ef","modified":1741603892319},{"_id":"source/_posts/4-CSS规范.md","hash":"383c86316d336ae1068a74cd2cb30a36fa4503c6","modified":1741603892319},{"_id":"source/_posts/5-盒子模型.md","hash":"a95b9fadb5842f7c1cd00715e5ed5a7eebc6932f","modified":1741603892319},{"_id":"source/_posts/6-常用的标签和属性.md","hash":"c6f6a2ae304cbb03af5fc358f81442fdd25611c7","modified":1741603892319},{"_id":"source/_posts/6月定个目标.md","hash":"a2a7ff34c398cb377be1f8b34cf1c1ffc01d35c7","modified":1741603892319},{"_id":"source/_posts/7-布局和性能优化.md","hash":"c7d6ead4fb0d7f7246df127e3e781aff6dbf76dd","modified":1741603892319},{"_id":"source/_posts/Android手机调试.md","hash":"cc02aa6b18d50728a4b3a9244d0f10b259dbde7f","modified":1741603892319},{"_id":"source/_posts/Cocos2d-JS开发.md","hash":"35f4916834ba7e629121209cd83830fde14a4d95","modified":1741603892319},{"_id":"source/_posts/Cocos2d-x基础.md","hash":"79f31a0579c15fdd3799feb438d9f4e0e1ffdab8","modified":1741603892320},{"_id":"source/_posts/Django学习.md","hash":"1c90a4d648b2cae85fec9775f258b661a227b852","modified":1741603892320},{"_id":"source/_posts/css和js放在head标签中还是body中.md","hash":"cae4e42475e16794ebe9a00980e7103ce01ce19f","modified":1741603892320},{"_id":"source/_posts/git命令行.md","hash":"78274644d1f8d31507c6a3ddb7cb0aa49532ef86","modified":1741603892320},{"_id":"source/_posts/hexo命令行.md","hash":"bc48789e0de61d0c5f600666d48ffb360d606af1","modified":1741603892320},{"_id":"source/_posts/javascript基础知识.md","hash":"c9cc52c43f883111fc87d11118cea2df7ce360a1","modified":1741603892320},{"_id":"source/_posts/javascript的几种输出方式.md","hash":"b4ec1216d711fc2123891187bbd199d48cddfae7","modified":1741603892320},{"_id":"source/_posts/javascript数组用法.md","hash":"1e1f081e7ffda2cbb4f79b3c991a4e2923042e00","modified":1741603892320},{"_id":"source/_posts/markdown使用.md","hash":"c88a8c1286f4f2148fc4e90970098aaef95c77a9","modified":1741603892320},{"_id":"source/_posts/mysql命令行.md","hash":"9733fbe67a31890b5e6250a09eec2ae5b9f7e651","modified":1741603892320},{"_id":"source/_posts/mysql密码过期.md","hash":"a7142a5d8b0eb5d8340e8c813fcb20dfd69d6ee8","modified":1741603892320},{"_id":"source/_posts/python之os模块.md","hash":"29060e08c3c1d485633e815c913372e17396d7f1","modified":1741603892320},{"_id":"source/_posts/svn命令行.md","hash":"48c15e3d0874172f6d9c4a11c21184d8b7c57aeb","modified":1741603892320},{"_id":"source/_posts/test.md","hash":"b97d7399b74db8216934d10e732a06ca65c09a9d","modified":1741603892320},{"_id":"source/_posts/tornado学习.md","hash":"239c1de786e360840ddb2615aaf38f7c2b0cd315","modified":1741603892320},{"_id":"source/_posts/vim常用命令行.md","hash":"f888e779db398a4f4dc9e1843310850b576f961a","modified":1741603892320},{"_id":"source/_posts/struts-config配置文件.md","hash":"dc2d7259ccd88edb4dfc902679be740a891e1578","modified":1741603892320},{"_id":"source/_posts/webstorm快捷键.md","hash":"c92f3c0110ba6cf44ae68304b22037c2c565025c","modified":1741603892320},{"_id":"source/_posts/产品经理培训.md","hash":"34b4ecd0dd28456d260c0c7fd393c69deb8548dc","modified":1741603892320},{"_id":"source/_posts/使用原型方法的好处.md","hash":"65df6db8aa5793619a402b595291852c216a12b1","modified":1741603892320},{"_id":"source/_posts/动感单车.md","hash":"cf2d675a8784f1f891948380d18baa1c9c933264","modified":1741603892320},{"_id":"source/_posts/代码大全.md","hash":"b3ed58af6a218494a03f4eeaa8fac13b27761c54","modified":1741603892320},{"_id":"source/_posts/去健身.md","hash":"7d0abc6ff5f4b2c42af047ac831fe420a9f3fb86","modified":1741603892320},{"_id":"source/_posts/提升个人卓越领导力.md","hash":"c842a10cd4fb1ffa5847244c4d9f43a13539e615","modified":1741603892320},{"_id":"source/_posts/瑜伽.md","hash":"ca7c8279f075f0cf02fd8fe671eefe3a6c56a956","modified":1741603892320},{"_id":"source/_posts/浏览器兼容总结.md","hash":"84bffac92958fc22c1247933cadf6a2a06f57a0b","modified":1741603892320},{"_id":"source/_posts/编程基础知识.md","hash":"75a89892b89f6e923e1213c909cc0144bdf4c1f1","modified":1741603892320},{"_id":"source/_posts/肚皮舞.md","hash":"ee2c135427e83bfd96b6b059a5d2350c1325e25b","modified":1741603892320},{"_id":"source/about/index.md","hash":"f700afd471a013f5fdcaf144207d90b002d80f63","modified":1741603892320},{"_id":"source/_posts/面向对象编程md.md","hash":"ce80d9c6ece92204e0754bc9b40af1b356697efc","modified":1741603892320},{"_id":"source/archives/index.md","hash":"3a31f0927bca7125af4e81c8b40e51553ac87d16","modified":1741603892320},{"_id":"source/categories/index.md","hash":"3e4cd43dda943f27a2a28dd776f1f903140622e9","modified":1741603892320},{"_id":"source/pageName/index.md","hash":"6deccfcf7f958e0a583e8b4521678b86b917a146","modified":1741603892320},{"_id":"source/tags/index.md","hash":"6032e92dca337204197db0079c710710b6877d04","modified":1741603892320},{"_id":"source/favicon.ico","hash":"3509622d99506029647d137a3b5d74b556f1546f","modified":1741603892320},{"_id":"themes/landscape/.npmignore","hash":"4c40eab00f24304ca400313319c58d461788ff5e","modified":1741681610381},{"_id":"themes/landscape/.gitignore","hash":"4c78c751a5bbca6b54ad06922947573c967d51c8","modified":1741681610381},{"_id":"themes/landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1741681610381},{"_id":"themes/landscape/README.md","hash":"6497b70356271fd6f9f1dc862353be844c457a53","modified":1741681610381},{"_id":"themes/landscape/package.json","hash":"06889bee30e4c39479467021da434d3a6a0990fc","modified":1741681610383},{"_id":"themes/landscape/_config.yml","hash":"a93d7b3990e45bc7247eecf01888f71674887a63","modified":1741681610381},{"_id":"themes/landscape/languages/de-DE.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1741681610381},{"_id":"themes/landscape/.github/dependabot.yml","hash":"25b0257a0db2c5b6a5756d8990bc2cba12f54fc5","modified":1741681610381},{"_id":"themes/landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1741681610381},{"_id":"themes/landscape/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1741681610381},{"_id":"themes/landscape/languages/en-GB.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1741681610381},{"_id":"themes/landscape/languages/en-US.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1741681610381},{"_id":"themes/landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1741681610381},{"_id":"themes/landscape/languages/es-ES.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1741681610381},{"_id":"themes/landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1741681610381},{"_id":"themes/landscape/languages/fr-FR.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1741681610381},{"_id":"themes/landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1741681610381},{"_id":"themes/landscape/languages/hu-HU.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1741681610381},{"_id":"themes/landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1741681610381},{"_id":"themes/landscape/languages/it-IT.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1741681610381},{"_id":"themes/landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1741681610381},{"_id":"themes/landscape/languages/ko-KR.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1741681610381},{"_id":"themes/landscape/languages/ja-JP.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1741681610381},{"_id":"themes/landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1741681610381},{"_id":"themes/landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1741681610381},{"_id":"themes/landscape/languages/mn-MN.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1741681610381},{"_id":"themes/landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1741681610381},{"_id":"themes/landscape/languages/nl-NL.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1741681610382},{"_id":"themes/landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1741681610382},{"_id":"themes/landscape/languages/pt-PT.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1741681610382},{"_id":"themes/landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1741681610382},{"_id":"themes/landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1741681610382},{"_id":"themes/landscape/languages/ru-RU.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1741681610382},{"_id":"themes/landscape/languages/th-TH.yml","hash":"ebfdba9bc4842c829473c1e6e4544344f182724d","modified":1741681610382},{"_id":"themes/landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1741681610382},{"_id":"themes/landscape/languages/th.yml","hash":"84a55b00aa01f03982be294e43c33a20e6d32862","modified":1741681610382},{"_id":"themes/landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1741681610382},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1741681610382},{"_id":"themes/landscape/layout/archive.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1741681610383},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1741681610382},{"_id":"themes/landscape/layout/index.ejs","hash":"57281fc3812c877ec2d8e89ec87ede57b9789d4c","modified":1741681610383},{"_id":"themes/landscape/layout/category.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1741681610383},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1741681610383},{"_id":"themes/landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1741681610383},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1741681610383},{"_id":"themes/landscape/layout/tag.ejs","hash":"97160b8111dd0283f8231408bcab4c87d31c1646","modified":1741681610383},{"_id":"themes/landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1741681610383},{"_id":"themes/landscape/.github/workflows/deploy.yml","hash":"509fdb4fff2078485a2765a1b685312c21e84e5b","modified":1741681610381},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"1b89d0caba03a66a43d9c290a5e94fa438a89210","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"0039146b8ccbdf9b9f8bee58fc6c238f0e9921fc","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"e9d4678e14be5e3cd5e34d783e5af6d6626092f5","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"21136880788c16653f716d8b3dc4094d1312ffa9","modified":1741681857591},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"0e94f5722d4c44d3cc91be2f4fd30b9ab503b868","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"6a5033d189554c9a6d42e2ef7952ae5c9742648e","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1741681610383},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1741681610383},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1741681610383},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1741681610383},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1741681610383},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1741681610383},{"_id":"themes/landscape/source/css/_variables.styl","hash":"ca28281423ae57d76b6c1eb91cd845fd4e518bd6","modified":1741681610384},{"_id":"themes/landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1741681610383},{"_id":"themes/landscape/source/css/style.styl","hash":"e55a1d92954ed20f6887f92dc727bb995a010a43","modified":1741681610387},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1741681610387},{"_id":"themes/landscape/source/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1741681610389},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1741681610384},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1741681610384},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1741681610382},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1741681610383},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1741681610383},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1741681610383},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1741681610383},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1741681610383},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1741681610383},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1741681610383},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"f608400a08cf137ab15ec1f44bac551950afe879","modified":1741681610383},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1741681610384},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"268d2989acb06e2ddd06cc36a6918c6cd865476b","modified":1741681610384},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"9cc3b2927d814f2f6e8e188f9d3657b94f4c6ef3","modified":1741681610384},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1741681610384},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1741681610384},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1741681610384},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1741681610384},{"_id":"themes/landscape/source/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1741681610388},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1741681610387},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1741681610387},{"_id":"public/about/index.html","hash":"79668499f0bc85ea9c16b72eada74e40734402d8","modified":1741682361161},{"_id":"public/archives/index.html","hash":"81206a2b510ea99111fb471eff3ee21369873fde","modified":1741682361161},{"_id":"public/tags/index.html","hash":"a1846fd030f2174559b14ad239b0b24611c96e01","modified":1741682361161},{"_id":"public/pageName/index.html","hash":"640554c1cd6e3bab5be2f8b51ff2127f91f84165","modified":1741682361161},{"_id":"public/categories/index.html","hash":"9b9339d22cfb012fed54da364b092aa13d7d3bd2","modified":1741682361161},{"_id":"public/2018/10/08/test/index.html","hash":"5d6e251e2d55a0ca1b08a70f5a295d79ed129c4c","modified":1741682361161},{"_id":"public/2018/05/18/tornado学习/index.html","hash":"e75207bdcda668f4795d0cf246088d9faf57d28e","modified":1741682361161},{"_id":"public/2018/01/11/面向对象编程md/index.html","hash":"a3dd2d8b4eb49af48ffa73c11c92bfb86620c611","modified":1741682361161},{"_id":"public/2017/12/11/mysql密码过期/index.html","hash":"eb86f8c817537a29ee452daf4a1b3f3508cfc31e","modified":1741682361161},{"_id":"public/2017/12/07/python之os模块/index.html","hash":"6021a91e860c7d2bb983db7d74913f8266350624","modified":1741682361161},{"_id":"public/2017/10/12/Android手机调试/index.html","hash":"29cd4fdb6be09879c185e21d57b704101a02eb47","modified":1741682361161},{"_id":"public/2017/10/09/webstorm快捷键/index.html","hash":"7bf58809106ffa56fdbd19ac7f7ad7b02b07dbc9","modified":1741682361161},{"_id":"public/2017/09/21/javascript数组用法/index.html","hash":"bb2291b986dbd4ed4cefe4976f52d613c81b91ad","modified":1741682361161},{"_id":"public/2017/09/20/使用原型方法的好处/index.html","hash":"8049a4738b04bc30295e88dce88b15d14d921705","modified":1741682361161},{"_id":"public/2017/09/19/javascript的几种输出方式/index.html","hash":"c6645ec7e63554213b2937a54d3ba61bbd97cab9","modified":1741682361161},{"_id":"public/2017/09/19/css和js放在head标签中还是body中/index.html","hash":"fef36abf3d3053446333c84bbbc506bddb9b428a","modified":1741682361161},{"_id":"public/2017/09/13/mysql命令行/index.html","hash":"ff75e29a7cce96da33be13c535a7c3b588b752cf","modified":1741682361161},{"_id":"public/2017/08/31/svn命令行/index.html","hash":"71d7e0225773786ddfa606553d4274e06a536d2a","modified":1741682361161},{"_id":"public/2017/08/29/Cocos2d-JS开发/index.html","hash":"548a02fcbf1ceba65b72773ba7b637764dffb4b6","modified":1741682361161},{"_id":"public/2017/08/07/vim常用命令行/index.html","hash":"1da3a4553499367be6a0a80c3631379d2b08484c","modified":1741682361161},{"_id":"public/2017/07/29/提升个人卓越领导力/index.html","hash":"ccf075bb244eae828effa4e8ebddb829b2588168","modified":1741682361161},{"_id":"public/2017/07/27/javascript基础知识/index.html","hash":"7a8327537a2746481d977782b07c6f6a929dd9ad","modified":1741682361161},{"_id":"public/2017/07/25/肚皮舞/index.html","hash":"e259a7e7ff1cc934a5ab2aad9cb971565f4dda4a","modified":1741682361161},{"_id":"public/2017/07/25/瑜伽/index.html","hash":"0e7b56857ab7e66a71331bc5302987b7daca603f","modified":1741682361161},{"_id":"public/2017/07/25/动感单车/index.html","hash":"df571d04164399fc3791e00e98af5449bb27accc","modified":1741682361161},{"_id":"public/2017/07/24/编程基础知识/index.html","hash":"14a501025f932fc55d3a59d60fbbb71cc57247d8","modified":1741682361161},{"_id":"public/2017/07/12/2d游戏工具使用/index.html","hash":"c5c17dffed535b16e8a0988b0ac8891b2eef8953","modified":1741682361161},{"_id":"public/2017/07/11/Cocos2d-x基础/index.html","hash":"72808d83e2a3cbc21049cbf79f7d63d6c8a71ff7","modified":1741682361161},{"_id":"public/2017/06/22/去健身/index.html","hash":"ac1db5b4fa30c8b473d88a8930b7d0aa06bb1389","modified":1741682361161},{"_id":"public/2017/06/17/代码大全/index.html","hash":"917a62fd7c5f36d39bf10f7de7f0c69ffb1dd1e2","modified":1741682361161},{"_id":"public/2017/06/09/7-布局和性能优化/index.html","hash":"0ffecf4ea0209bd557a17fc0cec522daa8137a0e","modified":1741682361161},{"_id":"public/2017/06/08/产品经理培训/index.html","hash":"95d2a60f290b1e5ffee2d61fd46e1dbc23a7a6ea","modified":1741682361161},{"_id":"public/2017/06/07/6-常用的标签和属性/index.html","hash":"d88d12795e5204044d91541bfba62dee414fc0e9","modified":1741682361161},{"_id":"public/2017/06/07/5-盒子模型/index.html","hash":"cbcdc7e259fe78667fea075f42c00c9b3f5d1af7","modified":1741682361161},{"_id":"public/2017/06/07/Django学习/index.html","hash":"94a5e9ae9671a7f6954a484d65d10e5499b47fe5","modified":1741682361161},{"_id":"public/2017/06/06/浏览器兼容总结/index.html","hash":"e0b76557c5957f19a8ed4485f95b27da6aa430af","modified":1741682361161},{"_id":"public/2017/06/05/6月定个目标/index.html","hash":"ff5bfef5b5ba5a1dadb9e3b1e39b4ed75d39f2ac","modified":1741682361161},{"_id":"public/2017/06/03/4-CSS规范/index.html","hash":"09cbb1fbcc0eaa740e7e0e6263f244781ebc607b","modified":1741682361161},{"_id":"public/2017/06/02/3-CSS基础知识/index.html","hash":"da9d8cab03923947c823986d4f75e4c7a18f6235","modified":1741682361161},{"_id":"public/2017/06/02/2-语义化/index.html","hash":"4a8af409b0a865720abb8548408cb652e91f808c","modified":1741682361161},{"_id":"public/2017/06/02/1-HTML基础知识/index.html","hash":"515a5d99cc7e725809ce663c28d2209200561673","modified":1741682361161},{"_id":"public/2017/06/02/markdown使用/index.html","hash":"5f48175f2c0d0cf9b07011972197573bfb27efc8","modified":1741682361161},{"_id":"public/2017/06/02/hexo命令行/index.html","hash":"2e79e29605909beb680f981c700ec5a806a677e1","modified":1741682361161},{"_id":"public/2017/06/02/git命令行/index.html","hash":"68943409226dfb843d2020764872b1dda0d20781","modified":1741682361161},{"_id":"public/archives/page/2/index.html","hash":"d07834b9269be962dd1845e43c0d7794909a0631","modified":1741682361161},{"_id":"public/archives/page/3/index.html","hash":"5e9438c1756b8e07d971e55658ea7218ed7748df","modified":1741682361161},{"_id":"public/archives/page/4/index.html","hash":"b1820f4ad2daa4f7cf79e57b1aee080ecbbbaa6e","modified":1741682361161},{"_id":"public/archives/2017/index.html","hash":"26549cd43dfb451c5ea85aa10b28d56b11cc821a","modified":1741682361161},{"_id":"public/archives/2017/page/2/index.html","hash":"8ab7d50ef4b9c50ca983dd89b621ec837f50fc4d","modified":1741682361161},{"_id":"public/archives/2017/page/3/index.html","hash":"5fdae5a5c3a8201341db155acef9fba98f656afd","modified":1741682361161},{"_id":"public/archives/2017/page/4/index.html","hash":"4a85fe23ca619f4e45cec7942a3ba3f28954107c","modified":1741682361161},{"_id":"public/archives/2017/06/index.html","hash":"79545f411eab73529c3108d8e76dfb4f842230da","modified":1741682361161},{"_id":"public/archives/2017/06/page/2/index.html","hash":"f14466657e4dd129ab3f54f3d7c9dc9929b1ce77","modified":1741682361161},{"_id":"public/archives/2017/07/index.html","hash":"70fa455a93720eaa32dcd8702c6889bc84f187eb","modified":1741682361161},{"_id":"public/archives/2017/08/index.html","hash":"697da1ab6e798cbc745e27f7e90d492b6d1eb383","modified":1741682361161},{"_id":"public/archives/2017/09/index.html","hash":"6ce78673f2963d170c8d105aedd1441bf0d06a55","modified":1741682361161},{"_id":"public/archives/2017/10/index.html","hash":"2ee046c4cc053b73e2f1e808540da6a595d4d5af","modified":1741682361161},{"_id":"public/archives/2017/12/index.html","hash":"dfd45d224e4239489116f2fbecabc1e6cc8859e5","modified":1741682361161},{"_id":"public/archives/2018/index.html","hash":"d39429db8c24c52d6258e422dd9c7905ce669192","modified":1741682361161},{"_id":"public/archives/2018/01/index.html","hash":"d1cd5330983a0f2e75a801f93d966316e43176e8","modified":1741682361161},{"_id":"public/archives/2018/03/index.html","hash":"432050289fb263c0d62b8b230bea34e210fdc788","modified":1741682361161},{"_id":"public/archives/2018/05/index.html","hash":"c289d21e609118aa3874148fe8deaed6af3714a2","modified":1741682361161},{"_id":"public/archives/2018/10/index.html","hash":"e711810dd85bad55b5e6d912a893744ac2ce0c8b","modified":1741682361161},{"_id":"public/tags/html/index.html","hash":"17deb5ae2ef84934a9bd6db5d9ad8d7a1b5e499f","modified":1741682361161},{"_id":"public/tags/游戏/index.html","hash":"299f0ad6a46d4742ab54b846b0bc76313827e505","modified":1741682361161},{"_id":"public/tags/工具/index.html","hash":"f0e9e9c0f7a9b5c0e36ebe84e6d5d0cee052ba50","modified":1741682361161},{"_id":"public/tags/总结/index.html","hash":"ab1305de91694438123f7a29fb2b45d058c63666","modified":1741682361161},{"_id":"public/tags/框架/index.html","hash":"48ecb27faba9c2d2d15c1e76dfcb2761c2702933","modified":1741682361161},{"_id":"public/tags/javascript/index.html","hash":"4ec1754e280b7659f28c46537b6ac1b0f21f9176","modified":1741682361161},{"_id":"public/tags/命令行/index.html","hash":"9f5e311831eecf283ab269eed77f882835d82ed4","modified":1741682361161},{"_id":"public/tags/python/index.html","hash":"c5230bad195417f6da2e7f47fb619c2e1ef979d4","modified":1741682361161},{"_id":"public/tags/测试/index.html","hash":"fefdefa9cfdead17eabdb072eeac8dfd70465b1f","modified":1741682361161},{"_id":"public/tags/编程/index.html","hash":"b31fcf34d03e0c7833fb2a7f9ae010a986539c2f","modified":1741682361161},{"_id":"public/tags/培训/index.html","hash":"d2ded66ecc96c6a69aed3cfddda8563fb166bba9","modified":1741682361161},{"_id":"public/tags/运动/index.html","hash":"fc9a08b0ab85280d580ab350ddf56c85361aaa8d","modified":1741682361161},{"_id":"public/2018/03/02/struts-config配置文件/index.html","hash":"8e4c861e8f2adc99dbbfe7df816b2bbaa02c4a69","modified":1741682361161},{"_id":"public/index.html","hash":"cd02fccf356e902b564721b68650682a1516defa","modified":1741682361161},{"_id":"public/page/2/index.html","hash":"b7b3d64432af181923720772da32c1c42748abb8","modified":1741682361161},{"_id":"public/page/3/index.html","hash":"bd85b11f1f42bea70cb5ee0e86087852bfd243b2","modified":1741682361161},{"_id":"public/page/4/index.html","hash":"f5d708c09c638aaeeae69320e936a94641992c5b","modified":1741682361161},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1741682361161},{"_id":"public/js/script.js","hash":"49773efcb2221bbdf2d86f3f5c5ff2d841b528cc","modified":1741682361161},{"_id":"public/css/style.css","hash":"cc306d770076f9b31a8de8e9b85b28fc55a976aa","modified":1741682361161},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1741682361161},{"_id":"public/js/jquery-3.6.4.min.js","hash":"eda46747c71d38a880bee44f9a439c3858bb8f99","modified":1741682361161},{"_id":"public/favicon.ico","hash":"3509622d99506029647d137a3b5d74b556f1546f","modified":1741682361161},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1741682361161}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-06-02T05:21:08.000Z","type":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-06-02 13:21:08\ntype: about\n---\n","updated":"2025-03-10T10:51:32.320Z","path":"about/index.html","comments":1,"layout":"page","_id":"cm848piym0000b01tae0b8c7q","content":"","excerpt":"","more":""},{"title":"archives","date":"2017-06-02T07:52:54.000Z","type":"archives","_content":"","source":"archives/index.md","raw":"---\ntitle: archives\ndate: 2017-06-02 15:52:54\ntype: archives\n---\n","updated":"2025-03-10T10:51:32.320Z","path":"archives/index.html","comments":1,"layout":"page","_id":"cm848piyr0002b01ther1ft80","content":"","excerpt":"","more":""},{"title":"tags","date":"2017-06-02T05:22:21.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-06-02 13:22:21\ntype: tags\n---\n","updated":"2025-03-10T10:51:32.320Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cm848piyu0005b01tcj147wno","content":"","excerpt":"","more":""},{"title":"pageName","date":"2017-06-02T05:20:37.000Z","_content":"","source":"pageName/index.md","raw":"---\ntitle: pageName\ndate: 2017-06-02 13:20:37\n---\n","updated":"2025-03-10T10:51:32.320Z","path":"pageName/index.html","comments":1,"layout":"page","_id":"cm848piyu0007b01t6zah73zq","content":"","excerpt":"","more":""},{"title":"categories","date":"2017-06-02T05:22:07.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-06-02 13:22:07\ntype: categories\n---\n","updated":"2025-03-10T10:51:32.320Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cm848piyv0009b01t47k1cuw0","content":"","excerpt":"","more":""}],"Post":[{"title":"2-语义化","date":"2017-06-02T13:33:51.000Z","_content":"\n# 第二章\n\n#### 2.1 语义化   \nWeb前端开发最核心的3个技术：HTML、CSS、JavaScript。HTML控制网页的结构，CSS控制网页的样式，JavaScript控制网页的行为。  \n\n* P标签，表示的是“paragraph”，标记的是一个段落  \n* h1标签，表示的是“header1”，标记的是一个最高级的标题  \n* div和span是无语义的标签，我们应该尽可能少用  \n\n#### 2.2 标题语义化  \nh1~h6是标题标签，按照标题的重要性一次递减，其中h1重要性最高，h6重要性最低。  \n\n注意：   \n（1）一个页面只能有一个h1标签  \n（2）h1~h6之间不要断层  \n（3）不要用h1~h6来定义样式  \n（4）不要用div来代替h1~h6  \n\n#### 2.3 图片语义化  \nhtml中，我们使用img标签来标示图片  \n\n2.3.1 alt属性和title属性  \n\n * alt属性用于图片描述，这个描述文字是给搜索引擎看的。当图片无法显示时，页面会显示alt中的文字  \n \n * title属性也用于图片描述，这个描述文字是给用户看的。并且当鼠标指针移到图片上时，会显示title中的内容\n   \n 注意：alt属性是img标签必须属性，一定要添加。title属性是img标签可选属性，可加可不加  \n \n2.3.2 figure和figcaption元素  \n figure和figcaption元素用于表示图注文字,语法：  \n < figure \\>  \n  用于包含图片  \n  < img src=\"\" alt=\"\" / \\>  \n  < figcaption \\>图注< / figcaption \\>  \n < /figure \\>\n \n#### 2.4 表格语义化\n 常用table、tr、td  \n 还有5个不常用：th、caption、thread、tbody、tfoot  \n \n#### 2.5 表单语义化\n （1）label标签：用于显示在输入控件旁边的说明性文字，for属性值为所关联的表单元素的id  \n      label标签for属性的作用：   \n       1. 语义上绑定了label元素和表单元素  \n       2. 增强了鼠标可用性 \n        \n（2）fieldset标签和legend标签  \n      fieldset标签来给表单元素进行分组  \n      legend标签用于定义某一组表单的标题  \n      作用：  \n      增强表单的语义  \n      可以定义fieldset元素的disabled属性来禁用整个组中的表单元素  \n      语法：    \n      < fieldset \\>  \n        < legend \\>表单组标题< /legend \\>  \n          ...  \n       < /fieldset \\>\n       \n#### 2.6 其他语义化\n 2.6.1 < br/ \\>标签用于换行  \n    W3C标准规定，< br/ \\>标签仅仅用于段落中的换行，不能用于其他情况，也就是说< br /\\>标签只适合用于p标签内部的换行，不能用与其他标签。\n      \n 2.6.2 无序列表ul\n    < ul \\>< li \\>< /li \\>< /ul \\>  \n    \n 2.6.3 strong和em标签  \n    strong用于实现加粗文本，em用于实现倾斜体文本   \n \n 2.6.4 del和ins标签    \n    这两个标签是配合使用的（例如:原价：---，现价：---）    \n    del表示“delete”  \n    ins表示“insert” \n     \n 2.6.5 img标签  \n    想要在页面上显示一张图片，有两种方式：  \n    一是使用img标签（通过html实现）  \n    二是使用背景图片（通过css实现）  \n    \n\n","source":"_posts/2-语义化.md","raw":"---\ntitle: 2-语义化\ndate: 2017-06-02 21:33:51\ntags: html\n---\n\n# 第二章\n\n#### 2.1 语义化   \nWeb前端开发最核心的3个技术：HTML、CSS、JavaScript。HTML控制网页的结构，CSS控制网页的样式，JavaScript控制网页的行为。  \n\n* P标签，表示的是“paragraph”，标记的是一个段落  \n* h1标签，表示的是“header1”，标记的是一个最高级的标题  \n* div和span是无语义的标签，我们应该尽可能少用  \n\n#### 2.2 标题语义化  \nh1~h6是标题标签，按照标题的重要性一次递减，其中h1重要性最高，h6重要性最低。  \n\n注意：   \n（1）一个页面只能有一个h1标签  \n（2）h1~h6之间不要断层  \n（3）不要用h1~h6来定义样式  \n（4）不要用div来代替h1~h6  \n\n#### 2.3 图片语义化  \nhtml中，我们使用img标签来标示图片  \n\n2.3.1 alt属性和title属性  \n\n * alt属性用于图片描述，这个描述文字是给搜索引擎看的。当图片无法显示时，页面会显示alt中的文字  \n \n * title属性也用于图片描述，这个描述文字是给用户看的。并且当鼠标指针移到图片上时，会显示title中的内容\n   \n 注意：alt属性是img标签必须属性，一定要添加。title属性是img标签可选属性，可加可不加  \n \n2.3.2 figure和figcaption元素  \n figure和figcaption元素用于表示图注文字,语法：  \n < figure \\>  \n  用于包含图片  \n  < img src=\"\" alt=\"\" / \\>  \n  < figcaption \\>图注< / figcaption \\>  \n < /figure \\>\n \n#### 2.4 表格语义化\n 常用table、tr、td  \n 还有5个不常用：th、caption、thread、tbody、tfoot  \n \n#### 2.5 表单语义化\n （1）label标签：用于显示在输入控件旁边的说明性文字，for属性值为所关联的表单元素的id  \n      label标签for属性的作用：   \n       1. 语义上绑定了label元素和表单元素  \n       2. 增强了鼠标可用性 \n        \n（2）fieldset标签和legend标签  \n      fieldset标签来给表单元素进行分组  \n      legend标签用于定义某一组表单的标题  \n      作用：  \n      增强表单的语义  \n      可以定义fieldset元素的disabled属性来禁用整个组中的表单元素  \n      语法：    \n      < fieldset \\>  \n        < legend \\>表单组标题< /legend \\>  \n          ...  \n       < /fieldset \\>\n       \n#### 2.6 其他语义化\n 2.6.1 < br/ \\>标签用于换行  \n    W3C标准规定，< br/ \\>标签仅仅用于段落中的换行，不能用于其他情况，也就是说< br /\\>标签只适合用于p标签内部的换行，不能用与其他标签。\n      \n 2.6.2 无序列表ul\n    < ul \\>< li \\>< /li \\>< /ul \\>  \n    \n 2.6.3 strong和em标签  \n    strong用于实现加粗文本，em用于实现倾斜体文本   \n \n 2.6.4 del和ins标签    \n    这两个标签是配合使用的（例如:原价：---，现价：---）    \n    del表示“delete”  \n    ins表示“insert” \n     \n 2.6.5 img标签  \n    想要在页面上显示一张图片，有两种方式：  \n    一是使用img标签（通过html实现）  \n    二是使用背景图片（通过css实现）  \n    \n\n","slug":"2-语义化","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyp0001b01taiik4bcs","content":"<h1 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h1><h4 id=\"2-1-语义化\"><a href=\"#2-1-语义化\" class=\"headerlink\" title=\"2.1 语义化\"></a>2.1 语义化</h4><p>Web前端开发最核心的3个技术：HTML、CSS、JavaScript。HTML控制网页的结构，CSS控制网页的样式，JavaScript控制网页的行为。  </p>\n<ul>\n<li>P标签，表示的是“paragraph”，标记的是一个段落  </li>\n<li>h1标签，表示的是“header1”，标记的是一个最高级的标题  </li>\n<li>div和span是无语义的标签，我们应该尽可能少用  </li>\n</ul>\n<h4 id=\"2-2-标题语义化\"><a href=\"#2-2-标题语义化\" class=\"headerlink\" title=\"2.2 标题语义化\"></a>2.2 标题语义化</h4><p>h1~h6是标题标签，按照标题的重要性一次递减，其中h1重要性最高，h6重要性最低。  </p>\n<p>注意：<br>（1）一个页面只能有一个h1标签<br>（2）h1~h6之间不要断层<br>（3）不要用h1~h6来定义样式<br>（4）不要用div来代替h1~h6  </p>\n<h4 id=\"2-3-图片语义化\"><a href=\"#2-3-图片语义化\" class=\"headerlink\" title=\"2.3 图片语义化\"></a>2.3 图片语义化</h4><p>html中，我们使用img标签来标示图片  </p>\n<p>2.3.1 alt属性和title属性  </p>\n<ul>\n<li><p>alt属性用于图片描述，这个描述文字是给搜索引擎看的。当图片无法显示时，页面会显示alt中的文字  </p>\n</li>\n<li><p>title属性也用于图片描述，这个描述文字是给用户看的。并且当鼠标指针移到图片上时，会显示title中的内容</p>\n<p>注意：alt属性是img标签必须属性，一定要添加。title属性是img标签可选属性，可加可不加  </p>\n</li>\n</ul>\n<p>2.3.2 figure和figcaption元素<br> figure和figcaption元素用于表示图注文字,语法：<br> &lt; figure ><br>  用于包含图片<br>  &lt; img src=”” alt=”” / ><br>  &lt; figcaption >图注&lt; / figcaption ><br> &lt; /figure ></p>\n<h4 id=\"2-4-表格语义化\"><a href=\"#2-4-表格语义化\" class=\"headerlink\" title=\"2.4 表格语义化\"></a>2.4 表格语义化</h4><p> 常用table、tr、td<br> 还有5个不常用：th、caption、thread、tbody、tfoot  </p>\n<h4 id=\"2-5-表单语义化\"><a href=\"#2-5-表单语义化\" class=\"headerlink\" title=\"2.5 表单语义化\"></a>2.5 表单语义化</h4><p> （1）label标签：用于显示在输入控件旁边的说明性文字，for属性值为所关联的表单元素的id<br>      label标签for属性的作用：   </p>\n<pre><code>1. 语义上绑定了label元素和表单元素  \n2. 增强了鼠标可用性 \n</code></pre><p>（2）fieldset标签和legend标签<br>      fieldset标签来给表单元素进行分组<br>      legend标签用于定义某一组表单的标题<br>      作用：<br>      增强表单的语义<br>      可以定义fieldset元素的disabled属性来禁用整个组中的表单元素<br>      语法：<br>      &lt; fieldset ><br>        &lt; legend >表单组标题&lt; /legend ><br>          …<br>       &lt; /fieldset ></p>\n<h4 id=\"2-6-其他语义化\"><a href=\"#2-6-其他语义化\" class=\"headerlink\" title=\"2.6 其他语义化\"></a>2.6 其他语义化</h4><p> 2.6.1 &lt; br/ >标签用于换行<br>    W3C标准规定，&lt; br/ >标签仅仅用于段落中的换行，不能用于其他情况，也就是说&lt; br />标签只适合用于p标签内部的换行，不能用与其他标签。</p>\n<p> 2.6.2 无序列表ul<br>    &lt; ul >&lt; li >&lt; /li >&lt; /ul >  </p>\n<p> 2.6.3 strong和em标签<br>    strong用于实现加粗文本，em用于实现倾斜体文本   </p>\n<p> 2.6.4 del和ins标签<br>    这两个标签是配合使用的（例如:原价：—，现价：—）<br>    del表示“delete”<br>    ins表示“insert” </p>\n<p> 2.6.5 img标签<br>    想要在页面上显示一张图片，有两种方式：<br>    一是使用img标签（通过html实现）<br>    二是使用背景图片（通过css实现）  </p>\n","excerpt":"","more":"<h1 id=\"第二章\"><a href=\"#第二章\" class=\"headerlink\" title=\"第二章\"></a>第二章</h1><h4 id=\"2-1-语义化\"><a href=\"#2-1-语义化\" class=\"headerlink\" title=\"2.1 语义化\"></a>2.1 语义化</h4><p>Web前端开发最核心的3个技术：HTML、CSS、JavaScript。HTML控制网页的结构，CSS控制网页的样式，JavaScript控制网页的行为。  </p>\n<ul>\n<li>P标签，表示的是“paragraph”，标记的是一个段落  </li>\n<li>h1标签，表示的是“header1”，标记的是一个最高级的标题  </li>\n<li>div和span是无语义的标签，我们应该尽可能少用  </li>\n</ul>\n<h4 id=\"2-2-标题语义化\"><a href=\"#2-2-标题语义化\" class=\"headerlink\" title=\"2.2 标题语义化\"></a>2.2 标题语义化</h4><p>h1~h6是标题标签，按照标题的重要性一次递减，其中h1重要性最高，h6重要性最低。  </p>\n<p>注意：<br>（1）一个页面只能有一个h1标签<br>（2）h1~h6之间不要断层<br>（3）不要用h1~h6来定义样式<br>（4）不要用div来代替h1~h6  </p>\n<h4 id=\"2-3-图片语义化\"><a href=\"#2-3-图片语义化\" class=\"headerlink\" title=\"2.3 图片语义化\"></a>2.3 图片语义化</h4><p>html中，我们使用img标签来标示图片  </p>\n<p>2.3.1 alt属性和title属性  </p>\n<ul>\n<li><p>alt属性用于图片描述，这个描述文字是给搜索引擎看的。当图片无法显示时，页面会显示alt中的文字  </p>\n</li>\n<li><p>title属性也用于图片描述，这个描述文字是给用户看的。并且当鼠标指针移到图片上时，会显示title中的内容</p>\n<p>注意：alt属性是img标签必须属性，一定要添加。title属性是img标签可选属性，可加可不加  </p>\n</li>\n</ul>\n<p>2.3.2 figure和figcaption元素<br> figure和figcaption元素用于表示图注文字,语法：<br> &lt; figure ><br>  用于包含图片<br>  &lt; img src=”” alt=”” / ><br>  &lt; figcaption >图注&lt; / figcaption ><br> &lt; /figure ></p>\n<h4 id=\"2-4-表格语义化\"><a href=\"#2-4-表格语义化\" class=\"headerlink\" title=\"2.4 表格语义化\"></a>2.4 表格语义化</h4><p> 常用table、tr、td<br> 还有5个不常用：th、caption、thread、tbody、tfoot  </p>\n<h4 id=\"2-5-表单语义化\"><a href=\"#2-5-表单语义化\" class=\"headerlink\" title=\"2.5 表单语义化\"></a>2.5 表单语义化</h4><p> （1）label标签：用于显示在输入控件旁边的说明性文字，for属性值为所关联的表单元素的id<br>      label标签for属性的作用：   </p>\n<pre><code>1. 语义上绑定了label元素和表单元素  \n2. 增强了鼠标可用性 \n</code></pre><p>（2）fieldset标签和legend标签<br>      fieldset标签来给表单元素进行分组<br>      legend标签用于定义某一组表单的标题<br>      作用：<br>      增强表单的语义<br>      可以定义fieldset元素的disabled属性来禁用整个组中的表单元素<br>      语法：<br>      &lt; fieldset ><br>        &lt; legend >表单组标题&lt; /legend ><br>          …<br>       &lt; /fieldset ></p>\n<h4 id=\"2-6-其他语义化\"><a href=\"#2-6-其他语义化\" class=\"headerlink\" title=\"2.6 其他语义化\"></a>2.6 其他语义化</h4><p> 2.6.1 &lt; br/ >标签用于换行<br>    W3C标准规定，&lt; br/ >标签仅仅用于段落中的换行，不能用于其他情况，也就是说&lt; br />标签只适合用于p标签内部的换行，不能用与其他标签。</p>\n<p> 2.6.2 无序列表ul<br>    &lt; ul >&lt; li >&lt; /li >&lt; /ul >  </p>\n<p> 2.6.3 strong和em标签<br>    strong用于实现加粗文本，em用于实现倾斜体文本   </p>\n<p> 2.6.4 del和ins标签<br>    这两个标签是配合使用的（例如:原价：—，现价：—）<br>    del表示“delete”<br>    ins表示“insert” </p>\n<p> 2.6.5 img标签<br>    想要在页面上显示一张图片，有两种方式：<br>    一是使用img标签（通过html实现）<br>    二是使用背景图片（通过css实现）  </p>\n"},{"title":"xcode和模拟器快捷键","date":"2017-07-12T08:05:50.000Z","_content":"\nmac上CocosBuilder的使用，有一篇不错的新手教程：  \nhttp://blog.sina.com.cn/s/blog_9590ef8201019air.html\n\n\nxcode模拟器使用：\n关闭程序：command + shift + h  按两下\n杀掉进程：command + shift + h 长按\n启动项目：command + r\n快速打开选项卡：command + shift + o\n快速查找：command + shift + f\n","source":"_posts/2d游戏工具使用.md","raw":"---\ntitle: xcode和模拟器快捷键\ndate: 2017-07-12 16:05:50\ntags: [游戏, 工具]\n---\n\nmac上CocosBuilder的使用，有一篇不错的新手教程：  \nhttp://blog.sina.com.cn/s/blog_9590ef8201019air.html\n\n\nxcode模拟器使用：\n关闭程序：command + shift + h  按两下\n杀掉进程：command + shift + h 长按\n启动项目：command + r\n快速打开选项卡：command + shift + o\n快速查找：command + shift + f\n","slug":"2d游戏工具使用","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piys0003b01t6stx5fth","content":"<p>mac上CocosBuilder的使用，有一篇不错的新手教程：<br><a href=\"http://blog.sina.com.cn/s/blog_9590ef8201019air.html\">http://blog.sina.com.cn/s/blog_9590ef8201019air.html</a></p>\n<p>xcode模拟器使用：<br>关闭程序：command + shift + h  按两下<br>杀掉进程：command + shift + h 长按<br>启动项目：command + r<br>快速打开选项卡：command + shift + o<br>快速查找：command + shift + f</p>\n","excerpt":"","more":"<p>mac上CocosBuilder的使用，有一篇不错的新手教程：<br><a href=\"http://blog.sina.com.cn/s/blog_9590ef8201019air.html\">http://blog.sina.com.cn/s/blog_9590ef8201019air.html</a></p>\n<p>xcode模拟器使用：<br>关闭程序：command + shift + h  按两下<br>杀掉进程：command + shift + h 长按<br>启动项目：command + r<br>快速打开选项卡：command + shift + o<br>快速查找：command + shift + f</p>\n"},{"title":"3-CSS基础知识","date":"2017-06-02T13:46:44.000Z","_content":"\n## CSS基础知识\n\n### 3.1 CSS单位\n\n#### 3.1.1 绝对单位\ncm：厘米、  \nmm: 毫米、  \nin: 英寸、  \npt： 磅(point),印刷的点数、  \npc： pica，1pc = 12pt\n\n### 3.1.2 相对单位\n在CSS中相对单位定义的大小是不固定的，一般是相对其他长度而言：常用的相对单位如下：  \npx：像素（一张图片最小的点，或者屏幕最小的点）  \n%： 百分比  \nem： 1em = “当前元素字体大小”  \nrem： 1rem = “根元素”字体大小  \n\n1. 在CSS中，使用em使用小技巧：  \n（1）首行缩进使用text-indent：2em实现；  \n（2）使用em作为统一单位  \n例如：  \n< style type=\"text/css\" >  \n\tbody\\{font-size: 62.5%;\\}  \n\t\\#p1\\{font-size:1em;\\}   \n\t\\#p2\\{font-size:1.5em;\\}  \n\t\\#p3\\{font-size:2em;\\}   \n< /style >  \n\n(3)使用em作为字体大小单位    \n对于一个页面的字体大小，使用px作为单位时可能扩展性不好，使用百分比作为单位时候也不符合习惯，最佳选择是使用em作为单位来定义字体大小。使用em作为单位，当需要改变页面整体的文字大小时，我们只需要改变根元素字体大小即可，工作量变得非常少。\n\n2.rem：    \n  rem是CSS3新引入的单位，目前除了IE8及以前版本之外，大部分主浏览器都支持rem的。  \n  \n### 3.2 CSS特性：\n继承性和层叠性  \n3.2.1 继承性： 子元素继承了父元素的某些样式和属性。（注意： 并不是所有的子元素都有继承性，如：padding，margin，border等就不具备继承性）  \n\n3.2.2 层叠性：样式的覆盖\n\n### 3.3 CSS优先级  \n（1）引用方式冲突  \n（2）继承方式冲突  \n（3）指定样式冲突  \n（4）继承样式与指定样式冲突  \n（5）!important\n\n3.3.1 引用方式冲突：\n CSS常用的三种引用方式:外部样式、内部样式、行内样式  \n### 行内样式 > (内部样式 = 外部样式)  \n 如果内部样式和外部样式同时存在，则以最后引入的样式为准（后来者居上）  \n \n3.3.2 继承方式冲突  \n由于继承方式引起的冲突，最近的祖先元素获胜。  \n\n3.3.3  指定样式冲突  \n指定样式，指的是指定“当前元素”的样式。直接指定的样式发生冲突时，样式权值高者获胜。  \n### 行内样式 > id选择器 > class选择器 > 元素选择器\n\n3.3.4 继承样式和指定样式冲突  \n当继承样式和指定样式冲突时，指定样式获胜  \n\n3.3.5 \\!important   \n\\!important会覆盖CSS中任何的其他样式  \n优先级：优先级高的样式覆盖优先级低的样式\n       同一优先级的样式，后定义的覆盖先定义的，即后来者居上。  \n \n3.4 CSS引入方式  \n常用的三种：  \n（1）外部样式 ：link方式，先加载CSS后加载HTML    \n 所谓的“外部样式表”，就是把CSS代码和HTML代码单独放在不同的文件中·，然后在HTML文档中使用link标签来引用CSS样式。   \n 外部样式表在氮素文件中定义，并且在< head >< /head >标签对中使用link标签来引用。  \n 多用于公有样式  \n（2）内部样式：私有样式  \n（3）行内样式：用于小修改或者优先级方面  \n不常用的：\n@import方式（即“导入样式”）：先加载HTMl后加载CSS，用户体验非常差  \n\n3.5 CSS选择器  \n（1）元素选择器  \n（2）id选择器  \n（3）class选择器  \n（4）群组选择器  \n常见的层次选择器：父子、后代、兄弟、相邻  \nM N : 后代选择器，选择M元素内部后代N元素（所有N元素）  \nM\\>N: 子代选择器，选择M元素内部子代N元素（所有第1级N元素）  \nM~N: 兄弟选择器，选择M元素后所有的同级N元素  \nM+N：相邻选择器，选择M元素相邻的下一个元素（M、N是同级元素）  \n","source":"_posts/3-CSS基础知识.md","raw":"---\ntitle: 3-CSS基础知识\ndate: 2017-06-02 21:46:44\ntags: html\n---\n\n## CSS基础知识\n\n### 3.1 CSS单位\n\n#### 3.1.1 绝对单位\ncm：厘米、  \nmm: 毫米、  \nin: 英寸、  \npt： 磅(point),印刷的点数、  \npc： pica，1pc = 12pt\n\n### 3.1.2 相对单位\n在CSS中相对单位定义的大小是不固定的，一般是相对其他长度而言：常用的相对单位如下：  \npx：像素（一张图片最小的点，或者屏幕最小的点）  \n%： 百分比  \nem： 1em = “当前元素字体大小”  \nrem： 1rem = “根元素”字体大小  \n\n1. 在CSS中，使用em使用小技巧：  \n（1）首行缩进使用text-indent：2em实现；  \n（2）使用em作为统一单位  \n例如：  \n< style type=\"text/css\" >  \n\tbody\\{font-size: 62.5%;\\}  \n\t\\#p1\\{font-size:1em;\\}   \n\t\\#p2\\{font-size:1.5em;\\}  \n\t\\#p3\\{font-size:2em;\\}   \n< /style >  \n\n(3)使用em作为字体大小单位    \n对于一个页面的字体大小，使用px作为单位时可能扩展性不好，使用百分比作为单位时候也不符合习惯，最佳选择是使用em作为单位来定义字体大小。使用em作为单位，当需要改变页面整体的文字大小时，我们只需要改变根元素字体大小即可，工作量变得非常少。\n\n2.rem：    \n  rem是CSS3新引入的单位，目前除了IE8及以前版本之外，大部分主浏览器都支持rem的。  \n  \n### 3.2 CSS特性：\n继承性和层叠性  \n3.2.1 继承性： 子元素继承了父元素的某些样式和属性。（注意： 并不是所有的子元素都有继承性，如：padding，margin，border等就不具备继承性）  \n\n3.2.2 层叠性：样式的覆盖\n\n### 3.3 CSS优先级  \n（1）引用方式冲突  \n（2）继承方式冲突  \n（3）指定样式冲突  \n（4）继承样式与指定样式冲突  \n（5）!important\n\n3.3.1 引用方式冲突：\n CSS常用的三种引用方式:外部样式、内部样式、行内样式  \n### 行内样式 > (内部样式 = 外部样式)  \n 如果内部样式和外部样式同时存在，则以最后引入的样式为准（后来者居上）  \n \n3.3.2 继承方式冲突  \n由于继承方式引起的冲突，最近的祖先元素获胜。  \n\n3.3.3  指定样式冲突  \n指定样式，指的是指定“当前元素”的样式。直接指定的样式发生冲突时，样式权值高者获胜。  \n### 行内样式 > id选择器 > class选择器 > 元素选择器\n\n3.3.4 继承样式和指定样式冲突  \n当继承样式和指定样式冲突时，指定样式获胜  \n\n3.3.5 \\!important   \n\\!important会覆盖CSS中任何的其他样式  \n优先级：优先级高的样式覆盖优先级低的样式\n       同一优先级的样式，后定义的覆盖先定义的，即后来者居上。  \n \n3.4 CSS引入方式  \n常用的三种：  \n（1）外部样式 ：link方式，先加载CSS后加载HTML    \n 所谓的“外部样式表”，就是把CSS代码和HTML代码单独放在不同的文件中·，然后在HTML文档中使用link标签来引用CSS样式。   \n 外部样式表在氮素文件中定义，并且在< head >< /head >标签对中使用link标签来引用。  \n 多用于公有样式  \n（2）内部样式：私有样式  \n（3）行内样式：用于小修改或者优先级方面  \n不常用的：\n@import方式（即“导入样式”）：先加载HTMl后加载CSS，用户体验非常差  \n\n3.5 CSS选择器  \n（1）元素选择器  \n（2）id选择器  \n（3）class选择器  \n（4）群组选择器  \n常见的层次选择器：父子、后代、兄弟、相邻  \nM N : 后代选择器，选择M元素内部后代N元素（所有N元素）  \nM\\>N: 子代选择器，选择M元素内部子代N元素（所有第1级N元素）  \nM~N: 兄弟选择器，选择M元素后所有的同级N元素  \nM+N：相邻选择器，选择M元素相邻的下一个元素（M、N是同级元素）  \n","slug":"3-CSS基础知识","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyu0006b01t2i7a2top","content":"<h2 id=\"CSS基础知识\"><a href=\"#CSS基础知识\" class=\"headerlink\" title=\"CSS基础知识\"></a>CSS基础知识</h2><h3 id=\"3-1-CSS单位\"><a href=\"#3-1-CSS单位\" class=\"headerlink\" title=\"3.1 CSS单位\"></a>3.1 CSS单位</h3><h4 id=\"3-1-1-绝对单位\"><a href=\"#3-1-1-绝对单位\" class=\"headerlink\" title=\"3.1.1 绝对单位\"></a>3.1.1 绝对单位</h4><p>cm：厘米、<br>mm: 毫米、<br>in: 英寸、<br>pt： 磅(point),印刷的点数、<br>pc： pica，1pc = 12pt</p>\n<h3 id=\"3-1-2-相对单位\"><a href=\"#3-1-2-相对单位\" class=\"headerlink\" title=\"3.1.2 相对单位\"></a>3.1.2 相对单位</h3><p>在CSS中相对单位定义的大小是不固定的，一般是相对其他长度而言：常用的相对单位如下：<br>px：像素（一张图片最小的点，或者屏幕最小的点）<br>%： 百分比<br>em： 1em = “当前元素字体大小”<br>rem： 1rem = “根元素”字体大小  </p>\n<ol>\n<li>在CSS中，使用em使用小技巧：<br>（1）首行缩进使用text-indent：2em实现；<br>（2）使用em作为统一单位<br>例如：<br>&lt; style type=”text/css” &gt;<br> body{font-size: 62.5%;}<br> #p1{font-size:1em;}<br> #p2{font-size:1.5em;}<br> #p3{font-size:2em;}<br>&lt; /style &gt;  </li>\n</ol>\n<p>(3)使用em作为字体大小单位<br>对于一个页面的字体大小，使用px作为单位时可能扩展性不好，使用百分比作为单位时候也不符合习惯，最佳选择是使用em作为单位来定义字体大小。使用em作为单位，当需要改变页面整体的文字大小时，我们只需要改变根元素字体大小即可，工作量变得非常少。</p>\n<p>2.rem：<br>  rem是CSS3新引入的单位，目前除了IE8及以前版本之外，大部分主浏览器都支持rem的。  </p>\n<h3 id=\"3-2-CSS特性：\"><a href=\"#3-2-CSS特性：\" class=\"headerlink\" title=\"3.2 CSS特性：\"></a>3.2 CSS特性：</h3><p>继承性和层叠性<br>3.2.1 继承性： 子元素继承了父元素的某些样式和属性。（注意： 并不是所有的子元素都有继承性，如：padding，margin，border等就不具备继承性）  </p>\n<p>3.2.2 层叠性：样式的覆盖</p>\n<h3 id=\"3-3-CSS优先级\"><a href=\"#3-3-CSS优先级\" class=\"headerlink\" title=\"3.3 CSS优先级\"></a>3.3 CSS优先级</h3><p>（1）引用方式冲突<br>（2）继承方式冲突<br>（3）指定样式冲突<br>（4）继承样式与指定样式冲突<br>（5）!important</p>\n<p>3.3.1 引用方式冲突：<br> CSS常用的三种引用方式:外部样式、内部样式、行内样式  </p>\n<h3 id=\"行内样式-gt-内部样式-外部样式\"><a href=\"#行内样式-gt-内部样式-外部样式\" class=\"headerlink\" title=\"行内样式 &gt; (内部样式 = 外部样式)\"></a>行内样式 &gt; (内部样式 = 外部样式)</h3><p> 如果内部样式和外部样式同时存在，则以最后引入的样式为准（后来者居上）  </p>\n<p>3.3.2 继承方式冲突<br>由于继承方式引起的冲突，最近的祖先元素获胜。  </p>\n<p>3.3.3  指定样式冲突<br>指定样式，指的是指定“当前元素”的样式。直接指定的样式发生冲突时，样式权值高者获胜。  </p>\n<h3 id=\"行内样式-gt-id选择器-gt-class选择器-gt-元素选择器\"><a href=\"#行内样式-gt-id选择器-gt-class选择器-gt-元素选择器\" class=\"headerlink\" title=\"行内样式 &gt; id选择器 &gt; class选择器 &gt; 元素选择器\"></a>行内样式 &gt; id选择器 &gt; class选择器 &gt; 元素选择器</h3><p>3.3.4 继承样式和指定样式冲突<br>当继承样式和指定样式冲突时，指定样式获胜  </p>\n<p>3.3.5 !important<br>!important会覆盖CSS中任何的其他样式<br>优先级：优先级高的样式覆盖优先级低的样式<br>       同一优先级的样式，后定义的覆盖先定义的，即后来者居上。  </p>\n<p>3.4 CSS引入方式<br>常用的三种：<br>（1）外部样式 ：link方式，先加载CSS后加载HTML<br> 所谓的“外部样式表”，就是把CSS代码和HTML代码单独放在不同的文件中·，然后在HTML文档中使用link标签来引用CSS样式。<br> 外部样式表在氮素文件中定义，并且在&lt; head &gt;&lt; /head &gt;标签对中使用link标签来引用。<br> 多用于公有样式<br>（2）内部样式：私有样式<br>（3）行内样式：用于小修改或者优先级方面<br>不常用的：<br>@import方式（即“导入样式”）：先加载HTMl后加载CSS，用户体验非常差  </p>\n<p>3.5 CSS选择器<br>（1）元素选择器<br>（2）id选择器<br>（3）class选择器<br>（4）群组选择器<br>常见的层次选择器：父子、后代、兄弟、相邻<br>M N : 后代选择器，选择M元素内部后代N元素（所有N元素）<br>M>N: 子代选择器，选择M元素内部子代N元素（所有第1级N元素）<br>M~N: 兄弟选择器，选择M元素后所有的同级N元素<br>M+N：相邻选择器，选择M元素相邻的下一个元素（M、N是同级元素）  </p>\n","excerpt":"","more":"<h2 id=\"CSS基础知识\"><a href=\"#CSS基础知识\" class=\"headerlink\" title=\"CSS基础知识\"></a>CSS基础知识</h2><h3 id=\"3-1-CSS单位\"><a href=\"#3-1-CSS单位\" class=\"headerlink\" title=\"3.1 CSS单位\"></a>3.1 CSS单位</h3><h4 id=\"3-1-1-绝对单位\"><a href=\"#3-1-1-绝对单位\" class=\"headerlink\" title=\"3.1.1 绝对单位\"></a>3.1.1 绝对单位</h4><p>cm：厘米、<br>mm: 毫米、<br>in: 英寸、<br>pt： 磅(point),印刷的点数、<br>pc： pica，1pc = 12pt</p>\n<h3 id=\"3-1-2-相对单位\"><a href=\"#3-1-2-相对单位\" class=\"headerlink\" title=\"3.1.2 相对单位\"></a>3.1.2 相对单位</h3><p>在CSS中相对单位定义的大小是不固定的，一般是相对其他长度而言：常用的相对单位如下：<br>px：像素（一张图片最小的点，或者屏幕最小的点）<br>%： 百分比<br>em： 1em = “当前元素字体大小”<br>rem： 1rem = “根元素”字体大小  </p>\n<ol>\n<li>在CSS中，使用em使用小技巧：<br>（1）首行缩进使用text-indent：2em实现；<br>（2）使用em作为统一单位<br>例如：<br>&lt; style type=”text/css” &gt;<br> body{font-size: 62.5%;}<br> #p1{font-size:1em;}<br> #p2{font-size:1.5em;}<br> #p3{font-size:2em;}<br>&lt; /style &gt;  </li>\n</ol>\n<p>(3)使用em作为字体大小单位<br>对于一个页面的字体大小，使用px作为单位时可能扩展性不好，使用百分比作为单位时候也不符合习惯，最佳选择是使用em作为单位来定义字体大小。使用em作为单位，当需要改变页面整体的文字大小时，我们只需要改变根元素字体大小即可，工作量变得非常少。</p>\n<p>2.rem：<br>  rem是CSS3新引入的单位，目前除了IE8及以前版本之外，大部分主浏览器都支持rem的。  </p>\n<h3 id=\"3-2-CSS特性：\"><a href=\"#3-2-CSS特性：\" class=\"headerlink\" title=\"3.2 CSS特性：\"></a>3.2 CSS特性：</h3><p>继承性和层叠性<br>3.2.1 继承性： 子元素继承了父元素的某些样式和属性。（注意： 并不是所有的子元素都有继承性，如：padding，margin，border等就不具备继承性）  </p>\n<p>3.2.2 层叠性：样式的覆盖</p>\n<h3 id=\"3-3-CSS优先级\"><a href=\"#3-3-CSS优先级\" class=\"headerlink\" title=\"3.3 CSS优先级\"></a>3.3 CSS优先级</h3><p>（1）引用方式冲突<br>（2）继承方式冲突<br>（3）指定样式冲突<br>（4）继承样式与指定样式冲突<br>（5）!important</p>\n<p>3.3.1 引用方式冲突：<br> CSS常用的三种引用方式:外部样式、内部样式、行内样式  </p>\n<h3 id=\"行内样式-gt-内部样式-外部样式\"><a href=\"#行内样式-gt-内部样式-外部样式\" class=\"headerlink\" title=\"行内样式 &gt; (内部样式 = 外部样式)\"></a>行内样式 &gt; (内部样式 = 外部样式)</h3><p> 如果内部样式和外部样式同时存在，则以最后引入的样式为准（后来者居上）  </p>\n<p>3.3.2 继承方式冲突<br>由于继承方式引起的冲突，最近的祖先元素获胜。  </p>\n<p>3.3.3  指定样式冲突<br>指定样式，指的是指定“当前元素”的样式。直接指定的样式发生冲突时，样式权值高者获胜。  </p>\n<h3 id=\"行内样式-gt-id选择器-gt-class选择器-gt-元素选择器\"><a href=\"#行内样式-gt-id选择器-gt-class选择器-gt-元素选择器\" class=\"headerlink\" title=\"行内样式 &gt; id选择器 &gt; class选择器 &gt; 元素选择器\"></a>行内样式 &gt; id选择器 &gt; class选择器 &gt; 元素选择器</h3><p>3.3.4 继承样式和指定样式冲突<br>当继承样式和指定样式冲突时，指定样式获胜  </p>\n<p>3.3.5 !important<br>!important会覆盖CSS中任何的其他样式<br>优先级：优先级高的样式覆盖优先级低的样式<br>       同一优先级的样式，后定义的覆盖先定义的，即后来者居上。  </p>\n<p>3.4 CSS引入方式<br>常用的三种：<br>（1）外部样式 ：link方式，先加载CSS后加载HTML<br> 所谓的“外部样式表”，就是把CSS代码和HTML代码单独放在不同的文件中·，然后在HTML文档中使用link标签来引用CSS样式。<br> 外部样式表在氮素文件中定义，并且在&lt; head &gt;&lt; /head &gt;标签对中使用link标签来引用。<br> 多用于公有样式<br>（2）内部样式：私有样式<br>（3）行内样式：用于小修改或者优先级方面<br>不常用的：<br>@import方式（即“导入样式”）：先加载HTMl后加载CSS，用户体验非常差  </p>\n<p>3.5 CSS选择器<br>（1）元素选择器<br>（2）id选择器<br>（3）class选择器<br>（4）群组选择器<br>常见的层次选择器：父子、后代、兄弟、相邻<br>M N : 后代选择器，选择M元素内部后代N元素（所有N元素）<br>M>N: 子代选择器，选择M元素内部子代N元素（所有第1级N元素）<br>M~N: 兄弟选择器，选择M元素后所有的同级N元素<br>M+N：相邻选择器，选择M元素相邻的下一个元素（M、N是同级元素）  </p>\n"},{"title":"1-HTML基础知识","date":"2017-06-02T13:25:55.000Z","_content":"\n# HTML基础知识\n#### 1.1 HTML、XHTML、HTML5\n1. 前端最核心的三大技术是HTML、CSS和JavaScript。HTML定义网页的结构，CSS定义网页的外观，而JavaScript定义页面的行为。\n\n2. HTML（超文本标记语言），是构成网页文档的主要语言。\n\n3. XHTML（扩展的超文本标记语言），语法上比HTML更加严格。\n\n4. HTML和XHTML的区别：  \n4.1\tXHTML标签必须闭合。  \n例如：“< div \\>< / div \\>”  \n空标签也需要闭合。  \n例如：< br \\>要写成< br/ \\>   \n4.2\tXHTML标签以及属性必须小写。（属性值可以大写）  \n4.3\tXHTML标签属性必须用引号，单双引号都可以。  \n4.4\tXHTML标签用id属性代替name属性。  \n在XHTML中，除了表单元素之外的所有元素，都应该用id而不是name。    \n错误写法：< div name=”wrapper” \\>< / div \\>  \n正确写法：< div id=”wrapper” \\>< /  div \\>  \n4.5\tHTML指的是HTML4.01，XHTML是HTML的过渡版本，XHTML是XML风格的HTML4.01。  \n\n5. HTML5有以下几个特点：  \n5.1 文档类型说明：基于HTML5设计准则中的“化繁为简”原则，页面文档类型< !DOCTYPE \\>被极大地简化了。  \n5.2 标签不再区分大小写。  \n5.3 允许属性值不加引导。  \n5.4 允许部分属性的属性值省略。  \n\n#### 1.2 div和span  \n1. div 和 span没有任何语义，正是因为没有语义，这两个标签一般都是配合CSS来定义元素样式的。  \n  \n2. div 和 span 区别如下：  \n2.1. div 是块元素，可以包含任何块元素和行内元素，不会与其他元素位于同一行；span是行内元素，可以与其他行内元素位于同一行。  \n2.2 div常用于页面中较大块的结构划分，然后配合CSS来操作；span一般用来包含文字等，它没有结构意义，纯粹是应用样式。当其他行内元素都不适合的时候，可以用span来配合CSS操作。  \n\n3. div 、span、label  \n3.1 div和span是无语义标签，label是有语义标签。  \n3.2 label只适用于表单中，用于显示在输入控件旁边的说明性文字。  \n\n#### 1.3 id和class  \n1.3.1 id属性  \n id 属性具有唯一性，也就是说在一个页面中相同的id只允许出现一次。   \n \n1.3.2 class属性\n同一个页面的相同元素或者不同元素，可以设置相同的class，然后使得相同的class元素具有相同的样式。 \n\n#### 1.4 浏览器标题栏小图标\n在head标签添加一个link标签  \n例如：< link rel=”shortcut icon” type=”image/x-icon” href=”favicon.ico” / \\>\nrel和 type这两个属性的取值是固定形式。href属性取值为小图标的地址。\n注意：小图标的格式是.ico，而不是.jpeg, .png, .gif等格式。\n","source":"_posts/1-HTML基础知识.md","raw":"---\ntitle: 1-HTML基础知识\ndate: 2017-06-02 21:25:55\ntags: html\n---\n\n# HTML基础知识\n#### 1.1 HTML、XHTML、HTML5\n1. 前端最核心的三大技术是HTML、CSS和JavaScript。HTML定义网页的结构，CSS定义网页的外观，而JavaScript定义页面的行为。\n\n2. HTML（超文本标记语言），是构成网页文档的主要语言。\n\n3. XHTML（扩展的超文本标记语言），语法上比HTML更加严格。\n\n4. HTML和XHTML的区别：  \n4.1\tXHTML标签必须闭合。  \n例如：“< div \\>< / div \\>”  \n空标签也需要闭合。  \n例如：< br \\>要写成< br/ \\>   \n4.2\tXHTML标签以及属性必须小写。（属性值可以大写）  \n4.3\tXHTML标签属性必须用引号，单双引号都可以。  \n4.4\tXHTML标签用id属性代替name属性。  \n在XHTML中，除了表单元素之外的所有元素，都应该用id而不是name。    \n错误写法：< div name=”wrapper” \\>< / div \\>  \n正确写法：< div id=”wrapper” \\>< /  div \\>  \n4.5\tHTML指的是HTML4.01，XHTML是HTML的过渡版本，XHTML是XML风格的HTML4.01。  \n\n5. HTML5有以下几个特点：  \n5.1 文档类型说明：基于HTML5设计准则中的“化繁为简”原则，页面文档类型< !DOCTYPE \\>被极大地简化了。  \n5.2 标签不再区分大小写。  \n5.3 允许属性值不加引导。  \n5.4 允许部分属性的属性值省略。  \n\n#### 1.2 div和span  \n1. div 和 span没有任何语义，正是因为没有语义，这两个标签一般都是配合CSS来定义元素样式的。  \n  \n2. div 和 span 区别如下：  \n2.1. div 是块元素，可以包含任何块元素和行内元素，不会与其他元素位于同一行；span是行内元素，可以与其他行内元素位于同一行。  \n2.2 div常用于页面中较大块的结构划分，然后配合CSS来操作；span一般用来包含文字等，它没有结构意义，纯粹是应用样式。当其他行内元素都不适合的时候，可以用span来配合CSS操作。  \n\n3. div 、span、label  \n3.1 div和span是无语义标签，label是有语义标签。  \n3.2 label只适用于表单中，用于显示在输入控件旁边的说明性文字。  \n\n#### 1.3 id和class  \n1.3.1 id属性  \n id 属性具有唯一性，也就是说在一个页面中相同的id只允许出现一次。   \n \n1.3.2 class属性\n同一个页面的相同元素或者不同元素，可以设置相同的class，然后使得相同的class元素具有相同的样式。 \n\n#### 1.4 浏览器标题栏小图标\n在head标签添加一个link标签  \n例如：< link rel=”shortcut icon” type=”image/x-icon” href=”favicon.ico” / \\>\nrel和 type这两个属性的取值是固定形式。href属性取值为小图标的地址。\n注意：小图标的格式是.ico，而不是.jpeg, .png, .gif等格式。\n","slug":"1-HTML基础知识","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyv0008b01th9jvd3g6","content":"<h1 id=\"HTML基础知识\"><a href=\"#HTML基础知识\" class=\"headerlink\" title=\"HTML基础知识\"></a>HTML基础知识</h1><h4 id=\"1-1-HTML、XHTML、HTML5\"><a href=\"#1-1-HTML、XHTML、HTML5\" class=\"headerlink\" title=\"1.1 HTML、XHTML、HTML5\"></a>1.1 HTML、XHTML、HTML5</h4><ol>\n<li><p>前端最核心的三大技术是HTML、CSS和JavaScript。HTML定义网页的结构，CSS定义网页的外观，而JavaScript定义页面的行为。</p>\n</li>\n<li><p>HTML（超文本标记语言），是构成网页文档的主要语言。</p>\n</li>\n<li><p>XHTML（扩展的超文本标记语言），语法上比HTML更加严格。</p>\n</li>\n<li><p>HTML和XHTML的区别：<br>4.1    XHTML标签必须闭合。<br>例如：“&lt; div >&lt; / div >”<br>空标签也需要闭合。<br>例如：&lt; br >要写成&lt; br/ ><br>4.2    XHTML标签以及属性必须小写。（属性值可以大写）<br>4.3    XHTML标签属性必须用引号，单双引号都可以。<br>4.4    XHTML标签用id属性代替name属性。<br>在XHTML中，除了表单元素之外的所有元素，都应该用id而不是name。<br>错误写法：&lt; div name=”wrapper” >&lt; / div ><br>正确写法：&lt; div id=”wrapper” >&lt; /  div ><br>4.5    HTML指的是HTML4.01，XHTML是HTML的过渡版本，XHTML是XML风格的HTML4.01。  </p>\n</li>\n<li><p>HTML5有以下几个特点：<br>5.1 文档类型说明：基于HTML5设计准则中的“化繁为简”原则，页面文档类型&lt; !DOCTYPE >被极大地简化了。<br>5.2 标签不再区分大小写。<br>5.3 允许属性值不加引导。<br>5.4 允许部分属性的属性值省略。  </p>\n</li>\n</ol>\n<h4 id=\"1-2-div和span\"><a href=\"#1-2-div和span\" class=\"headerlink\" title=\"1.2 div和span\"></a>1.2 div和span</h4><ol>\n<li><p>div 和 span没有任何语义，正是因为没有语义，这两个标签一般都是配合CSS来定义元素样式的。  </p>\n</li>\n<li><p>div 和 span 区别如下：<br>2.1. div 是块元素，可以包含任何块元素和行内元素，不会与其他元素位于同一行；span是行内元素，可以与其他行内元素位于同一行。<br>2.2 div常用于页面中较大块的结构划分，然后配合CSS来操作；span一般用来包含文字等，它没有结构意义，纯粹是应用样式。当其他行内元素都不适合的时候，可以用span来配合CSS操作。  </p>\n</li>\n<li><p>div 、span、label<br>3.1 div和span是无语义标签，label是有语义标签。<br>3.2 label只适用于表单中，用于显示在输入控件旁边的说明性文字。  </p>\n</li>\n</ol>\n<h4 id=\"1-3-id和class\"><a href=\"#1-3-id和class\" class=\"headerlink\" title=\"1.3 id和class\"></a>1.3 id和class</h4><p>1.3.1 id属性<br> id 属性具有唯一性，也就是说在一个页面中相同的id只允许出现一次。   </p>\n<p>1.3.2 class属性<br>同一个页面的相同元素或者不同元素，可以设置相同的class，然后使得相同的class元素具有相同的样式。 </p>\n<h4 id=\"1-4-浏览器标题栏小图标\"><a href=\"#1-4-浏览器标题栏小图标\" class=\"headerlink\" title=\"1.4 浏览器标题栏小图标\"></a>1.4 浏览器标题栏小图标</h4><p>在head标签添加一个link标签<br>例如：&lt; link rel=”shortcut icon” type=”image/x-icon” href=”favicon.ico” / ><br>rel和 type这两个属性的取值是固定形式。href属性取值为小图标的地址。<br>注意：小图标的格式是.ico，而不是.jpeg, .png, .gif等格式。</p>\n","excerpt":"","more":"<h1 id=\"HTML基础知识\"><a href=\"#HTML基础知识\" class=\"headerlink\" title=\"HTML基础知识\"></a>HTML基础知识</h1><h4 id=\"1-1-HTML、XHTML、HTML5\"><a href=\"#1-1-HTML、XHTML、HTML5\" class=\"headerlink\" title=\"1.1 HTML、XHTML、HTML5\"></a>1.1 HTML、XHTML、HTML5</h4><ol>\n<li><p>前端最核心的三大技术是HTML、CSS和JavaScript。HTML定义网页的结构，CSS定义网页的外观，而JavaScript定义页面的行为。</p>\n</li>\n<li><p>HTML（超文本标记语言），是构成网页文档的主要语言。</p>\n</li>\n<li><p>XHTML（扩展的超文本标记语言），语法上比HTML更加严格。</p>\n</li>\n<li><p>HTML和XHTML的区别：<br>4.1    XHTML标签必须闭合。<br>例如：“&lt; div >&lt; / div >”<br>空标签也需要闭合。<br>例如：&lt; br >要写成&lt; br/ ><br>4.2    XHTML标签以及属性必须小写。（属性值可以大写）<br>4.3    XHTML标签属性必须用引号，单双引号都可以。<br>4.4    XHTML标签用id属性代替name属性。<br>在XHTML中，除了表单元素之外的所有元素，都应该用id而不是name。<br>错误写法：&lt; div name=”wrapper” >&lt; / div ><br>正确写法：&lt; div id=”wrapper” >&lt; /  div ><br>4.5    HTML指的是HTML4.01，XHTML是HTML的过渡版本，XHTML是XML风格的HTML4.01。  </p>\n</li>\n<li><p>HTML5有以下几个特点：<br>5.1 文档类型说明：基于HTML5设计准则中的“化繁为简”原则，页面文档类型&lt; !DOCTYPE >被极大地简化了。<br>5.2 标签不再区分大小写。<br>5.3 允许属性值不加引导。<br>5.4 允许部分属性的属性值省略。  </p>\n</li>\n</ol>\n<h4 id=\"1-2-div和span\"><a href=\"#1-2-div和span\" class=\"headerlink\" title=\"1.2 div和span\"></a>1.2 div和span</h4><ol>\n<li><p>div 和 span没有任何语义，正是因为没有语义，这两个标签一般都是配合CSS来定义元素样式的。  </p>\n</li>\n<li><p>div 和 span 区别如下：<br>2.1. div 是块元素，可以包含任何块元素和行内元素，不会与其他元素位于同一行；span是行内元素，可以与其他行内元素位于同一行。<br>2.2 div常用于页面中较大块的结构划分，然后配合CSS来操作；span一般用来包含文字等，它没有结构意义，纯粹是应用样式。当其他行内元素都不适合的时候，可以用span来配合CSS操作。  </p>\n</li>\n<li><p>div 、span、label<br>3.1 div和span是无语义标签，label是有语义标签。<br>3.2 label只适用于表单中，用于显示在输入控件旁边的说明性文字。  </p>\n</li>\n</ol>\n<h4 id=\"1-3-id和class\"><a href=\"#1-3-id和class\" class=\"headerlink\" title=\"1.3 id和class\"></a>1.3 id和class</h4><p>1.3.1 id属性<br> id 属性具有唯一性，也就是说在一个页面中相同的id只允许出现一次。   </p>\n<p>1.3.2 class属性<br>同一个页面的相同元素或者不同元素，可以设置相同的class，然后使得相同的class元素具有相同的样式。 </p>\n<h4 id=\"1-4-浏览器标题栏小图标\"><a href=\"#1-4-浏览器标题栏小图标\" class=\"headerlink\" title=\"1.4 浏览器标题栏小图标\"></a>1.4 浏览器标题栏小图标</h4><p>在head标签添加一个link标签<br>例如：&lt; link rel=”shortcut icon” type=”image/x-icon” href=”favicon.ico” / ><br>rel和 type这两个属性的取值是固定形式。href属性取值为小图标的地址。<br>注意：小图标的格式是.ico，而不是.jpeg, .png, .gif等格式。</p>\n"},{"title":"5-盒子模型","date":"2017-06-07T11:52:17.000Z","_content":"\n5.1 CSS盒子模型  \n**每个元素都可以看成一个盒子**  \n盒子模型由content、padding、margin、border四个属性组成  \ncontent：内容，可以是文字或图片    \nmargin：外边距，用于定义页面中元素与元素之间的距离    \npadding: 内边距（也称“补白”），用于定义内容与边框之间的距离  \nborder: 边框 \n>内容区：  \n内容区是CSS盒子模型的中心，有三个属性：width、height、overflow  \nwidth和height是针对内容区而言，不包括padding部分  \noverflow溢出属性，用来处理内容信息过多而超出内容区所占范围。  \n\n5.2 深入border  \n**“border:0”和“border:none”的区别主要体现在两点：性能差异和兼容差异**\n  \n5.2.1 性能差异 \n \n* \"border:0“ 表示把border定义为0px，浏览器会对border进行渲染，需要占用内存\n* \"border:none\" 表示把border定义为”none(无)“，浏览器对改属性不会作出渲染，不需要占用内存  \n\n5.2.2 兼容差异  \n兼容差异只存在于IE6和IE7的< input type=\"button\" / >标签以及< button >标签中，其他浏览器不存在兼容问题  \n\"border:0“ 在所有浏览器中的效果都一样，都是把边框隐藏掉（不是去掉）   \n\"border:none\"  对IE6和IE7按钮的边框无效，在其他浏览器中会去掉按钮的边框\n  \n5.3 负margin使用技巧  \n\n* 图片与文字对齐\n* 自适应两列布局\n* 元素垂直居中\n* tab选项卡\n\n5.4 overflow使用  \n\n* \"overflow:scroll\" 显示滚动条  \n* \"overflow:hidden\" 清除浮动，隐藏溢出内容，以免影响布局，不好的一点是这部分的内容完全不显示，比如图片只显示了一部分  \n\n>使用clear属性清除浮动的缺点是增加了一个多余标签\n>\"overflow:hidden\" 是一个小炸弹，它会将超出父元素部分的内容隐藏\n\n\n\n","source":"_posts/5-盒子模型.md","raw":"---\ntitle: 5-盒子模型\ndate: 2017-06-07 19:52:17\ntags: html\n---\n\n5.1 CSS盒子模型  \n**每个元素都可以看成一个盒子**  \n盒子模型由content、padding、margin、border四个属性组成  \ncontent：内容，可以是文字或图片    \nmargin：外边距，用于定义页面中元素与元素之间的距离    \npadding: 内边距（也称“补白”），用于定义内容与边框之间的距离  \nborder: 边框 \n>内容区：  \n内容区是CSS盒子模型的中心，有三个属性：width、height、overflow  \nwidth和height是针对内容区而言，不包括padding部分  \noverflow溢出属性，用来处理内容信息过多而超出内容区所占范围。  \n\n5.2 深入border  \n**“border:0”和“border:none”的区别主要体现在两点：性能差异和兼容差异**\n  \n5.2.1 性能差异 \n \n* \"border:0“ 表示把border定义为0px，浏览器会对border进行渲染，需要占用内存\n* \"border:none\" 表示把border定义为”none(无)“，浏览器对改属性不会作出渲染，不需要占用内存  \n\n5.2.2 兼容差异  \n兼容差异只存在于IE6和IE7的< input type=\"button\" / >标签以及< button >标签中，其他浏览器不存在兼容问题  \n\"border:0“ 在所有浏览器中的效果都一样，都是把边框隐藏掉（不是去掉）   \n\"border:none\"  对IE6和IE7按钮的边框无效，在其他浏览器中会去掉按钮的边框\n  \n5.3 负margin使用技巧  \n\n* 图片与文字对齐\n* 自适应两列布局\n* 元素垂直居中\n* tab选项卡\n\n5.4 overflow使用  \n\n* \"overflow:scroll\" 显示滚动条  \n* \"overflow:hidden\" 清除浮动，隐藏溢出内容，以免影响布局，不好的一点是这部分的内容完全不显示，比如图片只显示了一部分  \n\n>使用clear属性清除浮动的缺点是增加了一个多余标签\n>\"overflow:hidden\" 是一个小炸弹，它会将超出父元素部分的内容隐藏\n\n\n\n","slug":"5-盒子模型","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyv000ab01t24ci9l7c","content":"<p>5.1 CSS盒子模型<br><strong>每个元素都可以看成一个盒子</strong><br>盒子模型由content、padding、margin、border四个属性组成<br>content：内容，可以是文字或图片<br>margin：外边距，用于定义页面中元素与元素之间的距离<br>padding: 内边距（也称“补白”），用于定义内容与边框之间的距离<br>border: 边框 </p>\n<blockquote>\n<p>内容区：<br>内容区是CSS盒子模型的中心，有三个属性：width、height、overflow<br>width和height是针对内容区而言，不包括padding部分<br>overflow溢出属性，用来处理内容信息过多而超出内容区所占范围。  </p>\n</blockquote>\n<p>5.2 深入border<br><strong>“border:0”和“border:none”的区别主要体现在两点：性能差异和兼容差异</strong></p>\n<p>5.2.1 性能差异 </p>\n<ul>\n<li>“border:0“ 表示把border定义为0px，浏览器会对border进行渲染，需要占用内存</li>\n<li>“border:none” 表示把border定义为”none(无)“，浏览器对改属性不会作出渲染，不需要占用内存  </li>\n</ul>\n<p>5.2.2 兼容差异<br>兼容差异只存在于IE6和IE7的&lt; input type=”button” / &gt;标签以及&lt; button &gt;标签中，其他浏览器不存在兼容问题<br>“border:0“ 在所有浏览器中的效果都一样，都是把边框隐藏掉（不是去掉）<br>“border:none”  对IE6和IE7按钮的边框无效，在其他浏览器中会去掉按钮的边框</p>\n<p>5.3 负margin使用技巧  </p>\n<ul>\n<li>图片与文字对齐</li>\n<li>自适应两列布局</li>\n<li>元素垂直居中</li>\n<li>tab选项卡</li>\n</ul>\n<p>5.4 overflow使用  </p>\n<ul>\n<li>“overflow:scroll” 显示滚动条  </li>\n<li>“overflow:hidden” 清除浮动，隐藏溢出内容，以免影响布局，不好的一点是这部分的内容完全不显示，比如图片只显示了一部分  </li>\n</ul>\n<blockquote>\n<p>使用clear属性清除浮动的缺点是增加了一个多余标签<br>“overflow:hidden” 是一个小炸弹，它会将超出父元素部分的内容隐藏</p>\n</blockquote>\n","excerpt":"","more":"<p>5.1 CSS盒子模型<br><strong>每个元素都可以看成一个盒子</strong><br>盒子模型由content、padding、margin、border四个属性组成<br>content：内容，可以是文字或图片<br>margin：外边距，用于定义页面中元素与元素之间的距离<br>padding: 内边距（也称“补白”），用于定义内容与边框之间的距离<br>border: 边框 </p>\n<blockquote>\n<p>内容区：<br>内容区是CSS盒子模型的中心，有三个属性：width、height、overflow<br>width和height是针对内容区而言，不包括padding部分<br>overflow溢出属性，用来处理内容信息过多而超出内容区所占范围。  </p>\n</blockquote>\n<p>5.2 深入border<br><strong>“border:0”和“border:none”的区别主要体现在两点：性能差异和兼容差异</strong></p>\n<p>5.2.1 性能差异 </p>\n<ul>\n<li>“border:0“ 表示把border定义为0px，浏览器会对border进行渲染，需要占用内存</li>\n<li>“border:none” 表示把border定义为”none(无)“，浏览器对改属性不会作出渲染，不需要占用内存  </li>\n</ul>\n<p>5.2.2 兼容差异<br>兼容差异只存在于IE6和IE7的&lt; input type=”button” / &gt;标签以及&lt; button &gt;标签中，其他浏览器不存在兼容问题<br>“border:0“ 在所有浏览器中的效果都一样，都是把边框隐藏掉（不是去掉）<br>“border:none”  对IE6和IE7按钮的边框无效，在其他浏览器中会去掉按钮的边框</p>\n<p>5.3 负margin使用技巧  </p>\n<ul>\n<li>图片与文字对齐</li>\n<li>自适应两列布局</li>\n<li>元素垂直居中</li>\n<li>tab选项卡</li>\n</ul>\n<p>5.4 overflow使用  </p>\n<ul>\n<li>“overflow:scroll” 显示滚动条  </li>\n<li>“overflow:hidden” 清除浮动，隐藏溢出内容，以免影响布局，不好的一点是这部分的内容完全不显示，比如图片只显示了一部分  </li>\n</ul>\n<blockquote>\n<p>使用clear属性清除浮动的缺点是增加了一个多余标签<br>“overflow:hidden” 是一个小炸弹，它会将超出父元素部分的内容隐藏</p>\n</blockquote>\n"},{"title":"4-CSS规范","date":"2017-06-03T13:22:25.000Z","_content":"\n4.1 命名规范：  \n4.1.1 css文件命名  \n\n* reset.css  重置样式，重置元素默认样式，使得页面在所有浏览器中有统一的外观\n* global.css 全局样式，全站公用，定义页面基础样式（常见的公共模块包括导航、底部信息栏；常见的基础样式包括全局字体、文字颜色等）\n* themes.css 主题样式，用于实现换肤功能\n* module.css 模块样式，用于模块的样式\n* master.css 母版样式，用于母版页样式\n* columns.css 专栏样式\n* forms.css 表单样式\n* mend.css 补丁样式，用于维护、修改的样式\n* print.css 打印样式  \n\n4.2 id和class命名  \n（1）驼峰命名法  \n（2）中划线命名法（推荐使用）  \n（3）下划线命名法  ","source":"_posts/4-CSS规范.md","raw":"---\ntitle: 4-CSS规范\ndate: 2017-06-03 21:22:25\ntags: html\n---\n\n4.1 命名规范：  \n4.1.1 css文件命名  \n\n* reset.css  重置样式，重置元素默认样式，使得页面在所有浏览器中有统一的外观\n* global.css 全局样式，全站公用，定义页面基础样式（常见的公共模块包括导航、底部信息栏；常见的基础样式包括全局字体、文字颜色等）\n* themes.css 主题样式，用于实现换肤功能\n* module.css 模块样式，用于模块的样式\n* master.css 母版样式，用于母版页样式\n* columns.css 专栏样式\n* forms.css 表单样式\n* mend.css 补丁样式，用于维护、修改的样式\n* print.css 打印样式  \n\n4.2 id和class命名  \n（1）驼峰命名法  \n（2）中划线命名法（推荐使用）  \n（3）下划线命名法  ","slug":"4-CSS规范","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyw000db01t4flaa903","content":"<p>4.1 命名规范：<br>4.1.1 css文件命名  </p>\n<ul>\n<li>reset.css  重置样式，重置元素默认样式，使得页面在所有浏览器中有统一的外观</li>\n<li>global.css 全局样式，全站公用，定义页面基础样式（常见的公共模块包括导航、底部信息栏；常见的基础样式包括全局字体、文字颜色等）</li>\n<li>themes.css 主题样式，用于实现换肤功能</li>\n<li>module.css 模块样式，用于模块的样式</li>\n<li>master.css 母版样式，用于母版页样式</li>\n<li>columns.css 专栏样式</li>\n<li>forms.css 表单样式</li>\n<li>mend.css 补丁样式，用于维护、修改的样式</li>\n<li>print.css 打印样式  </li>\n</ul>\n<p>4.2 id和class命名<br>（1）驼峰命名法<br>（2）中划线命名法（推荐使用）<br>（3）下划线命名法  </p>\n","excerpt":"","more":"<p>4.1 命名规范：<br>4.1.1 css文件命名  </p>\n<ul>\n<li>reset.css  重置样式，重置元素默认样式，使得页面在所有浏览器中有统一的外观</li>\n<li>global.css 全局样式，全站公用，定义页面基础样式（常见的公共模块包括导航、底部信息栏；常见的基础样式包括全局字体、文字颜色等）</li>\n<li>themes.css 主题样式，用于实现换肤功能</li>\n<li>module.css 模块样式，用于模块的样式</li>\n<li>master.css 母版样式，用于母版页样式</li>\n<li>columns.css 专栏样式</li>\n<li>forms.css 表单样式</li>\n<li>mend.css 补丁样式，用于维护、修改的样式</li>\n<li>print.css 打印样式  </li>\n</ul>\n<p>4.2 id和class命名<br>（1）驼峰命名法<br>（2）中划线命名法（推荐使用）<br>（3）下划线命名法  </p>\n"},{"title":"6-常用的标签和属性","date":"2017-06-07T12:58:20.000Z","_content":"1. 常见块元素与行内元素  \n块级元素：div , p , form, ul, li , ol, dl, form, address, fieldset, hr, menu, table\r行内元素：span, strong, em, br, img , input, label...  \n\n2. display常见属性  \n\"display:none\"：元素被隐藏之后，不占据原来的位置    \n\"visibility:hidden\"：元素被隐藏之后，依然占据原来的位置  \n\"display:table-cell\":  \n可以让元素以表格单元格的形式呈现，具备td元素的特点。  \nIE8+以及其他现代浏览器都支持此属性，不过IE6/IE7中并不支持，考虑到IE6/IE7使用率越来越低，我们还是果断使用这一布局神器，可以实现以下3种功能    \n * 图片垂直居中于元素\n * 等高布局\n * 自动平均划分元素，并且在同一行显示\n\n\n3. 图片常用的三种居中方式  \n水平居中 \"text-align:center\"   \n垂直居中 \"display:table-cell\"和\"vertical-align:center\"配合实现  \n\n4. 使用\"font-size:0\"来去除\"display:inline-block\"的元素间距  \n\n5. 常用标签：  \ndl定义列表，结合dt、dd使用。dt定义列表中的项目，dd描述列表中的项目。  \nb 加粗  \nu 下划线  \ni 斜体  \ns 中划线  \nstrong  强调  \nhr 分割线\nimg标签下，alt属性是找不到图片的时候显示，title是鼠标放在图片上的时候显示  \na标签下，设置target=\"_blank\"属性，点击链接会打开新窗口，title属性设置内容，是鼠标放在链接上的时候显示  \n\n6. 搜索引擎优化  \n\"text-indent:-9999px;\"属性一般用于LOGO部分，在搜索引擎中h1是非常重要的标签，一般把网站的LOGO图片放到h1标签中，但是搜索引擎无法识别图片，只能识别文字，为了更好的优化SEO：  \n指定h1元素的长宽与LOGO图片的长宽一样，然后定义h1的背景图片（background-image）为LOGO图片  \n使用LOGO图片为h1的背景图片，然后使用\"text-indent:-9999px;\"属性来隐藏h1的文字内容。  \n\n7. \"text-align:center;\"与\"margin:0 auto;\"的区别    \n * \"text-align:center;\" 实现文字、inline元素以及inline-block元素的水平居中  \n * \"margin:0 auto;\" 实现的是块元素的水平居中  \n * \"text-align:center;\"在父元素中定义，\"margin:0 auto;\" 在当前元素中定义\n\n8. 清除浮动常见的三种方法  \n * clear:both（最常用）不应用于浮动元素本身，而是浮动元素后面的元素\n * overflow:hidden 应用于浮动元素的父元素，而是不是当前的浮动元素\n * ::after伪元素 结合clear:both使用\n","source":"_posts/6-常用的标签和属性.md","raw":"---\ntitle: 6-常用的标签和属性\ndate: 2017-06-07 20:58:20\ntags: html\n---\n1. 常见块元素与行内元素  \n块级元素：div , p , form, ul, li , ol, dl, form, address, fieldset, hr, menu, table\r行内元素：span, strong, em, br, img , input, label...  \n\n2. display常见属性  \n\"display:none\"：元素被隐藏之后，不占据原来的位置    \n\"visibility:hidden\"：元素被隐藏之后，依然占据原来的位置  \n\"display:table-cell\":  \n可以让元素以表格单元格的形式呈现，具备td元素的特点。  \nIE8+以及其他现代浏览器都支持此属性，不过IE6/IE7中并不支持，考虑到IE6/IE7使用率越来越低，我们还是果断使用这一布局神器，可以实现以下3种功能    \n * 图片垂直居中于元素\n * 等高布局\n * 自动平均划分元素，并且在同一行显示\n\n\n3. 图片常用的三种居中方式  \n水平居中 \"text-align:center\"   \n垂直居中 \"display:table-cell\"和\"vertical-align:center\"配合实现  \n\n4. 使用\"font-size:0\"来去除\"display:inline-block\"的元素间距  \n\n5. 常用标签：  \ndl定义列表，结合dt、dd使用。dt定义列表中的项目，dd描述列表中的项目。  \nb 加粗  \nu 下划线  \ni 斜体  \ns 中划线  \nstrong  强调  \nhr 分割线\nimg标签下，alt属性是找不到图片的时候显示，title是鼠标放在图片上的时候显示  \na标签下，设置target=\"_blank\"属性，点击链接会打开新窗口，title属性设置内容，是鼠标放在链接上的时候显示  \n\n6. 搜索引擎优化  \n\"text-indent:-9999px;\"属性一般用于LOGO部分，在搜索引擎中h1是非常重要的标签，一般把网站的LOGO图片放到h1标签中，但是搜索引擎无法识别图片，只能识别文字，为了更好的优化SEO：  \n指定h1元素的长宽与LOGO图片的长宽一样，然后定义h1的背景图片（background-image）为LOGO图片  \n使用LOGO图片为h1的背景图片，然后使用\"text-indent:-9999px;\"属性来隐藏h1的文字内容。  \n\n7. \"text-align:center;\"与\"margin:0 auto;\"的区别    \n * \"text-align:center;\" 实现文字、inline元素以及inline-block元素的水平居中  \n * \"margin:0 auto;\" 实现的是块元素的水平居中  \n * \"text-align:center;\"在父元素中定义，\"margin:0 auto;\" 在当前元素中定义\n\n8. 清除浮动常见的三种方法  \n * clear:both（最常用）不应用于浮动元素本身，而是浮动元素后面的元素\n * overflow:hidden 应用于浮动元素的父元素，而是不是当前的浮动元素\n * ::after伪元素 结合clear:both使用\n","slug":"6-常用的标签和属性","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyw000fb01tfn96ghp3","content":"<ol>\n<li><p>常见块元素与行内元素<br>块级元素：div , p , form, ul, li , ol, dl, form, address, fieldset, hr, menu, table<br>行内元素：span, strong, em, br, img , input, label…  </p>\n</li>\n<li><p>display常见属性<br>“display:none”：元素被隐藏之后，不占据原来的位置<br>“visibility:hidden”：元素被隐藏之后，依然占据原来的位置<br>“display:table-cell”:<br>可以让元素以表格单元格的形式呈现，具备td元素的特点。<br>IE8+以及其他现代浏览器都支持此属性，不过IE6/IE7中并不支持，考虑到IE6/IE7使用率越来越低，我们还是果断使用这一布局神器，可以实现以下3种功能    </p>\n<ul>\n<li>图片垂直居中于元素</li>\n<li>等高布局</li>\n<li>自动平均划分元素，并且在同一行显示</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>图片常用的三种居中方式<br>水平居中 “text-align:center”<br>垂直居中 “display:table-cell”和”vertical-align:center”配合实现  </p>\n</li>\n<li><p>使用”font-size:0”来去除”display:inline-block”的元素间距  </p>\n</li>\n<li><p>常用标签：<br>dl定义列表，结合dt、dd使用。dt定义列表中的项目，dd描述列表中的项目。<br>b 加粗<br>u 下划线<br>i 斜体<br>s 中划线<br>strong  强调<br>hr 分割线<br>img标签下，alt属性是找不到图片的时候显示，title是鼠标放在图片上的时候显示<br>a标签下，设置target=”_blank”属性，点击链接会打开新窗口，title属性设置内容，是鼠标放在链接上的时候显示  </p>\n</li>\n<li><p>搜索引擎优化<br>“text-indent:-9999px;”属性一般用于LOGO部分，在搜索引擎中h1是非常重要的标签，一般把网站的LOGO图片放到h1标签中，但是搜索引擎无法识别图片，只能识别文字，为了更好的优化SEO：<br>指定h1元素的长宽与LOGO图片的长宽一样，然后定义h1的背景图片（background-image）为LOGO图片<br>使用LOGO图片为h1的背景图片，然后使用”text-indent:-9999px;”属性来隐藏h1的文字内容。  </p>\n</li>\n<li><p>“text-align:center;”与”margin:0 auto;”的区别    </p>\n<ul>\n<li>“text-align:center;” 实现文字、inline元素以及inline-block元素的水平居中  </li>\n<li>“margin:0 auto;” 实现的是块元素的水平居中  </li>\n<li>“text-align:center;”在父元素中定义，”margin:0 auto;” 在当前元素中定义</li>\n</ul>\n</li>\n<li><p>清除浮动常见的三种方法  </p>\n<ul>\n<li>clear:both（最常用）不应用于浮动元素本身，而是浮动元素后面的元素</li>\n<li>overflow:hidden 应用于浮动元素的父元素，而是不是当前的浮动元素</li>\n<li>::after伪元素 结合clear:both使用</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>常见块元素与行内元素<br>块级元素：div , p , form, ul, li , ol, dl, form, address, fieldset, hr, menu, table<br>行内元素：span, strong, em, br, img , input, label…  </p>\n</li>\n<li><p>display常见属性<br>“display:none”：元素被隐藏之后，不占据原来的位置<br>“visibility:hidden”：元素被隐藏之后，依然占据原来的位置<br>“display:table-cell”:<br>可以让元素以表格单元格的形式呈现，具备td元素的特点。<br>IE8+以及其他现代浏览器都支持此属性，不过IE6/IE7中并不支持，考虑到IE6/IE7使用率越来越低，我们还是果断使用这一布局神器，可以实现以下3种功能    </p>\n<ul>\n<li>图片垂直居中于元素</li>\n<li>等高布局</li>\n<li>自动平均划分元素，并且在同一行显示</li>\n</ul>\n</li>\n</ol>\n<ol start=\"3\">\n<li><p>图片常用的三种居中方式<br>水平居中 “text-align:center”<br>垂直居中 “display:table-cell”和”vertical-align:center”配合实现  </p>\n</li>\n<li><p>使用”font-size:0”来去除”display:inline-block”的元素间距  </p>\n</li>\n<li><p>常用标签：<br>dl定义列表，结合dt、dd使用。dt定义列表中的项目，dd描述列表中的项目。<br>b 加粗<br>u 下划线<br>i 斜体<br>s 中划线<br>strong  强调<br>hr 分割线<br>img标签下，alt属性是找不到图片的时候显示，title是鼠标放在图片上的时候显示<br>a标签下，设置target=”_blank”属性，点击链接会打开新窗口，title属性设置内容，是鼠标放在链接上的时候显示  </p>\n</li>\n<li><p>搜索引擎优化<br>“text-indent:-9999px;”属性一般用于LOGO部分，在搜索引擎中h1是非常重要的标签，一般把网站的LOGO图片放到h1标签中，但是搜索引擎无法识别图片，只能识别文字，为了更好的优化SEO：<br>指定h1元素的长宽与LOGO图片的长宽一样，然后定义h1的背景图片（background-image）为LOGO图片<br>使用LOGO图片为h1的背景图片，然后使用”text-indent:-9999px;”属性来隐藏h1的文字内容。  </p>\n</li>\n<li><p>“text-align:center;”与”margin:0 auto;”的区别    </p>\n<ul>\n<li>“text-align:center;” 实现文字、inline元素以及inline-block元素的水平居中  </li>\n<li>“margin:0 auto;” 实现的是块元素的水平居中  </li>\n<li>“text-align:center;”在父元素中定义，”margin:0 auto;” 在当前元素中定义</li>\n</ul>\n</li>\n<li><p>清除浮动常见的三种方法  </p>\n<ul>\n<li>clear:both（最常用）不应用于浮动元素本身，而是浮动元素后面的元素</li>\n<li>overflow:hidden 应用于浮动元素的父元素，而是不是当前的浮动元素</li>\n<li>::after伪元素 结合clear:both使用</li>\n</ul>\n</li>\n</ol>\n"},{"title":"6月定个目标","date":"2017-06-05T14:30:42.000Z","_content":"\n想背单词，想看电视剧，想看小说，想学web前端，想学python，想学唱歌，想学跳舞，想练瑜伽，想跑步，想写博客，想学画画，想做的事情太多了。。。  \n\n于是我晚上8点下班回去，吃完饭，20个单词先看了一遍，也没记住，就又听了几首歌，听了一篇文章，看看空间朋友圈，就10点了  \n\n突然就觉得精力太分散了，每天下班后的时间就那么点，什么都想做，什么都没做好，想做的事真的得排个优先级了  \n\n6月份工作任务，上班时间提高效率，下班之前都能完成了，家里、个人生活都没什么占时较多的，这个月可以先尝试安排个计划  \n\n6月5号----6月30号  \n每天背20个单词   #优先级高（上下班地铁上、晚上回家）  \n每天早上看英文书半小时    #优先级高（上班前）  \nweb前端基础             #优先级高（下班后在公司看）  \n瑜伽15--20分钟          #优先级高（睡觉前）  \n博客                   #优先级中  \n看其他书               #优先级中  \n其他                  #优先级低  ","source":"_posts/6月定个目标.md","raw":"---\ntitle: 6月定个目标\ndate: 2017-06-05 22:30:42\ntags: [总结]\n---\n\n想背单词，想看电视剧，想看小说，想学web前端，想学python，想学唱歌，想学跳舞，想练瑜伽，想跑步，想写博客，想学画画，想做的事情太多了。。。  \n\n于是我晚上8点下班回去，吃完饭，20个单词先看了一遍，也没记住，就又听了几首歌，听了一篇文章，看看空间朋友圈，就10点了  \n\n突然就觉得精力太分散了，每天下班后的时间就那么点，什么都想做，什么都没做好，想做的事真的得排个优先级了  \n\n6月份工作任务，上班时间提高效率，下班之前都能完成了，家里、个人生活都没什么占时较多的，这个月可以先尝试安排个计划  \n\n6月5号----6月30号  \n每天背20个单词   #优先级高（上下班地铁上、晚上回家）  \n每天早上看英文书半小时    #优先级高（上班前）  \nweb前端基础             #优先级高（下班后在公司看）  \n瑜伽15--20分钟          #优先级高（睡觉前）  \n博客                   #优先级中  \n看其他书               #优先级中  \n其他                  #优先级低  ","slug":"6月定个目标","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyx000ib01t0xvce2vq","content":"<p>想背单词，想看电视剧，想看小说，想学web前端，想学python，想学唱歌，想学跳舞，想练瑜伽，想跑步，想写博客，想学画画，想做的事情太多了。。。  </p>\n<p>于是我晚上8点下班回去，吃完饭，20个单词先看了一遍，也没记住，就又听了几首歌，听了一篇文章，看看空间朋友圈，就10点了  </p>\n<p>突然就觉得精力太分散了，每天下班后的时间就那么点，什么都想做，什么都没做好，想做的事真的得排个优先级了  </p>\n<p>6月份工作任务，上班时间提高效率，下班之前都能完成了，家里、个人生活都没什么占时较多的，这个月可以先尝试安排个计划  </p>\n<p>6月5号—-6月30号<br>每天背20个单词   #优先级高（上下班地铁上、晚上回家）<br>每天早上看英文书半小时    #优先级高（上班前）<br>web前端基础             #优先级高（下班后在公司看）<br>瑜伽15–20分钟          #优先级高（睡觉前）<br>博客                   #优先级中<br>看其他书               #优先级中<br>其他                  #优先级低  </p>\n","excerpt":"","more":"<p>想背单词，想看电视剧，想看小说，想学web前端，想学python，想学唱歌，想学跳舞，想练瑜伽，想跑步，想写博客，想学画画，想做的事情太多了。。。  </p>\n<p>于是我晚上8点下班回去，吃完饭，20个单词先看了一遍，也没记住，就又听了几首歌，听了一篇文章，看看空间朋友圈，就10点了  </p>\n<p>突然就觉得精力太分散了，每天下班后的时间就那么点，什么都想做，什么都没做好，想做的事真的得排个优先级了  </p>\n<p>6月份工作任务，上班时间提高效率，下班之前都能完成了，家里、个人生活都没什么占时较多的，这个月可以先尝试安排个计划  </p>\n<p>6月5号—-6月30号<br>每天背20个单词   #优先级高（上下班地铁上、晚上回家）<br>每天早上看英文书半小时    #优先级高（上班前）<br>web前端基础             #优先级高（下班后在公司看）<br>瑜伽15–20分钟          #优先级高（睡觉前）<br>博客                   #优先级中<br>看其他书               #优先级中<br>其他                  #优先级低  </p>\n"},{"title":"7-布局和性能优化","date":"2017-06-09T14:59:53.000Z","_content":"\n1. 深入定位  \nCSS两大定位方式：浮动和定位。  \n * 浮动布局比较灵活，但不容易控制\n * 定位布局虽然缺乏灵活性，但可以精准的定页面中元素的位置\n\n2. 定位布局的四种方式：  \n * 固定定位（fixed）\n * 相对定位（ralative）\n * 绝对定位（absolute）  #会将元素转换为块元素\n * 静态定位（static）   \n  除了static之外的，元素定义了position之后，top、bottom、left、right才生效\n\n3. z-index属性  \n默认情况下处于不激活状态，设置了无效。只有定义了position为relative、absolute、fixed时才会被激活  \nz-index值越大的，会展现在越上层  \n  ","source":"_posts/7-布局和性能优化.md","raw":"---\ntitle: 7-布局和性能优化\ndate: 2017-06-09 22:59:53\ntags: html\n---\n\n1. 深入定位  \nCSS两大定位方式：浮动和定位。  \n * 浮动布局比较灵活，但不容易控制\n * 定位布局虽然缺乏灵活性，但可以精准的定页面中元素的位置\n\n2. 定位布局的四种方式：  \n * 固定定位（fixed）\n * 相对定位（ralative）\n * 绝对定位（absolute）  #会将元素转换为块元素\n * 静态定位（static）   \n  除了static之外的，元素定义了position之后，top、bottom、left、right才生效\n\n3. z-index属性  \n默认情况下处于不激活状态，设置了无效。只有定义了position为relative、absolute、fixed时才会被激活  \nz-index值越大的，会展现在越上层  \n  ","slug":"7-布局和性能优化","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyx000kb01tgl1n5s3t","content":"<ol>\n<li><p>深入定位<br>CSS两大定位方式：浮动和定位。  </p>\n<ul>\n<li>浮动布局比较灵活，但不容易控制</li>\n<li>定位布局虽然缺乏灵活性，但可以精准的定页面中元素的位置</li>\n</ul>\n</li>\n<li><p>定位布局的四种方式：  </p>\n<ul>\n<li>固定定位（fixed）</li>\n<li>相对定位（ralative）</li>\n<li>绝对定位（absolute）  #会将元素转换为块元素</li>\n<li>静态定位（static）<br>除了static之外的，元素定义了position之后，top、bottom、left、right才生效</li>\n</ul>\n</li>\n<li><p>z-index属性<br>默认情况下处于不激活状态，设置了无效。只有定义了position为relative、absolute、fixed时才会被激活<br>z-index值越大的，会展现在越上层  </p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>深入定位<br>CSS两大定位方式：浮动和定位。  </p>\n<ul>\n<li>浮动布局比较灵活，但不容易控制</li>\n<li>定位布局虽然缺乏灵活性，但可以精准的定页面中元素的位置</li>\n</ul>\n</li>\n<li><p>定位布局的四种方式：  </p>\n<ul>\n<li>固定定位（fixed）</li>\n<li>相对定位（ralative）</li>\n<li>绝对定位（absolute）  #会将元素转换为块元素</li>\n<li>静态定位（static）<br>除了static之外的，元素定义了position之后，top、bottom、left、right才生效</li>\n</ul>\n</li>\n<li><p>z-index属性<br>默认情况下处于不激活状态，设置了无效。只有定义了position为relative、absolute、fixed时才会被激活<br>z-index值越大的，会展现在越上层  </p>\n</li>\n</ol>\n"},{"title":"Android手机调试","date":"2017-10-12T12:50:40.000Z","_content":"\n1. 查看adb安装版本   \n adb version\n \n2. 查看设备是否连接  \n adb devices\n \n3. 查看日志  \n adb logcat | grep \"cocos2d-x\"\n\n\n安装ADB参考文档：  \nhttp://www.jianshu.com/p/1b3fb1f27b67\n","source":"_posts/Android手机调试.md","raw":"---\ntitle: Android手机调试\ndate: 2017-10-12 20:50:40\ntags: [工具, 游戏]\n---\n\n1. 查看adb安装版本   \n adb version\n \n2. 查看设备是否连接  \n adb devices\n \n3. 查看日志  \n adb logcat | grep \"cocos2d-x\"\n\n\n安装ADB参考文档：  \nhttp://www.jianshu.com/p/1b3fb1f27b67\n","slug":"Android手机调试","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyy000nb01t0iitbtco","content":"<ol>\n<li><p>查看adb安装版本<br>adb version</p>\n</li>\n<li><p>查看设备是否连接<br>adb devices</p>\n</li>\n<li><p>查看日志<br>adb logcat | grep “cocos2d-x”</p>\n</li>\n</ol>\n<p>安装ADB参考文档：<br><a href=\"http://www.jianshu.com/p/1b3fb1f27b67\">http://www.jianshu.com/p/1b3fb1f27b67</a></p>\n","excerpt":"","more":"<ol>\n<li><p>查看adb安装版本<br>adb version</p>\n</li>\n<li><p>查看设备是否连接<br>adb devices</p>\n</li>\n<li><p>查看日志<br>adb logcat | grep “cocos2d-x”</p>\n</li>\n</ol>\n<p>安装ADB参考文档：<br><a href=\"http://www.jianshu.com/p/1b3fb1f27b67\">http://www.jianshu.com/p/1b3fb1f27b67</a></p>\n"},{"title":"Cocos2d-JS开发","date":"2017-08-29T12:19:00.000Z","_content":"\n1. cocos2d-js中数据持久化：  \n\t* localStorage: 没有时间限制的数据持久化。（键值对）\n\t* sessionStorage: 针对一个web会话的数据持久化。  \n\tcocos2d-js不支持cocos2d-x中的属性列表和sqlite数据库。\n\n2. HTTP 与 HTTPS\n\tInternet的基本协议是TCP/IP。    \n\tHTTP超文本传输协议，是无连接协议，每一次请求时建立连接，服务器处理完客户端的请求后，应答给客户端，然后断开连接，不会一直占用网络资源。  \n\tHTTPS安全超文本传输协议，是超文本传输协议和SSL组合，提供加密通信及网络服务器身份的鉴定。  \n\n3. GET和POST  \n\tGET是向指定的资源发出请求，送的信息显示在URL后面，GET方法应该只用在读取数据(如静态图片等数据)。（GET方法就像使用明信片给别人写信，接触到的人都可以看到，因此不安全）  \n\tPOST是向指定资源提交数据，请求服务器进行处理。例如：提交表单或者上传文件等。数据被包含在请求体中。（POST方法像把“信内容”装到信封中给别人写信，接触到的人都看不到，因此安全）","source":"_posts/Cocos2d-JS开发.md","raw":"---\ntitle: Cocos2d-JS开发\ndate: 2017-08-29 20:19:00\ntags: 游戏\n---\n\n1. cocos2d-js中数据持久化：  \n\t* localStorage: 没有时间限制的数据持久化。（键值对）\n\t* sessionStorage: 针对一个web会话的数据持久化。  \n\tcocos2d-js不支持cocos2d-x中的属性列表和sqlite数据库。\n\n2. HTTP 与 HTTPS\n\tInternet的基本协议是TCP/IP。    \n\tHTTP超文本传输协议，是无连接协议，每一次请求时建立连接，服务器处理完客户端的请求后，应答给客户端，然后断开连接，不会一直占用网络资源。  \n\tHTTPS安全超文本传输协议，是超文本传输协议和SSL组合，提供加密通信及网络服务器身份的鉴定。  \n\n3. GET和POST  \n\tGET是向指定的资源发出请求，送的信息显示在URL后面，GET方法应该只用在读取数据(如静态图片等数据)。（GET方法就像使用明信片给别人写信，接触到的人都可以看到，因此不安全）  \n\tPOST是向指定资源提交数据，请求服务器进行处理。例如：提交表单或者上传文件等。数据被包含在请求体中。（POST方法像把“信内容”装到信封中给别人写信，接触到的人都看不到，因此安全）","slug":"Cocos2d-JS开发","published":1,"updated":"2025-03-10T10:51:32.319Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyz000pb01td0fk23o9","content":"<ol>\n<li><p>cocos2d-js中数据持久化：  </p>\n<ul>\n<li>localStorage: 没有时间限制的数据持久化。（键值对）</li>\n<li>sessionStorage: 针对一个web会话的数据持久化。<br>cocos2d-js不支持cocos2d-x中的属性列表和sqlite数据库。</li>\n</ul>\n</li>\n<li><p>HTTP 与 HTTPS<br> Internet的基本协议是TCP/IP。<br> HTTP超文本传输协议，是无连接协议，每一次请求时建立连接，服务器处理完客户端的请求后，应答给客户端，然后断开连接，不会一直占用网络资源。<br> HTTPS安全超文本传输协议，是超文本传输协议和SSL组合，提供加密通信及网络服务器身份的鉴定。  </p>\n</li>\n<li><p>GET和POST<br> GET是向指定的资源发出请求，送的信息显示在URL后面，GET方法应该只用在读取数据(如静态图片等数据)。（GET方法就像使用明信片给别人写信，接触到的人都可以看到，因此不安全）<br> POST是向指定资源提交数据，请求服务器进行处理。例如：提交表单或者上传文件等。数据被包含在请求体中。（POST方法像把“信内容”装到信封中给别人写信，接触到的人都看不到，因此安全）</p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>cocos2d-js中数据持久化：  </p>\n<ul>\n<li>localStorage: 没有时间限制的数据持久化。（键值对）</li>\n<li>sessionStorage: 针对一个web会话的数据持久化。<br>cocos2d-js不支持cocos2d-x中的属性列表和sqlite数据库。</li>\n</ul>\n</li>\n<li><p>HTTP 与 HTTPS<br> Internet的基本协议是TCP/IP。<br> HTTP超文本传输协议，是无连接协议，每一次请求时建立连接，服务器处理完客户端的请求后，应答给客户端，然后断开连接，不会一直占用网络资源。<br> HTTPS安全超文本传输协议，是超文本传输协议和SSL组合，提供加密通信及网络服务器身份的鉴定。  </p>\n</li>\n<li><p>GET和POST<br> GET是向指定的资源发出请求，送的信息显示在URL后面，GET方法应该只用在读取数据(如静态图片等数据)。（GET方法就像使用明信片给别人写信，接触到的人都可以看到，因此不安全）<br> POST是向指定资源提交数据，请求服务器进行处理。例如：提交表单或者上传文件等。数据被包含在请求体中。（POST方法像把“信内容”装到信封中给别人写信，接触到的人都看不到，因此安全）</p>\n</li>\n</ol>\n"},{"title":"Cocos2d-x基础","date":"2017-07-11T10:48:19.000Z","_content":"基础：一个游戏可以有多个场景，每个场景可以包含多个不同的层，每层可拥有任意个游戏节点（常见的是精灵，但也可以是层、菜单和文本等）。  \n  \n继承关系：cc.Class<--cc.Node<--cc.NodeRGBA<--cc.Sprite  \n（与Java中的Object一样，所有类都要直接或间接继承自Class） \n\n=== 严格等于：不仅值要相等，类型也要相等  \n!== 非严格等于，与===恰恰相反  \n\n导演：cc.Director用于管理场景，采用单例模式，整个过程中只有一个实例对象。   \n场景类：cc.Class<--cc.Node<--cc.Scene<--cc.TransitionScene  \n层：cc.Class<--cc.Node<--cc.Layer<--cc.LayerColor<--cc.LayerGrandient\ncc.LabelTTF是最简单的标签类：cc.Class<--cc.Node<--cc.NodeRGBA<--cc.Sprite<--cc.LabelTTF  \n\n引用框架常用赋值写法： var chess = chess || {}; (假如chess已经被定义，就用原来的值，chess未被定义，就赋值{})\n\n精灵的性能优化  \n* 使用纹理图集  \n* 使用精灵帧缓存  \n>纹理缓存（TextureCache）\n>精灵帧缓存（SpriteFrameCache）\n\n场景与层：  \n通过导演类cc.director切换场景:   \n* runScene(scene): 运行场景，只能在启动第一个场景时调用该函数。如果已经有一个场景运行则不能调用该函数。  \n* pushScene(scene): 切换到下一个场景，将当前场景挂起放入到场景堆栈中，然后切换到下一个场景中。（不释放和销毁场景，原来的场景状态可以保持，但是不能同时有太多的场景对象运行cc.director.pushScene(new SettingScene());）  \n* popScene()：与pushScene配合使用，可以回到根场景。(cc.director.popScene();)   \n* popToRootScene(): 与pushScene配合使用，可以回到根场景。  \n\n设计分辨率设置：cc.view.setDesignResolutionSize(640,960,cc.ResolutionPolicy.NO_BORDER);  //640和960是设计分辨率宽高，背景图片是640*960","source":"_posts/Cocos2d-x基础.md","raw":"---\ntitle: Cocos2d-x基础\ndate: 2017-07-11 18:48:19\ntags: 游戏\n---\n基础：一个游戏可以有多个场景，每个场景可以包含多个不同的层，每层可拥有任意个游戏节点（常见的是精灵，但也可以是层、菜单和文本等）。  \n  \n继承关系：cc.Class<--cc.Node<--cc.NodeRGBA<--cc.Sprite  \n（与Java中的Object一样，所有类都要直接或间接继承自Class） \n\n=== 严格等于：不仅值要相等，类型也要相等  \n!== 非严格等于，与===恰恰相反  \n\n导演：cc.Director用于管理场景，采用单例模式，整个过程中只有一个实例对象。   \n场景类：cc.Class<--cc.Node<--cc.Scene<--cc.TransitionScene  \n层：cc.Class<--cc.Node<--cc.Layer<--cc.LayerColor<--cc.LayerGrandient\ncc.LabelTTF是最简单的标签类：cc.Class<--cc.Node<--cc.NodeRGBA<--cc.Sprite<--cc.LabelTTF  \n\n引用框架常用赋值写法： var chess = chess || {}; (假如chess已经被定义，就用原来的值，chess未被定义，就赋值{})\n\n精灵的性能优化  \n* 使用纹理图集  \n* 使用精灵帧缓存  \n>纹理缓存（TextureCache）\n>精灵帧缓存（SpriteFrameCache）\n\n场景与层：  \n通过导演类cc.director切换场景:   \n* runScene(scene): 运行场景，只能在启动第一个场景时调用该函数。如果已经有一个场景运行则不能调用该函数。  \n* pushScene(scene): 切换到下一个场景，将当前场景挂起放入到场景堆栈中，然后切换到下一个场景中。（不释放和销毁场景，原来的场景状态可以保持，但是不能同时有太多的场景对象运行cc.director.pushScene(new SettingScene());）  \n* popScene()：与pushScene配合使用，可以回到根场景。(cc.director.popScene();)   \n* popToRootScene(): 与pushScene配合使用，可以回到根场景。  \n\n设计分辨率设置：cc.view.setDesignResolutionSize(640,960,cc.ResolutionPolicy.NO_BORDER);  //640和960是设计分辨率宽高，背景图片是640*960","slug":"Cocos2d-x基础","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyz000sb01tawc86y8k","content":"<p>基础：一个游戏可以有多个场景，每个场景可以包含多个不同的层，每层可拥有任意个游戏节点（常见的是精灵，但也可以是层、菜单和文本等）。  </p>\n<p>继承关系：cc.Class&lt;–cc.Node&lt;–cc.NodeRGBA&lt;–cc.Sprite<br>（与Java中的Object一样，所有类都要直接或间接继承自Class） </p>\n<p>=== 严格等于：不仅值要相等，类型也要相等<br>!== 非严格等于，与===恰恰相反  </p>\n<p>导演：cc.Director用于管理场景，采用单例模式，整个过程中只有一个实例对象。<br>场景类：cc.Class&lt;–cc.Node&lt;–cc.Scene&lt;–cc.TransitionScene<br>层：cc.Class&lt;–cc.Node&lt;–cc.Layer&lt;–cc.LayerColor&lt;–cc.LayerGrandient<br>cc.LabelTTF是最简单的标签类：cc.Class&lt;–cc.Node&lt;–cc.NodeRGBA&lt;–cc.Sprite&lt;–cc.LabelTTF  </p>\n<p>引用框架常用赋值写法： var chess = chess || {}; (假如chess已经被定义，就用原来的值，chess未被定义，就赋值{})</p>\n<p>精灵的性能优化  </p>\n<ul>\n<li>使用纹理图集  </li>\n<li>使用精灵帧缓存  <blockquote>\n<p>纹理缓存（TextureCache）<br>精灵帧缓存（SpriteFrameCache）</p>\n</blockquote>\n</li>\n</ul>\n<p>场景与层：<br>通过导演类cc.director切换场景:   </p>\n<ul>\n<li>runScene(scene): 运行场景，只能在启动第一个场景时调用该函数。如果已经有一个场景运行则不能调用该函数。  </li>\n<li>pushScene(scene): 切换到下一个场景，将当前场景挂起放入到场景堆栈中，然后切换到下一个场景中。（不释放和销毁场景，原来的场景状态可以保持，但是不能同时有太多的场景对象运行cc.director.pushScene(new SettingScene());）  </li>\n<li>popScene()：与pushScene配合使用，可以回到根场景。(cc.director.popScene();)   </li>\n<li>popToRootScene(): 与pushScene配合使用，可以回到根场景。  </li>\n</ul>\n<p>设计分辨率设置：cc.view.setDesignResolutionSize(640,960,cc.ResolutionPolicy.NO_BORDER);  //640和960是设计分辨率宽高，背景图片是640*960</p>\n","excerpt":"","more":"<p>基础：一个游戏可以有多个场景，每个场景可以包含多个不同的层，每层可拥有任意个游戏节点（常见的是精灵，但也可以是层、菜单和文本等）。  </p>\n<p>继承关系：cc.Class&lt;–cc.Node&lt;–cc.NodeRGBA&lt;–cc.Sprite<br>（与Java中的Object一样，所有类都要直接或间接继承自Class） </p>\n<p>=== 严格等于：不仅值要相等，类型也要相等<br>!== 非严格等于，与===恰恰相反  </p>\n<p>导演：cc.Director用于管理场景，采用单例模式，整个过程中只有一个实例对象。<br>场景类：cc.Class&lt;–cc.Node&lt;–cc.Scene&lt;–cc.TransitionScene<br>层：cc.Class&lt;–cc.Node&lt;–cc.Layer&lt;–cc.LayerColor&lt;–cc.LayerGrandient<br>cc.LabelTTF是最简单的标签类：cc.Class&lt;–cc.Node&lt;–cc.NodeRGBA&lt;–cc.Sprite&lt;–cc.LabelTTF  </p>\n<p>引用框架常用赋值写法： var chess = chess || {}; (假如chess已经被定义，就用原来的值，chess未被定义，就赋值{})</p>\n<p>精灵的性能优化  </p>\n<ul>\n<li>使用纹理图集  </li>\n<li>使用精灵帧缓存  <blockquote>\n<p>纹理缓存（TextureCache）<br>精灵帧缓存（SpriteFrameCache）</p>\n</blockquote>\n</li>\n</ul>\n<p>场景与层：<br>通过导演类cc.director切换场景:   </p>\n<ul>\n<li>runScene(scene): 运行场景，只能在启动第一个场景时调用该函数。如果已经有一个场景运行则不能调用该函数。  </li>\n<li>pushScene(scene): 切换到下一个场景，将当前场景挂起放入到场景堆栈中，然后切换到下一个场景中。（不释放和销毁场景，原来的场景状态可以保持，但是不能同时有太多的场景对象运行cc.director.pushScene(new SettingScene());）  </li>\n<li>popScene()：与pushScene配合使用，可以回到根场景。(cc.director.popScene();)   </li>\n<li>popToRootScene(): 与pushScene配合使用，可以回到根场景。  </li>\n</ul>\n<p>设计分辨率设置：cc.view.setDesignResolutionSize(640,960,cc.ResolutionPolicy.NO_BORDER);  //640和960是设计分辨率宽高，背景图片是640*960</p>\n"},{"title":"Django学习","date":"2017-06-07T07:34:28.000Z","_content":"\n学习参考教程：\nhttp://djangobook.py3k.cn/\n\n1. Django MVC设计模式 \n总体的设计：\n * models.py  \\#模型：用这个类，可以通过简单的python代码来操作数据库，无需写每个操作都写一条SQL语句。\n * view.py  \\#视图：写后端业务逻辑\n * urls.py  \\#URL和视图的对应关系\n * \\*\\*.html  \\#html模板，写前端页面设计\n\n2. 使用Django的条件  \n使用Django的唯一先决条件是安装python。  \n\n3. 数据库  \nDjango 并不是非得要数据库才可以运行。如果只用它提供一些不涉及数据库的动态页面服务，也同样可以完美运行。   \nDJango的亮点之一--基于数据库的网站开发，必须安装某种类型的数据库来存储数据。\n\n4. 创建一个项目  \n * django-admin.py startproject myMenu  （myMenu 是项目名）\n * 创建app python manage.py startapp selectFood (selectFood是app名)\n * 校验模型的有效性：python manage.py validate\n\n5. 启动服务器命令：  \npython manage.py runserver #默认端口8000  \npython manage.py runserver 8080  #启动并修改服务器端口  \npython manage.py runserver 0.0.0.0:8080  #改变服务器监听的IP地址，让Django监听所有网络接口，其他电脑也可以连接到开发服务器了。\\(要和其他开发人员共享同一开发站点的话，该功能特别有用\\)\n\n6. 修改时区  \nDjango 包含一个默认为 America/Chicago 的 TIME_ZONE 设置，可以在 settings.py 文件中修改成你想要的时区。  \n例如：TIME_ZONE = 'Asia/Shanghai'\n\n7. python后端传值到html页面\n> 用两个大括号括起来的文字\\(例如 \\{ \\{ person_name \\} \\} \\)是变量\\(variable\\)  \n> 被大括号和百分号包围的文本(例如 \\{ % if ordered_warranty % \\} \\)是 模板标签\\(template tag\\)  \\(例如：if，for等\\)\n\n8. 当模板系统在变量名中遇到点时，按照以下顺序尝试进行查找：  \n * 字典查找 \\(比如 foo[\"bar\"] \\)\n * 属性查找 \\(比如 foo.bar \\)\n * 方法调用 \\(比如 foo.bar() \\)\n * 列表类型索引查找 \\(比如 foo[bar] \\)\n\n9. sql操作：  \n 9.1 数据过滤，使用 filter() 方法：   \n > Food.objects.filter(name=\"bread\", type=\"1\")   \n > filter()根据关键字参数来转换成SQL语句,相当于这样：   \n > select * from food where name=\"bread\" and type=\"1\"\n \n > Food.objects.filter(name__contains=\"bre\")   \n > 转换成SQL语句,相当于这样：   \n > select * from food where name LIKE \"bre\"\n \n 获取单个对象(只能是单个)\n > Food.objects.get(id=1)  \n \n 排序\n > Food.objects.order_by(\"name\")\n ","source":"_posts/Django学习.md","raw":"---\ntitle: Django学习\ndate: 2017-06-07 15:34:28\ntags: [框架]\n---\n\n学习参考教程：\nhttp://djangobook.py3k.cn/\n\n1. Django MVC设计模式 \n总体的设计：\n * models.py  \\#模型：用这个类，可以通过简单的python代码来操作数据库，无需写每个操作都写一条SQL语句。\n * view.py  \\#视图：写后端业务逻辑\n * urls.py  \\#URL和视图的对应关系\n * \\*\\*.html  \\#html模板，写前端页面设计\n\n2. 使用Django的条件  \n使用Django的唯一先决条件是安装python。  \n\n3. 数据库  \nDjango 并不是非得要数据库才可以运行。如果只用它提供一些不涉及数据库的动态页面服务，也同样可以完美运行。   \nDJango的亮点之一--基于数据库的网站开发，必须安装某种类型的数据库来存储数据。\n\n4. 创建一个项目  \n * django-admin.py startproject myMenu  （myMenu 是项目名）\n * 创建app python manage.py startapp selectFood (selectFood是app名)\n * 校验模型的有效性：python manage.py validate\n\n5. 启动服务器命令：  \npython manage.py runserver #默认端口8000  \npython manage.py runserver 8080  #启动并修改服务器端口  \npython manage.py runserver 0.0.0.0:8080  #改变服务器监听的IP地址，让Django监听所有网络接口，其他电脑也可以连接到开发服务器了。\\(要和其他开发人员共享同一开发站点的话，该功能特别有用\\)\n\n6. 修改时区  \nDjango 包含一个默认为 America/Chicago 的 TIME_ZONE 设置，可以在 settings.py 文件中修改成你想要的时区。  \n例如：TIME_ZONE = 'Asia/Shanghai'\n\n7. python后端传值到html页面\n> 用两个大括号括起来的文字\\(例如 \\{ \\{ person_name \\} \\} \\)是变量\\(variable\\)  \n> 被大括号和百分号包围的文本(例如 \\{ % if ordered_warranty % \\} \\)是 模板标签\\(template tag\\)  \\(例如：if，for等\\)\n\n8. 当模板系统在变量名中遇到点时，按照以下顺序尝试进行查找：  \n * 字典查找 \\(比如 foo[\"bar\"] \\)\n * 属性查找 \\(比如 foo.bar \\)\n * 方法调用 \\(比如 foo.bar() \\)\n * 列表类型索引查找 \\(比如 foo[bar] \\)\n\n9. sql操作：  \n 9.1 数据过滤，使用 filter() 方法：   \n > Food.objects.filter(name=\"bread\", type=\"1\")   \n > filter()根据关键字参数来转换成SQL语句,相当于这样：   \n > select * from food where name=\"bread\" and type=\"1\"\n \n > Food.objects.filter(name__contains=\"bre\")   \n > 转换成SQL语句,相当于这样：   \n > select * from food where name LIKE \"bre\"\n \n 获取单个对象(只能是单个)\n > Food.objects.get(id=1)  \n \n 排序\n > Food.objects.order_by(\"name\")\n ","slug":"Django学习","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piyz000ub01t4wwqct62","content":"<p>学习参考教程：<br><a href=\"http://djangobook.py3k.cn/\">http://djangobook.py3k.cn/</a></p>\n<ol>\n<li><p>Django MVC设计模式<br>总体的设计：</p>\n<ul>\n<li>models.py  #模型：用这个类，可以通过简单的python代码来操作数据库，无需写每个操作都写一条SQL语句。</li>\n<li>view.py  #视图：写后端业务逻辑</li>\n<li>urls.py  #URL和视图的对应关系</li>\n<li>**.html  #html模板，写前端页面设计</li>\n</ul>\n</li>\n<li><p>使用Django的条件<br>使用Django的唯一先决条件是安装python。  </p>\n</li>\n<li><p>数据库<br>Django 并不是非得要数据库才可以运行。如果只用它提供一些不涉及数据库的动态页面服务，也同样可以完美运行。<br>DJango的亮点之一–基于数据库的网站开发，必须安装某种类型的数据库来存储数据。</p>\n</li>\n<li><p>创建一个项目  </p>\n<ul>\n<li>django-admin.py startproject myMenu  （myMenu 是项目名）</li>\n<li>创建app python manage.py startapp selectFood (selectFood是app名)</li>\n<li>校验模型的有效性：python manage.py validate</li>\n</ul>\n</li>\n<li><p>启动服务器命令：<br>python manage.py runserver #默认端口8000<br>python manage.py runserver 8080  #启动并修改服务器端口<br>python manage.py runserver 0.0.0.0:8080  #改变服务器监听的IP地址，让Django监听所有网络接口，其他电脑也可以连接到开发服务器了。(要和其他开发人员共享同一开发站点的话，该功能特别有用)</p>\n</li>\n<li><p>修改时区<br>Django 包含一个默认为 America/Chicago 的 TIME_ZONE 设置，可以在 settings.py 文件中修改成你想要的时区。<br>例如：TIME_ZONE = ‘Asia/Shanghai’</p>\n</li>\n<li><p>python后端传值到html页面</p>\n<blockquote>\n<p>用两个大括号括起来的文字(例如 { { person_name } } )是变量(variable)<br>被大括号和百分号包围的文本(例如 { % if ordered_warranty % } )是 模板标签(template tag)  (例如：if，for等)</p>\n</blockquote>\n</li>\n<li><p>当模板系统在变量名中遇到点时，按照以下顺序尝试进行查找：  </p>\n<ul>\n<li>字典查找 (比如 foo[“bar”] )</li>\n<li>属性查找 (比如 foo.bar )</li>\n<li>方法调用 (比如 foo.bar() )</li>\n<li>列表类型索引查找 (比如 foo[bar] )</li>\n</ul>\n</li>\n<li><p>sql操作：<br>9.1 数据过滤，使用 filter() 方法：   </p>\n<blockquote>\n<p>Food.objects.filter(name=”bread”, type=”1”)<br>filter()根据关键字参数来转换成SQL语句,相当于这样：<br>select * from food where name=”bread” and type=”1”</p>\n</blockquote>\n<blockquote>\n<p>Food.objects.filter(name__contains=”bre”)<br>转换成SQL语句,相当于这样：<br>select * from food where name LIKE “bre”</p>\n</blockquote>\n<p>获取单个对象(只能是单个)</p>\n<blockquote>\n<p>Food.objects.get(id=1)  </p>\n</blockquote>\n<p>排序</p>\n<blockquote>\n<p>Food.objects.order_by(“name”)</p>\n</blockquote>\n</li>\n</ol>\n","excerpt":"","more":"<p>学习参考教程：<br><a href=\"http://djangobook.py3k.cn/\">http://djangobook.py3k.cn/</a></p>\n<ol>\n<li><p>Django MVC设计模式<br>总体的设计：</p>\n<ul>\n<li>models.py  #模型：用这个类，可以通过简单的python代码来操作数据库，无需写每个操作都写一条SQL语句。</li>\n<li>view.py  #视图：写后端业务逻辑</li>\n<li>urls.py  #URL和视图的对应关系</li>\n<li>**.html  #html模板，写前端页面设计</li>\n</ul>\n</li>\n<li><p>使用Django的条件<br>使用Django的唯一先决条件是安装python。  </p>\n</li>\n<li><p>数据库<br>Django 并不是非得要数据库才可以运行。如果只用它提供一些不涉及数据库的动态页面服务，也同样可以完美运行。<br>DJango的亮点之一–基于数据库的网站开发，必须安装某种类型的数据库来存储数据。</p>\n</li>\n<li><p>创建一个项目  </p>\n<ul>\n<li>django-admin.py startproject myMenu  （myMenu 是项目名）</li>\n<li>创建app python manage.py startapp selectFood (selectFood是app名)</li>\n<li>校验模型的有效性：python manage.py validate</li>\n</ul>\n</li>\n<li><p>启动服务器命令：<br>python manage.py runserver #默认端口8000<br>python manage.py runserver 8080  #启动并修改服务器端口<br>python manage.py runserver 0.0.0.0:8080  #改变服务器监听的IP地址，让Django监听所有网络接口，其他电脑也可以连接到开发服务器了。(要和其他开发人员共享同一开发站点的话，该功能特别有用)</p>\n</li>\n<li><p>修改时区<br>Django 包含一个默认为 America/Chicago 的 TIME_ZONE 设置，可以在 settings.py 文件中修改成你想要的时区。<br>例如：TIME_ZONE = ‘Asia/Shanghai’</p>\n</li>\n<li><p>python后端传值到html页面</p>\n<blockquote>\n<p>用两个大括号括起来的文字(例如 { { person_name } } )是变量(variable)<br>被大括号和百分号包围的文本(例如 { % if ordered_warranty % } )是 模板标签(template tag)  (例如：if，for等)</p>\n</blockquote>\n</li>\n<li><p>当模板系统在变量名中遇到点时，按照以下顺序尝试进行查找：  </p>\n<ul>\n<li>字典查找 (比如 foo[“bar”] )</li>\n<li>属性查找 (比如 foo.bar )</li>\n<li>方法调用 (比如 foo.bar() )</li>\n<li>列表类型索引查找 (比如 foo[bar] )</li>\n</ul>\n</li>\n<li><p>sql操作：<br>9.1 数据过滤，使用 filter() 方法：   </p>\n<blockquote>\n<p>Food.objects.filter(name=”bread”, type=”1”)<br>filter()根据关键字参数来转换成SQL语句,相当于这样：<br>select * from food where name=”bread” and type=”1”</p>\n</blockquote>\n<blockquote>\n<p>Food.objects.filter(name__contains=”bre”)<br>转换成SQL语句,相当于这样：<br>select * from food where name LIKE “bre”</p>\n</blockquote>\n<p>获取单个对象(只能是单个)</p>\n<blockquote>\n<p>Food.objects.get(id=1)  </p>\n</blockquote>\n<p>排序</p>\n<blockquote>\n<p>Food.objects.order_by(“name”)</p>\n</blockquote>\n</li>\n</ol>\n"},{"title":"css和js放在head标签中还是body中","date":"2017-09-19T12:45:24.000Z","_content":"\n**在HTML body中的JavaScript会在<font color=red>页面加载的时候</font>执行**  \n**在HTML head中的JavaScript会在<font color=red>被调用的时候</font>才执行**   \n**<font color=red>建议：css在head中引入，js在body尾部引入（这样有利于提升页面的性能，加载速度更快）</font>**  \n**加载顺序：放在head中，页面加载前就加载js了。放在body中，页面加载后才加载js，所以head里面的先加载优先级高**\n\n---\njavascript应该放在哪里？  \n页面中的JavaScript会在浏览器加载页面的时候立即被执行，通常被用来生成页面的内容。写法如下：     \n> < html >  \n> < head >  \n> < /head >  \n> < body >  \n> < script type=\"text/javascript\" \\>  \n> ...  \n> < script >  \n> < /body >  \n> < /html >\n\nJavaScript放在head中，可以保证脚本在任何调用之前被加载，通常写需调用才执行的脚本或事件触发执行的脚本。写法如下：  \n> < html >  \n> < head >  \n> < script type=\"text/javascript\" >  \n> ...    \n> < script >   \n> </head >   \n> </html >\n\nhead中和bosy中可同时放无数的脚本  \n外部js，使用“src”属性指向相应的js文件。写法如下：  \n> < html >  \n> < head >  \n> < script src=\"xx.js\" >  \n> ...    \n> < script >   \n> < /head >   \n> < /html >\n\n参考：\nhttp://www.cnblogs.com/ddyq/archive/2012/03/06/2382816.html  \nhttp://www.imooc.com/qadetail/76717  ","source":"_posts/css和js放在head标签中还是body中.md","raw":"---\ntitle: css和js放在head标签中还是body中\ndate: 2017-09-19 20:45:24\ntags: javascript\n---\n\n**在HTML body中的JavaScript会在<font color=red>页面加载的时候</font>执行**  \n**在HTML head中的JavaScript会在<font color=red>被调用的时候</font>才执行**   \n**<font color=red>建议：css在head中引入，js在body尾部引入（这样有利于提升页面的性能，加载速度更快）</font>**  \n**加载顺序：放在head中，页面加载前就加载js了。放在body中，页面加载后才加载js，所以head里面的先加载优先级高**\n\n---\njavascript应该放在哪里？  \n页面中的JavaScript会在浏览器加载页面的时候立即被执行，通常被用来生成页面的内容。写法如下：     \n> < html >  \n> < head >  \n> < /head >  \n> < body >  \n> < script type=\"text/javascript\" \\>  \n> ...  \n> < script >  \n> < /body >  \n> < /html >\n\nJavaScript放在head中，可以保证脚本在任何调用之前被加载，通常写需调用才执行的脚本或事件触发执行的脚本。写法如下：  \n> < html >  \n> < head >  \n> < script type=\"text/javascript\" >  \n> ...    \n> < script >   \n> </head >   \n> </html >\n\nhead中和bosy中可同时放无数的脚本  \n外部js，使用“src”属性指向相应的js文件。写法如下：  \n> < html >  \n> < head >  \n> < script src=\"xx.js\" >  \n> ...    \n> < script >   \n> < /head >   \n> < /html >\n\n参考：\nhttp://www.cnblogs.com/ddyq/archive/2012/03/06/2382816.html  \nhttp://www.imooc.com/qadetail/76717  ","slug":"css和js放在head标签中还是body中","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz0000wb01t2tp5g39h","content":"<p><strong>在HTML body中的JavaScript会在<font color=red>页面加载的时候</font>执行</strong><br><strong>在HTML head中的JavaScript会在<font color=red>被调用的时候</font>才执行</strong><br><strong><font color=red>建议：css在head中引入，js在body尾部引入（这样有利于提升页面的性能，加载速度更快）</font></strong><br><strong>加载顺序：放在head中，页面加载前就加载js了。放在body中，页面加载后才加载js，所以head里面的先加载优先级高</strong></p>\n<hr>\n<p>javascript应该放在哪里？<br>页面中的JavaScript会在浏览器加载页面的时候立即被执行，通常被用来生成页面的内容。写法如下：     </p>\n<blockquote>\n<p>&lt; html &gt;<br>&lt; head &gt;<br>&lt; /head &gt;<br>&lt; body &gt;<br>&lt; script type=”text/javascript” ><br>…<br>&lt; script &gt;<br>&lt; /body &gt;<br>&lt; /html &gt;</p>\n</blockquote>\n<p>JavaScript放在head中，可以保证脚本在任何调用之前被加载，通常写需调用才执行的脚本或事件触发执行的脚本。写法如下：  </p>\n<blockquote>\n<p>&lt; html &gt;<br>&lt; head &gt;<br>&lt; script type=”text/javascript” &gt;<br>…<br>&lt; script &gt;<br></head ><br></html ></p>\n</blockquote>\n<p>head中和bosy中可同时放无数的脚本<br>外部js，使用“src”属性指向相应的js文件。写法如下：  </p>\n<blockquote>\n<p>&lt; html &gt;<br>&lt; head &gt;<br>&lt; script src=”xx.js” &gt;<br>…<br>&lt; script &gt;<br>&lt; /head &gt;<br>&lt; /html &gt;</p>\n</blockquote>\n<p>参考：<br><a href=\"http://www.cnblogs.com/ddyq/archive/2012/03/06/2382816.html\">http://www.cnblogs.com/ddyq/archive/2012/03/06/2382816.html</a><br><a href=\"http://www.imooc.com/qadetail/76717\">http://www.imooc.com/qadetail/76717</a>  </p>\n","excerpt":"","more":"<p><strong>在HTML body中的JavaScript会在<font color=red>页面加载的时候</font>执行</strong><br><strong>在HTML head中的JavaScript会在<font color=red>被调用的时候</font>才执行</strong><br><strong><font color=red>建议：css在head中引入，js在body尾部引入（这样有利于提升页面的性能，加载速度更快）</font></strong><br><strong>加载顺序：放在head中，页面加载前就加载js了。放在body中，页面加载后才加载js，所以head里面的先加载优先级高</strong></p>\n<hr>\n<p>javascript应该放在哪里？<br>页面中的JavaScript会在浏览器加载页面的时候立即被执行，通常被用来生成页面的内容。写法如下：     </p>\n<blockquote>\n<p>&lt; html &gt;<br>&lt; head &gt;<br>&lt; /head &gt;<br>&lt; body &gt;<br>&lt; script type=”text/javascript” ><br>…<br>&lt; script &gt;<br>&lt; /body &gt;<br>&lt; /html &gt;</p>\n</blockquote>\n<p>JavaScript放在head中，可以保证脚本在任何调用之前被加载，通常写需调用才执行的脚本或事件触发执行的脚本。写法如下：  </p>\n<blockquote>\n<p>&lt; html &gt;<br>&lt; head &gt;<br>&lt; script type=”text/javascript” &gt;<br>…<br>&lt; script &gt;<br></head ><br></html ></p>\n</blockquote>\n<p>head中和bosy中可同时放无数的脚本<br>外部js，使用“src”属性指向相应的js文件。写法如下：  </p>\n<blockquote>\n<p>&lt; html &gt;<br>&lt; head &gt;<br>&lt; script src=”xx.js” &gt;<br>…<br>&lt; script &gt;<br>&lt; /head &gt;<br>&lt; /html &gt;</p>\n</blockquote>\n<p>参考：<br><a href=\"http://www.cnblogs.com/ddyq/archive/2012/03/06/2382816.html\">http://www.cnblogs.com/ddyq/archive/2012/03/06/2382816.html</a><br><a href=\"http://www.imooc.com/qadetail/76717\">http://www.imooc.com/qadetail/76717</a>  </p>\n"},{"title":"git命令行","date":"2017-06-02T09:25:55.000Z","_content":"\n1. git clone\n拉一个分支到当前目录\ngit clone https://github.com/cocosgirl/diana.git\n\n2. git add . \n把我们要提交的文件的信息添加到索引库中  \n例如：git add html_1_chapter.md\n\n3. git commit   \ngit将依据索引库中的内容来进行文件的提交  \n例如：git commit html_1_chapter.md -m \"测试本地提交\"  \n本地删除文件提交：  \ngit commit -a -m \"删除不要的文件\"\n\n4. git push  \n提交完以后发布  \n发布到分支：  \n例如：git push -u https://github.com/cocosgirl/cocosgirl.github.io master  \n\n5. 合并分支  \ngit pull origin hexo MERGE_HEAD origin/master  \n\n6. 设置当前分支  \n首先git checkout -b origin/master\n其次git checkout master\n即可恢复到master repository的状态，然后就可以pull了  \n\n7. git help <命令>   \n查找命令的帮助信息  \n\n8. git log  \n查看git的日志信息\n\t\n9. git init    \n创建一个新的代码库或者初始化一个已存在的代码库\n\n10. git rm  \n删除索引或代码库中的文件  \n\n11. git status  \n显示当前git的状态，包括增删改，但是没有提交的信息\n\n12. 初始化\\*\\*目录为本地代码库  \ncd \\*\\*  \ngit init   \n\n13. git fetch  \n从服务器代码库获取数据 \neg. git fetch origin  \n\n14. git merge origin/master   \n合并origin/master到本地master分支\n\n15. git pull 命令是git fetch和git merge命令的组合  \neg. git pull origin master 其中origin是远程代码库名，master是要合并的本地分支\n\n16. git其他常用命令参考\nhttp://www.cnblogs.com/cspku/articles/Git_cmds.html","source":"_posts/git命令行.md","raw":"---\ntitle: git命令行  \ndate: 2017-06-02 17:25:55\ntags: 命令行\n---\n\n1. git clone\n拉一个分支到当前目录\ngit clone https://github.com/cocosgirl/diana.git\n\n2. git add . \n把我们要提交的文件的信息添加到索引库中  \n例如：git add html_1_chapter.md\n\n3. git commit   \ngit将依据索引库中的内容来进行文件的提交  \n例如：git commit html_1_chapter.md -m \"测试本地提交\"  \n本地删除文件提交：  \ngit commit -a -m \"删除不要的文件\"\n\n4. git push  \n提交完以后发布  \n发布到分支：  \n例如：git push -u https://github.com/cocosgirl/cocosgirl.github.io master  \n\n5. 合并分支  \ngit pull origin hexo MERGE_HEAD origin/master  \n\n6. 设置当前分支  \n首先git checkout -b origin/master\n其次git checkout master\n即可恢复到master repository的状态，然后就可以pull了  \n\n7. git help <命令>   \n查找命令的帮助信息  \n\n8. git log  \n查看git的日志信息\n\t\n9. git init    \n创建一个新的代码库或者初始化一个已存在的代码库\n\n10. git rm  \n删除索引或代码库中的文件  \n\n11. git status  \n显示当前git的状态，包括增删改，但是没有提交的信息\n\n12. 初始化\\*\\*目录为本地代码库  \ncd \\*\\*  \ngit init   \n\n13. git fetch  \n从服务器代码库获取数据 \neg. git fetch origin  \n\n14. git merge origin/master   \n合并origin/master到本地master分支\n\n15. git pull 命令是git fetch和git merge命令的组合  \neg. git pull origin master 其中origin是远程代码库名，master是要合并的本地分支\n\n16. git其他常用命令参考\nhttp://www.cnblogs.com/cspku/articles/Git_cmds.html","slug":"git命令行","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz0000zb01t71aqbkq0","content":"<ol>\n<li><p>git clone<br>拉一个分支到当前目录<br>git clone <a href=\"https://github.com/cocosgirl/diana.git\">https://github.com/cocosgirl/diana.git</a></p>\n</li>\n<li><p>git add .<br>把我们要提交的文件的信息添加到索引库中<br>例如：git add html_1_chapter.md</p>\n</li>\n<li><p>git commit<br>git将依据索引库中的内容来进行文件的提交<br>例如：git commit html_1_chapter.md -m “测试本地提交”<br>本地删除文件提交：<br>git commit -a -m “删除不要的文件”</p>\n</li>\n<li><p>git push<br>提交完以后发布<br>发布到分支：<br>例如：git push -u <a href=\"https://github.com/cocosgirl/cocosgirl.github.io\">https://github.com/cocosgirl/cocosgirl.github.io</a> master  </p>\n</li>\n<li><p>合并分支<br>git pull origin hexo MERGE_HEAD origin/master  </p>\n</li>\n<li><p>设置当前分支<br>首先git checkout -b origin/master<br>其次git checkout master<br>即可恢复到master repository的状态，然后就可以pull了  </p>\n</li>\n<li><p>git help &lt;命令&gt;<br>查找命令的帮助信息  </p>\n</li>\n<li><p>git log<br>查看git的日志信息</p>\n</li>\n<li><p>git init<br>创建一个新的代码库或者初始化一个已存在的代码库</p>\n</li>\n<li><p>git rm<br>删除索引或代码库中的文件  </p>\n</li>\n<li><p>git status<br>显示当前git的状态，包括增删改，但是没有提交的信息</p>\n</li>\n<li><p>初始化**目录为本地代码库<br>cd **<br>git init   </p>\n</li>\n<li><p>git fetch<br>从服务器代码库获取数据<br>eg. git fetch origin  </p>\n</li>\n<li><p>git merge origin/master<br>合并origin/master到本地master分支</p>\n</li>\n<li><p>git pull 命令是git fetch和git merge命令的组合<br>eg. git pull origin master 其中origin是远程代码库名，master是要合并的本地分支</p>\n</li>\n<li><p>git其他常用命令参考<br><a href=\"http://www.cnblogs.com/cspku/articles/Git_cmds.html\">http://www.cnblogs.com/cspku/articles/Git_cmds.html</a></p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>git clone<br>拉一个分支到当前目录<br>git clone <a href=\"https://github.com/cocosgirl/diana.git\">https://github.com/cocosgirl/diana.git</a></p>\n</li>\n<li><p>git add .<br>把我们要提交的文件的信息添加到索引库中<br>例如：git add html_1_chapter.md</p>\n</li>\n<li><p>git commit<br>git将依据索引库中的内容来进行文件的提交<br>例如：git commit html_1_chapter.md -m “测试本地提交”<br>本地删除文件提交：<br>git commit -a -m “删除不要的文件”</p>\n</li>\n<li><p>git push<br>提交完以后发布<br>发布到分支：<br>例如：git push -u <a href=\"https://github.com/cocosgirl/cocosgirl.github.io\">https://github.com/cocosgirl/cocosgirl.github.io</a> master  </p>\n</li>\n<li><p>合并分支<br>git pull origin hexo MERGE_HEAD origin/master  </p>\n</li>\n<li><p>设置当前分支<br>首先git checkout -b origin/master<br>其次git checkout master<br>即可恢复到master repository的状态，然后就可以pull了  </p>\n</li>\n<li><p>git help &lt;命令&gt;<br>查找命令的帮助信息  </p>\n</li>\n<li><p>git log<br>查看git的日志信息</p>\n</li>\n<li><p>git init<br>创建一个新的代码库或者初始化一个已存在的代码库</p>\n</li>\n<li><p>git rm<br>删除索引或代码库中的文件  </p>\n</li>\n<li><p>git status<br>显示当前git的状态，包括增删改，但是没有提交的信息</p>\n</li>\n<li><p>初始化**目录为本地代码库<br>cd **<br>git init   </p>\n</li>\n<li><p>git fetch<br>从服务器代码库获取数据<br>eg. git fetch origin  </p>\n</li>\n<li><p>git merge origin/master<br>合并origin/master到本地master分支</p>\n</li>\n<li><p>git pull 命令是git fetch和git merge命令的组合<br>eg. git pull origin master 其中origin是远程代码库名，master是要合并的本地分支</p>\n</li>\n<li><p>git其他常用命令参考<br><a href=\"http://www.cnblogs.com/cspku/articles/Git_cmds.html\">http://www.cnblogs.com/cspku/articles/Git_cmds.html</a></p>\n</li>\n</ol>\n"},{"title":"hexo命令行","date":"2017-06-02T11:29:38.000Z","_content":"\n1. 新建页面的hexo命令是：  \nhexo new page \"pageName\"  \n\n2. 新建博客文章    \nhexo new \"文章名称\"  #新建文章  \nhexo new post \"文章名称\"  #新建文章,双引号可以不用\n\n3. 发布博客  \nhexo clean  #清除缓存 网页正常情况下可以忽略此条命令  \nhexo generate  #生成静态页面至public目录\n\n4. 写好之后可以现在本地预览，确定无误之后再部署到Github上    \nhexo server  #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）  \nhexo deploy  #将.deploy目录部署到GitHub  \n\n5. hexo命令简写形式  \nhexo n \"我的博客\" == hexo new \"我的博客\"  \nhexo g == hexo generate  \nhexo s == hexo server  \nhexo d == hexo deploy  \n \n6. 其他\nhexo help   # 查看帮助  \rhexo version  #查看Hexo的版本  \rhexo deploy -g  #生成加部署  \rhexo server -g  #生成加预览  ","source":"_posts/hexo命令行.md","raw":"---\ntitle: hexo命令行\ndate: 2017-06-02 19:29:38\ntags: 命令行\n---\n\n1. 新建页面的hexo命令是：  \nhexo new page \"pageName\"  \n\n2. 新建博客文章    \nhexo new \"文章名称\"  #新建文章  \nhexo new post \"文章名称\"  #新建文章,双引号可以不用\n\n3. 发布博客  \nhexo clean  #清除缓存 网页正常情况下可以忽略此条命令  \nhexo generate  #生成静态页面至public目录\n\n4. 写好之后可以现在本地预览，确定无误之后再部署到Github上    \nhexo server  #开启预览访问端口（默认端口4000，'ctrl + c'关闭server）  \nhexo deploy  #将.deploy目录部署到GitHub  \n\n5. hexo命令简写形式  \nhexo n \"我的博客\" == hexo new \"我的博客\"  \nhexo g == hexo generate  \nhexo s == hexo server  \nhexo d == hexo deploy  \n \n6. 其他\nhexo help   # 查看帮助  \rhexo version  #查看Hexo的版本  \rhexo deploy -g  #生成加部署  \rhexo server -g  #生成加预览  ","slug":"hexo命令行","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz00011b01t9zifgke5","content":"<ol>\n<li><p>新建页面的hexo命令是：<br>hexo new page “pageName”  </p>\n</li>\n<li><p>新建博客文章<br>hexo new “文章名称”  #新建文章<br>hexo new post “文章名称”  #新建文章,双引号可以不用</p>\n</li>\n<li><p>发布博客<br>hexo clean  #清除缓存 网页正常情况下可以忽略此条命令<br>hexo generate  #生成静态页面至public目录</p>\n</li>\n<li><p>写好之后可以现在本地预览，确定无误之后再部署到Github上<br>hexo server  #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy  #将.deploy目录部署到GitHub  </p>\n</li>\n<li><p>hexo命令简写形式<br>hexo n “我的博客” == hexo new “我的博客”<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy  </p>\n</li>\n<li><p>其他<br>hexo help   # 查看帮助<br>hexo version  #查看Hexo的版本<br>hexo deploy -g  #生成加部署<br>hexo server -g  #生成加预览  </p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>新建页面的hexo命令是：<br>hexo new page “pageName”  </p>\n</li>\n<li><p>新建博客文章<br>hexo new “文章名称”  #新建文章<br>hexo new post “文章名称”  #新建文章,双引号可以不用</p>\n</li>\n<li><p>发布博客<br>hexo clean  #清除缓存 网页正常情况下可以忽略此条命令<br>hexo generate  #生成静态页面至public目录</p>\n</li>\n<li><p>写好之后可以现在本地预览，确定无误之后再部署到Github上<br>hexo server  #开启预览访问端口（默认端口4000，’ctrl + c’关闭server）<br>hexo deploy  #将.deploy目录部署到GitHub  </p>\n</li>\n<li><p>hexo命令简写形式<br>hexo n “我的博客” == hexo new “我的博客”<br>hexo g == hexo generate<br>hexo s == hexo server<br>hexo d == hexo deploy  </p>\n</li>\n<li><p>其他<br>hexo help   # 查看帮助<br>hexo version  #查看Hexo的版本<br>hexo deploy -g  #生成加部署<br>hexo server -g  #生成加预览  </p>\n</li>\n</ol>\n"},{"title":"javascript基础知识","date":"2017-07-27T12:58:03.000Z","_content":"\n1. 变量命名： \n   不能是保留字，首字符不能是数字，区分大小写，可以是下划线、美元符、字母开头。  \n   \n2. 数据类型：  \n\tjavascript数据类型：数值、布尔、字符串、对象、数组类型。\n\t\n\n\t","source":"_posts/javascript基础知识.md","raw":"---\ntitle: javascript基础知识\ndate: 2017-07-27 20:58:03\ntags: javascript\n---\n\n1. 变量命名： \n   不能是保留字，首字符不能是数字，区分大小写，可以是下划线、美元符、字母开头。  \n   \n2. 数据类型：  \n\tjavascript数据类型：数值、布尔、字符串、对象、数组类型。\n\t\n\n\t","slug":"javascript基础知识","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz00013b01t7ykcdae2","content":"<ol>\n<li><p>变量命名：<br>不能是保留字，首字符不能是数字，区分大小写，可以是下划线、美元符、字母开头。  </p>\n</li>\n<li><p>数据类型：<br> javascript数据类型：数值、布尔、字符串、对象、数组类型。</p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>变量命名：<br>不能是保留字，首字符不能是数字，区分大小写，可以是下划线、美元符、字母开头。  </p>\n</li>\n<li><p>数据类型：<br> javascript数据类型：数值、布尔、字符串、对象、数组类型。</p>\n</li>\n</ol>\n"},{"title":"javascript几种输出方式区别","date":"2017-09-19T13:51:02.000Z","_content":"\n第一种： alert 将输出到浏览器的警示窗口  \n\n第二种： console.log 将把文本输出到调试工具的Console标签  \n\n第三种： document.write 直接输出到html页面里，并被浏览器呈现  \n\n\n以上三种方式，可以选择你喜欢的方式来调试","source":"_posts/javascript的几种输出方式.md","raw":"---\ntitle: javascript几种输出方式区别\ndate: 2017-09-19 21:51:02\ntags: javascript\n---\n\n第一种： alert 将输出到浏览器的警示窗口  \n\n第二种： console.log 将把文本输出到调试工具的Console标签  \n\n第三种： document.write 直接输出到html页面里，并被浏览器呈现  \n\n\n以上三种方式，可以选择你喜欢的方式来调试","slug":"javascript的几种输出方式","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz10016b01t9jxw67dm","content":"<p>第一种： alert 将输出到浏览器的警示窗口  </p>\n<p>第二种： console.log 将把文本输出到调试工具的Console标签  </p>\n<p>第三种： document.write 直接输出到html页面里，并被浏览器呈现  </p>\n<p>以上三种方式，可以选择你喜欢的方式来调试</p>\n","excerpt":"","more":"<p>第一种： alert 将输出到浏览器的警示窗口  </p>\n<p>第二种： console.log 将把文本输出到调试工具的Console标签  </p>\n<p>第三种： document.write 直接输出到html页面里，并被浏览器呈现  </p>\n<p>以上三种方式，可以选择你喜欢的方式来调试</p>\n"},{"title":"javascript数组用法","date":"2017-09-21T12:13:00.000Z","_content":"1. 数组声明与初始化方式： \n\tvar studentList = [\"张三\",\"李四\",\"王五\"];  \n\tvar studentList = new Array(\"张三\",\"李四\",\"王五\");  \n\tvar studentList = new Array();    \n\tstudentList[0] = \"张三\";\n  \n2. <font color=\"red\">splice的使用</font>  \n\tsplice方法接收的第一个参数，表示想要删除或插入的元素的索引值，第二个参数是删除元素的个数。第三个往后就是要添加到数组里的值。\n\t\n3. 数组添加元素操作  \n\tpush把元素添加到数组的末尾（可以一次加多个）：   \n\tstudentList.push(\"小赵\",\"燕子\");  \n\t\n\tunshift把元素添加到数组的首位（可以一次加多个）：  \n\tstudentList.unshift(\"第一\",\"第二\");\n\t\n\t从索引5开始删除0个元素，添加张1、张2、张3三个元素：  \n\tstudentList.splice(5, 0, \"张1\", \"张2\", \"张3\");\n\t\n4. 数组删除元素操作  \n   pop删除数组最后一个元素  \n   shift删除数组第一个元素  \n   splice(index, num)删除相应位置和数量的元素  \n   studentList.splice(5,3); //删除从数组索引5开始的3个元素\n   \n5. 数组合并concat\n\tarray1.concat(array2);  \n\t","source":"_posts/javascript数组用法.md","raw":"---\ntitle: javascript数组用法\ndate: 2017-09-21 20:13:00\ntags:\n---\n1. 数组声明与初始化方式： \n\tvar studentList = [\"张三\",\"李四\",\"王五\"];  \n\tvar studentList = new Array(\"张三\",\"李四\",\"王五\");  \n\tvar studentList = new Array();    \n\tstudentList[0] = \"张三\";\n  \n2. <font color=\"red\">splice的使用</font>  \n\tsplice方法接收的第一个参数，表示想要删除或插入的元素的索引值，第二个参数是删除元素的个数。第三个往后就是要添加到数组里的值。\n\t\n3. 数组添加元素操作  \n\tpush把元素添加到数组的末尾（可以一次加多个）：   \n\tstudentList.push(\"小赵\",\"燕子\");  \n\t\n\tunshift把元素添加到数组的首位（可以一次加多个）：  \n\tstudentList.unshift(\"第一\",\"第二\");\n\t\n\t从索引5开始删除0个元素，添加张1、张2、张3三个元素：  \n\tstudentList.splice(5, 0, \"张1\", \"张2\", \"张3\");\n\t\n4. 数组删除元素操作  \n   pop删除数组最后一个元素  \n   shift删除数组第一个元素  \n   splice(index, num)删除相应位置和数量的元素  \n   studentList.splice(5,3); //删除从数组索引5开始的3个元素\n   \n5. 数组合并concat\n\tarray1.concat(array2);  \n\t","slug":"javascript数组用法","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz10018b01tgc3g9b6l","content":"<ol>\n<li><p>数组声明与初始化方式：<br> var studentList = [“张三”,”李四”,”王五”];<br> var studentList = new Array(“张三”,”李四”,”王五”);<br> var studentList = new Array();<br> studentList[0] = “张三”;</p>\n</li>\n<li><p><font color=\"red\">splice的使用</font><br> splice方法接收的第一个参数，表示想要删除或插入的元素的索引值，第二个参数是删除元素的个数。第三个往后就是要添加到数组里的值。</p>\n</li>\n<li><p>数组添加元素操作<br> push把元素添加到数组的末尾（可以一次加多个）：<br> studentList.push(“小赵”,”燕子”);  </p>\n<p> unshift把元素添加到数组的首位（可以一次加多个）：<br> studentList.unshift(“第一”,”第二”);</p>\n<p> 从索引5开始删除0个元素，添加张1、张2、张3三个元素：<br> studentList.splice(5, 0, “张1”, “张2”, “张3”);</p>\n</li>\n<li><p>数组删除元素操作<br>pop删除数组最后一个元素<br>shift删除数组第一个元素<br>splice(index, num)删除相应位置和数量的元素<br>studentList.splice(5,3); //删除从数组索引5开始的3个元素</p>\n</li>\n<li><p>数组合并concat<br> array1.concat(array2);  </p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>数组声明与初始化方式：<br> var studentList = [“张三”,”李四”,”王五”];<br> var studentList = new Array(“张三”,”李四”,”王五”);<br> var studentList = new Array();<br> studentList[0] = “张三”;</p>\n</li>\n<li><p><font color=\"red\">splice的使用</font><br> splice方法接收的第一个参数，表示想要删除或插入的元素的索引值，第二个参数是删除元素的个数。第三个往后就是要添加到数组里的值。</p>\n</li>\n<li><p>数组添加元素操作<br> push把元素添加到数组的末尾（可以一次加多个）：<br> studentList.push(“小赵”,”燕子”);  </p>\n<p> unshift把元素添加到数组的首位（可以一次加多个）：<br> studentList.unshift(“第一”,”第二”);</p>\n<p> 从索引5开始删除0个元素，添加张1、张2、张3三个元素：<br> studentList.splice(5, 0, “张1”, “张2”, “张3”);</p>\n</li>\n<li><p>数组删除元素操作<br>pop删除数组最后一个元素<br>shift删除数组第一个元素<br>splice(index, num)删除相应位置和数量的元素<br>studentList.splice(5,3); //删除从数组索引5开始的3个元素</p>\n</li>\n<li><p>数组合并concat<br> array1.concat(array2);  </p>\n</li>\n</ol>\n"},{"title":"markdown使用","date":"2017-06-02T12:46:42.000Z","_content":"\n# 1. 标题  \n\\# 标题1  \n\\#\\# 标题2  \n\\#\\#\\#\\# 标题3   \n\n# 2. 引用   \n行首使用 \\> 加上一个空格表示引用一个段落，可嵌套  \n\\> 引用  \n\\> \\> 我再引用\n> 引用\n> > 我再引用  \n\n# 3. 分隔线  \n在一行连续使用三个或以上_或\\* \\:   \n\\-\\-\\-  \n\\*\\*\\*   \n\n>---\n***  \n\n# 4. 强调（粗体、斜体）:  \n\\*斜体\\*  \n\\*\\*粗体\\*\\*  \n\n>*斜体*   \n \n>**粗体**\n\n# 5. 阅读全文  \n在喜欢的位置添加阅读全文的功能，主题会自动识别这个标签：\n  \n以上是文章摘要  \n<\\!\\-\\-more\\-\\-\\>  \n以下是余下全文  \n\n# 6. 不能使用的字符\nhexo g编译不通过的字符：两对大括号，或者大括号中间包含百分号，每个符号之间留空格可以编译通过，不留空格编译不通过  \n例如：\\{ \\{ aaa \\} \\}  和 \\{ % bbb % \\}\n\n \n# 7. 转义字符要多加一个\\  \n\\\\\\\\ 反斜杠  \n\\\\\\` 反引号  \n\\\\\\* 星号  \n\\\\\\_ 下划线  \n\\\\\\{\\\\\\} 大括号  \n\\\\\\[\\\\\\] 中括号  \n\\\\\\(\\\\\\) 小括号  \n\\\\\\# 井号  \n\\\\\\+ 加号  \n\\\\\\- 减号  \n\\\\\\. 英文句号  \n\\\\\\! 感叹号  \n\n# 8. 列表\n## 无序列表  \n\\* 无序列表1  \n\\+ 无序列表2  \n\\- 无序列表3 \n\n>* 无序列表1  \n+ 无序列表2  \n- 无序列表3\n\n## 有序列表\n1.第一项  \n2.第二项  \n\n>1.第一项  \n2.第二项    \n\n# 9. 链接\nMarkdown有两种链接方式：Inline以及Reference  \n## 文字链接：\nInline:  \n\\[谷歌](https://www.google.com)   \nReference:  \n\\[谷歌]\\[google_url]  \n\\[google_url]:https://www.google.com  \n\n>Inline:  \n[谷歌](https://www.google.com)   \nReference:  \n[谷歌][google_url]  \n[google_url]:https://www.google.com  \n\n## 图像链接\n\\!\\[\\](http://www.google.rw/images/srpr/logo4w.png)  \n\\!\\[\\]\\[google_url\\]  \n\\[google_url\\]:http://www.google.rw/images/srpr/logo4w.png  \n\n![](http://www.google.rw/images/srpr/logo4w.png)\n![][google_url]\n[google_url]:http://www.google.rw/images/srpr/logo4w.png\n","source":"_posts/markdown使用.md","raw":"---\ntitle: markdown使用\ndate: 2017-06-02 20:46:42\ntags: 工具\n---\n\n# 1. 标题  \n\\# 标题1  \n\\#\\# 标题2  \n\\#\\#\\#\\# 标题3   \n\n# 2. 引用   \n行首使用 \\> 加上一个空格表示引用一个段落，可嵌套  \n\\> 引用  \n\\> \\> 我再引用\n> 引用\n> > 我再引用  \n\n# 3. 分隔线  \n在一行连续使用三个或以上_或\\* \\:   \n\\-\\-\\-  \n\\*\\*\\*   \n\n>---\n***  \n\n# 4. 强调（粗体、斜体）:  \n\\*斜体\\*  \n\\*\\*粗体\\*\\*  \n\n>*斜体*   \n \n>**粗体**\n\n# 5. 阅读全文  \n在喜欢的位置添加阅读全文的功能，主题会自动识别这个标签：\n  \n以上是文章摘要  \n<\\!\\-\\-more\\-\\-\\>  \n以下是余下全文  \n\n# 6. 不能使用的字符\nhexo g编译不通过的字符：两对大括号，或者大括号中间包含百分号，每个符号之间留空格可以编译通过，不留空格编译不通过  \n例如：\\{ \\{ aaa \\} \\}  和 \\{ % bbb % \\}\n\n \n# 7. 转义字符要多加一个\\  \n\\\\\\\\ 反斜杠  \n\\\\\\` 反引号  \n\\\\\\* 星号  \n\\\\\\_ 下划线  \n\\\\\\{\\\\\\} 大括号  \n\\\\\\[\\\\\\] 中括号  \n\\\\\\(\\\\\\) 小括号  \n\\\\\\# 井号  \n\\\\\\+ 加号  \n\\\\\\- 减号  \n\\\\\\. 英文句号  \n\\\\\\! 感叹号  \n\n# 8. 列表\n## 无序列表  \n\\* 无序列表1  \n\\+ 无序列表2  \n\\- 无序列表3 \n\n>* 无序列表1  \n+ 无序列表2  \n- 无序列表3\n\n## 有序列表\n1.第一项  \n2.第二项  \n\n>1.第一项  \n2.第二项    \n\n# 9. 链接\nMarkdown有两种链接方式：Inline以及Reference  \n## 文字链接：\nInline:  \n\\[谷歌](https://www.google.com)   \nReference:  \n\\[谷歌]\\[google_url]  \n\\[google_url]:https://www.google.com  \n\n>Inline:  \n[谷歌](https://www.google.com)   \nReference:  \n[谷歌][google_url]  \n[google_url]:https://www.google.com  \n\n## 图像链接\n\\!\\[\\](http://www.google.rw/images/srpr/logo4w.png)  \n\\!\\[\\]\\[google_url\\]  \n\\[google_url\\]:http://www.google.rw/images/srpr/logo4w.png  \n\n![](http://www.google.rw/images/srpr/logo4w.png)\n![][google_url]\n[google_url]:http://www.google.rw/images/srpr/logo4w.png\n","slug":"markdown使用","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz2001bb01ta4fa11rt","content":"<h1 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a>1. 标题</h1><p># 标题1<br>## 标题2<br>#### 标题3   </p>\n<h1 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2. 引用\"></a>2. 引用</h1><p>行首使用 > 加上一个空格表示引用一个段落，可嵌套<br>> 引用<br>> > 我再引用</p>\n<blockquote>\n<p>引用</p>\n<blockquote>\n<p>我再引用  </p>\n</blockquote>\n</blockquote>\n<h1 id=\"3-分隔线\"><a href=\"#3-分隔线\" class=\"headerlink\" title=\"3. 分隔线\"></a>3. 分隔线</h1><p>在一行连续使用三个或以上_或* \\:<br>---<br>***   </p>\n<blockquote>\n<hr>\n</blockquote>\n<hr>\n<h1 id=\"4-强调（粗体、斜体）\"><a href=\"#4-强调（粗体、斜体）\" class=\"headerlink\" title=\"4. 强调（粗体、斜体）:\"></a>4. 强调（粗体、斜体）:</h1><p>*斜体*<br>**粗体**  </p>\n<blockquote>\n<p><em>斜体</em>   </p>\n</blockquote>\n<blockquote>\n<p><strong>粗体</strong></p>\n</blockquote>\n<h1 id=\"5-阅读全文\"><a href=\"#5-阅读全文\" class=\"headerlink\" title=\"5. 阅读全文\"></a>5. 阅读全文</h1><p>在喜欢的位置添加阅读全文的功能，主题会自动识别这个标签：</p>\n<p>以上是文章摘要<br>&lt;!--more--><br>以下是余下全文  </p>\n<h1 id=\"6-不能使用的字符\"><a href=\"#6-不能使用的字符\" class=\"headerlink\" title=\"6. 不能使用的字符\"></a>6. 不能使用的字符</h1><p>hexo g编译不通过的字符：两对大括号，或者大括号中间包含百分号，每个符号之间留空格可以编译通过，不留空格编译不通过<br>例如：{ { aaa } }  和 { % bbb % }</p>\n<h1 id=\"7-转义字符要多加一个\"><a href=\"#7-转义字符要多加一个\" class=\"headerlink\" title=\"7. 转义字符要多加一个\\\"></a>7. 转义字符要多加一个\\</h1><p>\\\\ 反斜杠<br>\\` 反引号<br>\\* 星号<br>\\_ 下划线<br>\\{\\} 大括号<br>\\[\\] 中括号<br>\\(\\) 小括号<br>\\# 井号<br>\\+ 加号<br>\\- 减号<br>\\. 英文句号<br>\\! 感叹号  </p>\n<h1 id=\"8-列表\"><a href=\"#8-列表\" class=\"headerlink\" title=\"8. 列表\"></a>8. 列表</h1><h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>* 无序列表1<br>+ 无序列表2<br>- 无序列表3 </p>\n<blockquote>\n<ul>\n<li>无序列表1  </li>\n</ul>\n<ul>\n<li>无序列表2  </li>\n</ul>\n<ul>\n<li>无序列表3</li>\n</ul>\n</blockquote>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><p>1.第一项<br>2.第二项  </p>\n<blockquote>\n<p>1.第一项<br>2.第二项    </p>\n</blockquote>\n<h1 id=\"9-链接\"><a href=\"#9-链接\" class=\"headerlink\" title=\"9. 链接\"></a>9. 链接</h1><p>Markdown有两种链接方式：Inline以及Reference  </p>\n<h2 id=\"文字链接：\"><a href=\"#文字链接：\" class=\"headerlink\" title=\"文字链接：\"></a>文字链接：</h2><p>Inline:<br>[谷歌](<a href=\"https://www.google.com\">https://www.google.com</a>)<br>Reference:<br>[谷歌][google_url]<br>[google_url]:<a href=\"https://www.google.com\">https://www.google.com</a>  </p>\n<blockquote>\n<p>Inline:<br><a href=\"https://www.google.com\">谷歌</a><br>Reference:<br>[谷歌][google_url]<br>[google_url]:<a href=\"https://www.google.com\">https://www.google.com</a>  </p>\n</blockquote>\n<h2 id=\"图像链接\"><a href=\"#图像链接\" class=\"headerlink\" title=\"图像链接\"></a>图像链接</h2><p>![](<a href=\"http://www.google.rw/images/srpr/logo4w.png\">http://www.google.rw/images/srpr/logo4w.png</a>)<br>![][google_url]<br>[google_url]:<a href=\"http://www.google.rw/images/srpr/logo4w.png\">http://www.google.rw/images/srpr/logo4w.png</a>  </p>\n<p><img src=\"http://www.google.rw/images/srpr/logo4w.png\" alt=\"\"><br>![][google_url]<br>[google_url]:<a href=\"http://www.google.rw/images/srpr/logo4w.png\">http://www.google.rw/images/srpr/logo4w.png</a></p>\n","excerpt":"","more":"<h1 id=\"1-标题\"><a href=\"#1-标题\" class=\"headerlink\" title=\"1. 标题\"></a>1. 标题</h1><p># 标题1<br>## 标题2<br>#### 标题3   </p>\n<h1 id=\"2-引用\"><a href=\"#2-引用\" class=\"headerlink\" title=\"2. 引用\"></a>2. 引用</h1><p>行首使用 > 加上一个空格表示引用一个段落，可嵌套<br>> 引用<br>> > 我再引用</p>\n<blockquote>\n<p>引用</p>\n<blockquote>\n<p>我再引用  </p>\n</blockquote>\n</blockquote>\n<h1 id=\"3-分隔线\"><a href=\"#3-分隔线\" class=\"headerlink\" title=\"3. 分隔线\"></a>3. 分隔线</h1><p>在一行连续使用三个或以上_或* \\:<br>---<br>***   </p>\n<blockquote>\n<hr>\n</blockquote>\n<hr>\n<h1 id=\"4-强调（粗体、斜体）\"><a href=\"#4-强调（粗体、斜体）\" class=\"headerlink\" title=\"4. 强调（粗体、斜体）:\"></a>4. 强调（粗体、斜体）:</h1><p>*斜体*<br>**粗体**  </p>\n<blockquote>\n<p><em>斜体</em>   </p>\n</blockquote>\n<blockquote>\n<p><strong>粗体</strong></p>\n</blockquote>\n<h1 id=\"5-阅读全文\"><a href=\"#5-阅读全文\" class=\"headerlink\" title=\"5. 阅读全文\"></a>5. 阅读全文</h1><p>在喜欢的位置添加阅读全文的功能，主题会自动识别这个标签：</p>\n<p>以上是文章摘要<br>&lt;!--more--><br>以下是余下全文  </p>\n<h1 id=\"6-不能使用的字符\"><a href=\"#6-不能使用的字符\" class=\"headerlink\" title=\"6. 不能使用的字符\"></a>6. 不能使用的字符</h1><p>hexo g编译不通过的字符：两对大括号，或者大括号中间包含百分号，每个符号之间留空格可以编译通过，不留空格编译不通过<br>例如：{ { aaa } }  和 { % bbb % }</p>\n<h1 id=\"7-转义字符要多加一个\"><a href=\"#7-转义字符要多加一个\" class=\"headerlink\" title=\"7. 转义字符要多加一个\\\"></a>7. 转义字符要多加一个\\</h1><p>\\\\ 反斜杠<br>\\` 反引号<br>\\* 星号<br>\\_ 下划线<br>\\{\\} 大括号<br>\\[\\] 中括号<br>\\(\\) 小括号<br>\\# 井号<br>\\+ 加号<br>\\- 减号<br>\\. 英文句号<br>\\! 感叹号  </p>\n<h1 id=\"8-列表\"><a href=\"#8-列表\" class=\"headerlink\" title=\"8. 列表\"></a>8. 列表</h1><h2 id=\"无序列表\"><a href=\"#无序列表\" class=\"headerlink\" title=\"无序列表\"></a>无序列表</h2><p>* 无序列表1<br>+ 无序列表2<br>- 无序列表3 </p>\n<blockquote>\n<ul>\n<li>无序列表1  </li>\n</ul>\n<ul>\n<li>无序列表2  </li>\n</ul>\n<ul>\n<li>无序列表3</li>\n</ul>\n</blockquote>\n<h2 id=\"有序列表\"><a href=\"#有序列表\" class=\"headerlink\" title=\"有序列表\"></a>有序列表</h2><p>1.第一项<br>2.第二项  </p>\n<blockquote>\n<p>1.第一项<br>2.第二项    </p>\n</blockquote>\n<h1 id=\"9-链接\"><a href=\"#9-链接\" class=\"headerlink\" title=\"9. 链接\"></a>9. 链接</h1><p>Markdown有两种链接方式：Inline以及Reference  </p>\n<h2 id=\"文字链接：\"><a href=\"#文字链接：\" class=\"headerlink\" title=\"文字链接：\"></a>文字链接：</h2><p>Inline:<br>[谷歌](<a href=\"https://www.google.com\">https://www.google.com</a>)<br>Reference:<br>[谷歌][google_url]<br>[google_url]:<a href=\"https://www.google.com\">https://www.google.com</a>  </p>\n<blockquote>\n<p>Inline:<br><a href=\"https://www.google.com\">谷歌</a><br>Reference:<br>[谷歌][google_url]<br>[google_url]:<a href=\"https://www.google.com\">https://www.google.com</a>  </p>\n</blockquote>\n<h2 id=\"图像链接\"><a href=\"#图像链接\" class=\"headerlink\" title=\"图像链接\"></a>图像链接</h2><p>![](<a href=\"http://www.google.rw/images/srpr/logo4w.png\">http://www.google.rw/images/srpr/logo4w.png</a>)<br>![][google_url]<br>[google_url]:<a href=\"http://www.google.rw/images/srpr/logo4w.png\">http://www.google.rw/images/srpr/logo4w.png</a>  </p>\n<p><img src=\"http://www.google.rw/images/srpr/logo4w.png\" alt=\"\"><br>![][google_url]<br>[google_url]:<a href=\"http://www.google.rw/images/srpr/logo4w.png\">http://www.google.rw/images/srpr/logo4w.png</a></p>\n"},{"title":"mysql命令行","date":"2017-09-13T01:48:38.000Z","_content":"\n1. 重启服务器上的mysql  \nsudo su -  \nservice mysqld restart\n\n2. 在当前服务器下连接数据库  \nmysql -uUser -pPassword  \n\n3. 查看当前服务器下的数据库  \nshow databases;  \n\n4. 进入数据库  \nuse database1;  \n\n5. 查看当前数据库的表  \nshow tables;  \n\n6. 如果存在某表，删除  \nDROP TABLE IF EXISTS table1;  ","source":"_posts/mysql命令行.md","raw":"---\ntitle: mysql命令行\ndate: 2017-09-13 09:48:38\ntags: 命令行\n---\n\n1. 重启服务器上的mysql  \nsudo su -  \nservice mysqld restart\n\n2. 在当前服务器下连接数据库  \nmysql -uUser -pPassword  \n\n3. 查看当前服务器下的数据库  \nshow databases;  \n\n4. 进入数据库  \nuse database1;  \n\n5. 查看当前数据库的表  \nshow tables;  \n\n6. 如果存在某表，删除  \nDROP TABLE IF EXISTS table1;  ","slug":"mysql命令行","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz2001db01t4zli7fep","content":"<ol>\n<li><p>重启服务器上的mysql<br>sudo su -<br>service mysqld restart</p>\n</li>\n<li><p>在当前服务器下连接数据库<br>mysql -uUser -pPassword  </p>\n</li>\n<li><p>查看当前服务器下的数据库<br>show databases;  </p>\n</li>\n<li><p>进入数据库<br>use database1;  </p>\n</li>\n<li><p>查看当前数据库的表<br>show tables;  </p>\n</li>\n<li><p>如果存在某表，删除<br>DROP TABLE IF EXISTS table1;  </p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>重启服务器上的mysql<br>sudo su -<br>service mysqld restart</p>\n</li>\n<li><p>在当前服务器下连接数据库<br>mysql -uUser -pPassword  </p>\n</li>\n<li><p>查看当前服务器下的数据库<br>show databases;  </p>\n</li>\n<li><p>进入数据库<br>use database1;  </p>\n</li>\n<li><p>查看当前数据库的表<br>show tables;  </p>\n</li>\n<li><p>如果存在某表，删除<br>DROP TABLE IF EXISTS table1;  </p>\n</li>\n</ol>\n"},{"title":"mysql密码过期","date":"2017-12-11T03:28:15.000Z","_content":"\n# mysql5.7密码过期问题\n\n### 报错：  \nERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.  \n翻译：  \n错误1862(HY000):你的密码已经过期。登录必须改变它使用一个客户端,支持过期的密码。  \n\n### 错误解决：  \n进入mysql的服务器中使用mysql指令进行登录及操作。\n\n1.登录mysql：mysql -uroot -proot\n\n(root是我的帐号及密码）\n\n2.尝试是否报1820错误，执行语句：mysql> select 1;\n\n(将会得到一个错误：ERROR 1820 (HY000): You must SET PASSWORD before executing this statement)\n\n3.设置新密码：mysql> set password=password(‘root');\n\n(由于我不需要更改密码，所以再次重置一下密码为root)\n\n4.重设密码的时候可能会出现以下错误：（不出现的话，忽略此步）    \nERROR 1819 (HY000): Your password does not satisfy the current policy requirements  \n出现这个错误的话，需要修改一个全局参数：   \nmysql> set global validate_password_policy=0;  \nQuery OK, 0 rows affected (0.00 sec)\n\n改完再重新操作第3步    \n\n5.最后给用户赋权限  \nmysql>  GRANT ALL PRIVILEGES ON \\*.* TO 'username'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;  \nQuery OK, 0 rows affected, 1 warning (0.00 sec)  \n\nmysql> FLUSH PRIVILEGES;  \nQuery OK, 0 rows affected (0.00 sec)  \n\n6.尝试登录，正常\n\n","source":"_posts/mysql密码过期.md","raw":"---\ntitle: mysql密码过期\ndate: 2017-12-11 11:28:15\ntags: 命令行\n---\n\n# mysql5.7密码过期问题\n\n### 报错：  \nERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.  \n翻译：  \n错误1862(HY000):你的密码已经过期。登录必须改变它使用一个客户端,支持过期的密码。  \n\n### 错误解决：  \n进入mysql的服务器中使用mysql指令进行登录及操作。\n\n1.登录mysql：mysql -uroot -proot\n\n(root是我的帐号及密码）\n\n2.尝试是否报1820错误，执行语句：mysql> select 1;\n\n(将会得到一个错误：ERROR 1820 (HY000): You must SET PASSWORD before executing this statement)\n\n3.设置新密码：mysql> set password=password(‘root');\n\n(由于我不需要更改密码，所以再次重置一下密码为root)\n\n4.重设密码的时候可能会出现以下错误：（不出现的话，忽略此步）    \nERROR 1819 (HY000): Your password does not satisfy the current policy requirements  \n出现这个错误的话，需要修改一个全局参数：   \nmysql> set global validate_password_policy=0;  \nQuery OK, 0 rows affected (0.00 sec)\n\n改完再重新操作第3步    \n\n5.最后给用户赋权限  \nmysql>  GRANT ALL PRIVILEGES ON \\*.* TO 'username'@'%' IDENTIFIED BY 'password' WITH GRANT OPTION;  \nQuery OK, 0 rows affected, 1 warning (0.00 sec)  \n\nmysql> FLUSH PRIVILEGES;  \nQuery OK, 0 rows affected (0.00 sec)  \n\n6.尝试登录，正常\n\n","slug":"mysql密码过期","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz2001gb01t0wvx2a4p","content":"<h1 id=\"mysql5-7密码过期问题\"><a href=\"#mysql5-7密码过期问题\" class=\"headerlink\" title=\"mysql5.7密码过期问题\"></a>mysql5.7密码过期问题</h1><h3 id=\"报错：\"><a href=\"#报错：\" class=\"headerlink\" title=\"报错：\"></a>报错：</h3><p>ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.<br>翻译：<br>错误1862(HY000):你的密码已经过期。登录必须改变它使用一个客户端,支持过期的密码。  </p>\n<h3 id=\"错误解决：\"><a href=\"#错误解决：\" class=\"headerlink\" title=\"错误解决：\"></a>错误解决：</h3><p>进入mysql的服务器中使用mysql指令进行登录及操作。</p>\n<p>1.登录mysql：mysql -uroot -proot</p>\n<p>(root是我的帐号及密码）</p>\n<p>2.尝试是否报1820错误，执行语句：mysql&gt; select 1;</p>\n<p>(将会得到一个错误：ERROR 1820 (HY000): You must SET PASSWORD before executing this statement)</p>\n<p>3.设置新密码：mysql&gt; set password=password(‘root’);</p>\n<p>(由于我不需要更改密码，所以再次重置一下密码为root)</p>\n<p>4.重设密码的时候可能会出现以下错误：（不出现的话，忽略此步）<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements<br>出现这个错误的话，需要修改一个全局参数：<br>mysql&gt; set global validate_password_policy=0;<br>Query OK, 0 rows affected (0.00 sec)</p>\n<p>改完再重新操作第3步    </p>\n<p>5.最后给用户赋权限<br>mysql&gt;  GRANT ALL PRIVILEGES ON *.* TO ‘username‘@’%’ IDENTIFIED BY ‘password’ WITH GRANT OPTION;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)  </p>\n<p>mysql&gt; FLUSH PRIVILEGES;<br>Query OK, 0 rows affected (0.00 sec)  </p>\n<p>6.尝试登录，正常</p>\n","excerpt":"","more":"<h1 id=\"mysql5-7密码过期问题\"><a href=\"#mysql5-7密码过期问题\" class=\"headerlink\" title=\"mysql5.7密码过期问题\"></a>mysql5.7密码过期问题</h1><h3 id=\"报错：\"><a href=\"#报错：\" class=\"headerlink\" title=\"报错：\"></a>报错：</h3><p>ERROR 1862 (HY000): Your password has expired. To log in you must change it using a client that supports expired passwords.<br>翻译：<br>错误1862(HY000):你的密码已经过期。登录必须改变它使用一个客户端,支持过期的密码。  </p>\n<h3 id=\"错误解决：\"><a href=\"#错误解决：\" class=\"headerlink\" title=\"错误解决：\"></a>错误解决：</h3><p>进入mysql的服务器中使用mysql指令进行登录及操作。</p>\n<p>1.登录mysql：mysql -uroot -proot</p>\n<p>(root是我的帐号及密码）</p>\n<p>2.尝试是否报1820错误，执行语句：mysql&gt; select 1;</p>\n<p>(将会得到一个错误：ERROR 1820 (HY000): You must SET PASSWORD before executing this statement)</p>\n<p>3.设置新密码：mysql&gt; set password=password(‘root’);</p>\n<p>(由于我不需要更改密码，所以再次重置一下密码为root)</p>\n<p>4.重设密码的时候可能会出现以下错误：（不出现的话，忽略此步）<br>ERROR 1819 (HY000): Your password does not satisfy the current policy requirements<br>出现这个错误的话，需要修改一个全局参数：<br>mysql&gt; set global validate_password_policy=0;<br>Query OK, 0 rows affected (0.00 sec)</p>\n<p>改完再重新操作第3步    </p>\n<p>5.最后给用户赋权限<br>mysql&gt;  GRANT ALL PRIVILEGES ON *.* TO ‘username‘@’%’ IDENTIFIED BY ‘password’ WITH GRANT OPTION;<br>Query OK, 0 rows affected, 1 warning (0.00 sec)  </p>\n<p>mysql&gt; FLUSH PRIVILEGES;<br>Query OK, 0 rows affected (0.00 sec)  </p>\n<p>6.尝试登录，正常</p>\n"},{"title":"python之os模块","date":"2017-12-07T03:40:37.000Z","_content":"\npython os模块提供了多数操作系统的功能接口函数，对文件和路径进行的操作都要依赖于os模块。\n\n常见的用法：\n\n1. 查看当前所在路径  \n >  ~  python  \n  Python 2.7.10 (default, Feb  7 2017, 00:08:15)  \n  \\>>> import os  \n  \\>>> os.getcwd()    \n  '/Users/tuyoo'  \n  \n >  \\>>> os.path.abspath('.')  \n '/Users/tuyoo'\n \n2. 列举路径下的所有文件  \n  os.listdir(path)\n  \n3. os.path.split(path):将路径分解为(文件夹,文件名)，返回的是元组类型。\n\n4. os.path.join(path1,path2,...):将path进行组合，若其中有绝对路径，则之前的path将被删除。\n\n5. os.path.dirname(path):返回path中的文件夹部分，结果不包含'\\'\n\n6. os.path.basename(path):返回path中的文件名。\n\n7. 查看文件时间  \n  os.path.getmtime(path):文件或文件夹的最后修改时间，从新纪元到访问时的秒数。  \n os.path.getatime(path):文件或文件夹的最后访问时间，从新纪元到访问时的秒数。  \n os.path.getctime(path):文件或文件夹的创建时间，从新纪元到访问时的秒数。\n\n8. os.path.getsize(path):查看文件或文件夹的大小，若是文件夹返回0。\n\n\n参考地址：  \nhttps://www.cnblogs.com/emily-qin/p/7001152.html  \nhttps://www.cnblogs.com/yufeihlf/p/6179547.html","source":"_posts/python之os模块.md","raw":"---\ntitle: python之os模块\ndate: 2017-12-07 11:40:37\ntags: python\n---\n\npython os模块提供了多数操作系统的功能接口函数，对文件和路径进行的操作都要依赖于os模块。\n\n常见的用法：\n\n1. 查看当前所在路径  \n >  ~  python  \n  Python 2.7.10 (default, Feb  7 2017, 00:08:15)  \n  \\>>> import os  \n  \\>>> os.getcwd()    \n  '/Users/tuyoo'  \n  \n >  \\>>> os.path.abspath('.')  \n '/Users/tuyoo'\n \n2. 列举路径下的所有文件  \n  os.listdir(path)\n  \n3. os.path.split(path):将路径分解为(文件夹,文件名)，返回的是元组类型。\n\n4. os.path.join(path1,path2,...):将path进行组合，若其中有绝对路径，则之前的path将被删除。\n\n5. os.path.dirname(path):返回path中的文件夹部分，结果不包含'\\'\n\n6. os.path.basename(path):返回path中的文件名。\n\n7. 查看文件时间  \n  os.path.getmtime(path):文件或文件夹的最后修改时间，从新纪元到访问时的秒数。  \n os.path.getatime(path):文件或文件夹的最后访问时间，从新纪元到访问时的秒数。  \n os.path.getctime(path):文件或文件夹的创建时间，从新纪元到访问时的秒数。\n\n8. os.path.getsize(path):查看文件或文件夹的大小，若是文件夹返回0。\n\n\n参考地址：  \nhttps://www.cnblogs.com/emily-qin/p/7001152.html  \nhttps://www.cnblogs.com/yufeihlf/p/6179547.html","slug":"python之os模块","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz3001ib01th9xz7psw","content":"<p>python os模块提供了多数操作系统的功能接口函数，对文件和路径进行的操作都要依赖于os模块。</p>\n<p>常见的用法：</p>\n<ol>\n<li><p>查看当前所在路径  </p>\n<blockquote>\n<p> ~  python<br>Python 2.7.10 (default, Feb  7 2017, 00:08:15)<br>>&gt;&gt; import os<br>>&gt;&gt; os.getcwd()<br>‘/Users/tuyoo’  </p>\n</blockquote>\n<blockquote>\n<p> >&gt;&gt; os.path.abspath(‘.’)<br>‘/Users/tuyoo’</p>\n</blockquote>\n</li>\n<li><p>列举路径下的所有文件<br>os.listdir(path)</p>\n</li>\n<li><p>os.path.split(path):将路径分解为(文件夹,文件名)，返回的是元组类型。</p>\n</li>\n<li><p>os.path.join(path1,path2,…):将path进行组合，若其中有绝对路径，则之前的path将被删除。</p>\n</li>\n<li><p>os.path.dirname(path):返回path中的文件夹部分，结果不包含’\\’</p>\n</li>\n<li><p>os.path.basename(path):返回path中的文件名。</p>\n</li>\n<li><p>查看文件时间<br>os.path.getmtime(path):文件或文件夹的最后修改时间，从新纪元到访问时的秒数。<br>os.path.getatime(path):文件或文件夹的最后访问时间，从新纪元到访问时的秒数。<br>os.path.getctime(path):文件或文件夹的创建时间，从新纪元到访问时的秒数。</p>\n</li>\n<li><p>os.path.getsize(path):查看文件或文件夹的大小，若是文件夹返回0。</p>\n</li>\n</ol>\n<p>参考地址：<br><a href=\"https://www.cnblogs.com/emily-qin/p/7001152.html\">https://www.cnblogs.com/emily-qin/p/7001152.html</a><br><a href=\"https://www.cnblogs.com/yufeihlf/p/6179547.html\">https://www.cnblogs.com/yufeihlf/p/6179547.html</a></p>\n","excerpt":"","more":"<p>python os模块提供了多数操作系统的功能接口函数，对文件和路径进行的操作都要依赖于os模块。</p>\n<p>常见的用法：</p>\n<ol>\n<li><p>查看当前所在路径  </p>\n<blockquote>\n<p> ~  python<br>Python 2.7.10 (default, Feb  7 2017, 00:08:15)<br>>&gt;&gt; import os<br>>&gt;&gt; os.getcwd()<br>‘/Users/tuyoo’  </p>\n</blockquote>\n<blockquote>\n<p> >&gt;&gt; os.path.abspath(‘.’)<br>‘/Users/tuyoo’</p>\n</blockquote>\n</li>\n<li><p>列举路径下的所有文件<br>os.listdir(path)</p>\n</li>\n<li><p>os.path.split(path):将路径分解为(文件夹,文件名)，返回的是元组类型。</p>\n</li>\n<li><p>os.path.join(path1,path2,…):将path进行组合，若其中有绝对路径，则之前的path将被删除。</p>\n</li>\n<li><p>os.path.dirname(path):返回path中的文件夹部分，结果不包含’\\’</p>\n</li>\n<li><p>os.path.basename(path):返回path中的文件名。</p>\n</li>\n<li><p>查看文件时间<br>os.path.getmtime(path):文件或文件夹的最后修改时间，从新纪元到访问时的秒数。<br>os.path.getatime(path):文件或文件夹的最后访问时间，从新纪元到访问时的秒数。<br>os.path.getctime(path):文件或文件夹的创建时间，从新纪元到访问时的秒数。</p>\n</li>\n<li><p>os.path.getsize(path):查看文件或文件夹的大小，若是文件夹返回0。</p>\n</li>\n</ol>\n<p>参考地址：<br><a href=\"https://www.cnblogs.com/emily-qin/p/7001152.html\">https://www.cnblogs.com/emily-qin/p/7001152.html</a><br><a href=\"https://www.cnblogs.com/yufeihlf/p/6179547.html\">https://www.cnblogs.com/yufeihlf/p/6179547.html</a></p>\n"},{"title":"struts-config.xml配置文件","date":"2018-03-02T02:01:54.000Z","_content":"\n< struts-config >是struts的根元素，它主要有8个子元素，DTD定义如下17：\n\n< !ELEMENT struts-config  \n(data-sources?,form-beans?,global-exceptions?,global-forwards?,action-mappings?,controller?,message-resources\\*,plug-in\\*)  \n\\>  \n\n以上8个元素，下面一一描述：  \n1. date-sources元素  \n　　date-sources元素用来配置应用程序所需要的数据源。java语言提供了javax.sql.DateSource接口，所有数据源必须实现该接口。如下配置：\n>  \n< data-sources>  \n　　< data-source type=\"org.apached.commons.dbcp.BasicDataSource\"\\>  \n　　　　………………  \n　　< /data-source>  \n< /data-sources>  \n\n在Action中访问方式如下：\n>>\njavax.sql.DataSource dataSource;  \njava.sql.Connection myConnection;  \ntry  \n{  \n　　dataSource = getDataSource(request);  \n　　myConnection　＝　dataSource.getConnection();  \n}  \n…………  \n\n如果是多数据源，可用如下配置：\n>>\n< data-sources>  \n　　< data-source key=\"a\"  type=\"org.apached.commons.dbcp.BasicDataSource\">  \n　　　　………………  \n　　< /data-source>  \n　　< data-source key=\"b\"   type=\"org.apached.commons.dbcp.BasicDataSource\">  \n　　　　………………   \n　　< /data-source>  \n< /data-sources>\n\n访问方式：dataSource = getDataSource(request,\"a\");\n\n2.form-beans元素  \n　　该元素主要用来配置表单验证的类。它包含如下属性：  \n　　1.classname：一般用得少，指定和form-bean无素对应的配置类，默认为org.apache.struts.config.FormBeanConfig，如果自定义，则必须扩展FormBeanConfig类。可有可无。  \n　　2.name：ActionForm Bean的惟一标识。必须。  \n　　3.type：ActionForm的完整类名。必须。  \n如下所示：  \n\n>>\n< form-beans>  \n　　< form-bean name=\"Loign\" type=\"com.ha.login\"></form-bean>  \n< /form-beans>\n\n如果是动态Action FormBean，还必须配置form-bean元素的form-property子元素。它包含四个属性，上面三个，还有一个initial 元素：以字符串的形式设置表单字段的初始值，如果没有设置该属性，则是基本类型为0，如果是对象则为null。可有可无。如下所示：  \n\n>>\n< form-beans>  \n　　< form-bean   \n　　　　　　name=\"Loign\"  \n　　　　　　type=\"com.ha.login\">  \n　　　　　< form-property name=\"ok\"  type=\"java.lang.String\"/>  \n　　　　　< form-property name=\"oks\"  type=\"java.lang.String\"/>  \n　　　　　< form-property name=\"okss\"  type=\"java.lang.Integer\" initial=\"20\"/>  \n　　< /form-bean>  \n< /form-beans>\n\n3.global-exceptions元素  \n　　该元素主要配置异常处理，它的exception子元素代表全局的异常配置。struts采取配置的方式来处理异常。它用来设置java异常和异常处理类org.apache.struts.action.ExceptionHandler之间的映射。它有七个属性，如下所示：  \n　　1. className：指定和exception元素对应的配置类，默认为：org.apache.struts.config.ExceptionConfig。可有可无。  \n　　2. Handler：指定异常得理类，默认为：org.apache.struts.action.ExceptionHandler。可有可无  \n　　3. key：指定在Resource Bundle中描述该异常的消息key  \n　　4. path：指定当异常发生时的转发路径。  \n　　5. scope：指定ActionMessages实例的存放范围，可选值包括：request和session，默认为request。可有可无。  \n　　6. type：指定所需处理异常类的名字，必须。  \n　　7. bundle：指定Resource Bundle  \n如下所示：  \n\n>>\n< global-exceptions>  \n　　< exception key=\"global.error.invalidlogin\" path=\"/error.jsp\" scope=\"request\" type=\"com.hn.tree\"/>  \n< /global-exceptions>\n\n4.global-forwards元素  \n　　该元素主要用来声明全局的转发关系，它具有以下四个属性：  \n　　1. className：和forward元素对应的配置类，默认为：org.apache.struts.action.ActionForward。可有可无。  \n　　2. contextRelative：此项为true时，表时path属性以＂/＂开头，相对于当前上下文的URL，默认为false．可有可无。　  \n　　3. name：转发路径的逻辑名．必填。  \n　　4. path：转发或重定向的URL，当contextRelative=false时，URL路径相对于当前应用（application），当为ture时，表示URL路径相对于当前上下文（context）。  \n　　5.  redirect：当此项为ture时，表示执行重定向操作。当此项为false时表示转向操作。默认为false。  \n如下所示：  \n>>\n< global-forwards>  \n　　< forward  name=\"forms1\"  path=\"/a.do\"/>  \n　　< forward  name=\"forms2\"  path=\"/nb.jsp\"/>  \n< global-forwards>\n\n5.action-mappings元素  \n　　描述从特定的请求路径到相应的Action类的映射。它具有以下几个属性：  \n　　1. attribute：设置和Action关联的ActionForm Bean在request和session范围内的key。如：Form Bean存在于request范围内，此项设为“myBenas”，则在request.getAttribute(\"myBenas\")就可以返回该Bean的实例。  \n　　2. classsName：和action元素对应的配置元素，默认为：org.apache.struts.action.ActionMapping.  \n　　3. forward：转发的URL路径。  \n　　4. include：指定包含的URL路径。  \n　　5. input：输入表单的URL路径，当表单验证失败时，将把请求转发到该URL。  \n　　6. name：指定和Action关联的Action FormBean的名字，该名字必须在Form-Bean定义过。  \n　　7. path：指定访问Action的路径，以“/”开头，无扩展名。   \n　　8. parameter：指定Actgion的配置参数，在Action类的execute()方法中，可以调用ActionMapping对象的getParameter()方法来读取该配置参数。  \n　　9. roles：指定允许调用该Action的安全角色，多个角色之间用，隔开，在处理请求时，RequestProcessor会根据该配置项来决定用户是否有权限调用Action权限。  \n　　10. scope：指定ActionForm Bean的存在范围，可选取为request和session，默认为session。\n　　11. type：指定Action类的完整类名。  \n　　12. unknown：如果此项为true，表示可以处理用户发出的所有无效的Action URL，默认为false；  \n　　13. validate：指定是否要调用Action FormBean的validate方法，默认值为ture.  \n注：forward、include、type属性只能选中其中一项。  \n如下：  \n>>\n< action path=\"/search\"  \n　　　　type=\"zxj.okBean\"  \n　　　　name=\"a1\"  \n　　　　scope=\"request\"  \n　　　　validate=\"true\"  \n　　　　input=\"/b.jsp\">  \n　　< forward name=\"tig\" path=\"/aa.jsp\"/>  \n< /action>\n\n注：此中的forward是指局部的转发路径。global-forwards表示全局的转发路径。\n\n6.controller元素  \n　　该元素用于配置ActionServlet。它具有以下属性。  \n　　1. bufferSize：指定上载文件的输入缓冲大小，可选，默认为4096  \n　　2. className：指定和controller元素对应的配置类，默认为org.apache.struts.config.ControllerConfig  \n　　3. conentType：字符编码，如果在Action和JSP网页中设置了，则覆盖该设置。  \n　　4. locale：指定是否把Locale对象保存到当前用户的session中，默认值为false.  \n　　5. processorClass：指定负责请求的java类完整路径。  \n　　6. tempDir：指定处理文件的临时工作目录，如果此项没有设置，将采用Servlet容器为web应用分配的临时工作目录。  \n　　7. nochache：如果为true：在响应结果中将加入特定的头参数：Pragma,Cache-Control和Expise，防止页面被保存在客户端的浏览器中，默认为false  \n如下：  \n\n>>\n< controller  \n　　contentType=\"text/html;charset=\"UTF-8\"\"  \n　　locale=\"true\"  \n　　processorClass=\"con.ok\"/>\n\n7.message-resources元素  \n　　主要配置本地化消息文本，它具有以下属性。  \n　　1. className：和message-resources元素对应的配置类，默认为org.apache.struts.config.MessageResourcesConfig。  \n　　2. factory：指定消息资源的工厂类，默认为：org.apache.struts.util.PropertyMessageResourcesFactory类  \n　　3. key：指定Resource Bundle存放的ServletContext对象中时采用的属性Key，默认由Globals.MESSAGES_KEY定义的字符串常量，只允许一个Resource Bundle采用默认的属性Key。  \n　　4. null：指定MessageSources类如何处理未知消息的key，如果为true，则返回空字符串，如果为false，则返回相关字串，默认为false  \n　　5. prameter：指定MessageSources的资源文件名，如果为：a.b.ApplicationResources，则实际对应的文件路径为：WEB-INF/classes/a/b/ApplicationResources.properties.  \n如：  \n>>\n< message-resources null=\"false\" parameter=\"defaultResource\"/>  \n< message-resources key=\"num1\" null=\"false\" parameter=\"test\"/>  \n\n访问为：\n>>\n< bean:message  key=\"zxj\"/>  \n< bean:message  key=\"zxj\"  bundle=\"num1\"/>  \n\n其中，zxj表法，messagesource资源文件中的一个字符串。\n\n8.plugin-in元素  \n　　配置Struts的插件，属性如下：  \n　　1. className：指定的Struts插件类，必须实现org.apache.struts.action.PlugiIn接口。如：  　\n>>\n　< plug-in className=\"a.b.c.\">    \n　　< set-property property=\"xxx\" value=\"/WEB-INF/aa.xml\"  />    \n  < /plug-in>  \n  \n后记，多模块的配置，可以供多个应用应用不同的struts-config.xml\n\n文件参考：http://blog.csdn.net/huozhicheng/article/details/5426356","source":"_posts/struts-config配置文件.md","raw":"---\ntitle: struts-config.xml配置文件\ndate: 2018-03-02 10:01:54\ntags: [框架]\n---\n\n< struts-config >是struts的根元素，它主要有8个子元素，DTD定义如下17：\n\n< !ELEMENT struts-config  \n(data-sources?,form-beans?,global-exceptions?,global-forwards?,action-mappings?,controller?,message-resources\\*,plug-in\\*)  \n\\>  \n\n以上8个元素，下面一一描述：  \n1. date-sources元素  \n　　date-sources元素用来配置应用程序所需要的数据源。java语言提供了javax.sql.DateSource接口，所有数据源必须实现该接口。如下配置：\n>  \n< data-sources>  \n　　< data-source type=\"org.apached.commons.dbcp.BasicDataSource\"\\>  \n　　　　………………  \n　　< /data-source>  \n< /data-sources>  \n\n在Action中访问方式如下：\n>>\njavax.sql.DataSource dataSource;  \njava.sql.Connection myConnection;  \ntry  \n{  \n　　dataSource = getDataSource(request);  \n　　myConnection　＝　dataSource.getConnection();  \n}  \n…………  \n\n如果是多数据源，可用如下配置：\n>>\n< data-sources>  \n　　< data-source key=\"a\"  type=\"org.apached.commons.dbcp.BasicDataSource\">  \n　　　　………………  \n　　< /data-source>  \n　　< data-source key=\"b\"   type=\"org.apached.commons.dbcp.BasicDataSource\">  \n　　　　………………   \n　　< /data-source>  \n< /data-sources>\n\n访问方式：dataSource = getDataSource(request,\"a\");\n\n2.form-beans元素  \n　　该元素主要用来配置表单验证的类。它包含如下属性：  \n　　1.classname：一般用得少，指定和form-bean无素对应的配置类，默认为org.apache.struts.config.FormBeanConfig，如果自定义，则必须扩展FormBeanConfig类。可有可无。  \n　　2.name：ActionForm Bean的惟一标识。必须。  \n　　3.type：ActionForm的完整类名。必须。  \n如下所示：  \n\n>>\n< form-beans>  \n　　< form-bean name=\"Loign\" type=\"com.ha.login\"></form-bean>  \n< /form-beans>\n\n如果是动态Action FormBean，还必须配置form-bean元素的form-property子元素。它包含四个属性，上面三个，还有一个initial 元素：以字符串的形式设置表单字段的初始值，如果没有设置该属性，则是基本类型为0，如果是对象则为null。可有可无。如下所示：  \n\n>>\n< form-beans>  \n　　< form-bean   \n　　　　　　name=\"Loign\"  \n　　　　　　type=\"com.ha.login\">  \n　　　　　< form-property name=\"ok\"  type=\"java.lang.String\"/>  \n　　　　　< form-property name=\"oks\"  type=\"java.lang.String\"/>  \n　　　　　< form-property name=\"okss\"  type=\"java.lang.Integer\" initial=\"20\"/>  \n　　< /form-bean>  \n< /form-beans>\n\n3.global-exceptions元素  \n　　该元素主要配置异常处理，它的exception子元素代表全局的异常配置。struts采取配置的方式来处理异常。它用来设置java异常和异常处理类org.apache.struts.action.ExceptionHandler之间的映射。它有七个属性，如下所示：  \n　　1. className：指定和exception元素对应的配置类，默认为：org.apache.struts.config.ExceptionConfig。可有可无。  \n　　2. Handler：指定异常得理类，默认为：org.apache.struts.action.ExceptionHandler。可有可无  \n　　3. key：指定在Resource Bundle中描述该异常的消息key  \n　　4. path：指定当异常发生时的转发路径。  \n　　5. scope：指定ActionMessages实例的存放范围，可选值包括：request和session，默认为request。可有可无。  \n　　6. type：指定所需处理异常类的名字，必须。  \n　　7. bundle：指定Resource Bundle  \n如下所示：  \n\n>>\n< global-exceptions>  \n　　< exception key=\"global.error.invalidlogin\" path=\"/error.jsp\" scope=\"request\" type=\"com.hn.tree\"/>  \n< /global-exceptions>\n\n4.global-forwards元素  \n　　该元素主要用来声明全局的转发关系，它具有以下四个属性：  \n　　1. className：和forward元素对应的配置类，默认为：org.apache.struts.action.ActionForward。可有可无。  \n　　2. contextRelative：此项为true时，表时path属性以＂/＂开头，相对于当前上下文的URL，默认为false．可有可无。　  \n　　3. name：转发路径的逻辑名．必填。  \n　　4. path：转发或重定向的URL，当contextRelative=false时，URL路径相对于当前应用（application），当为ture时，表示URL路径相对于当前上下文（context）。  \n　　5.  redirect：当此项为ture时，表示执行重定向操作。当此项为false时表示转向操作。默认为false。  \n如下所示：  \n>>\n< global-forwards>  \n　　< forward  name=\"forms1\"  path=\"/a.do\"/>  \n　　< forward  name=\"forms2\"  path=\"/nb.jsp\"/>  \n< global-forwards>\n\n5.action-mappings元素  \n　　描述从特定的请求路径到相应的Action类的映射。它具有以下几个属性：  \n　　1. attribute：设置和Action关联的ActionForm Bean在request和session范围内的key。如：Form Bean存在于request范围内，此项设为“myBenas”，则在request.getAttribute(\"myBenas\")就可以返回该Bean的实例。  \n　　2. classsName：和action元素对应的配置元素，默认为：org.apache.struts.action.ActionMapping.  \n　　3. forward：转发的URL路径。  \n　　4. include：指定包含的URL路径。  \n　　5. input：输入表单的URL路径，当表单验证失败时，将把请求转发到该URL。  \n　　6. name：指定和Action关联的Action FormBean的名字，该名字必须在Form-Bean定义过。  \n　　7. path：指定访问Action的路径，以“/”开头，无扩展名。   \n　　8. parameter：指定Actgion的配置参数，在Action类的execute()方法中，可以调用ActionMapping对象的getParameter()方法来读取该配置参数。  \n　　9. roles：指定允许调用该Action的安全角色，多个角色之间用，隔开，在处理请求时，RequestProcessor会根据该配置项来决定用户是否有权限调用Action权限。  \n　　10. scope：指定ActionForm Bean的存在范围，可选取为request和session，默认为session。\n　　11. type：指定Action类的完整类名。  \n　　12. unknown：如果此项为true，表示可以处理用户发出的所有无效的Action URL，默认为false；  \n　　13. validate：指定是否要调用Action FormBean的validate方法，默认值为ture.  \n注：forward、include、type属性只能选中其中一项。  \n如下：  \n>>\n< action path=\"/search\"  \n　　　　type=\"zxj.okBean\"  \n　　　　name=\"a1\"  \n　　　　scope=\"request\"  \n　　　　validate=\"true\"  \n　　　　input=\"/b.jsp\">  \n　　< forward name=\"tig\" path=\"/aa.jsp\"/>  \n< /action>\n\n注：此中的forward是指局部的转发路径。global-forwards表示全局的转发路径。\n\n6.controller元素  \n　　该元素用于配置ActionServlet。它具有以下属性。  \n　　1. bufferSize：指定上载文件的输入缓冲大小，可选，默认为4096  \n　　2. className：指定和controller元素对应的配置类，默认为org.apache.struts.config.ControllerConfig  \n　　3. conentType：字符编码，如果在Action和JSP网页中设置了，则覆盖该设置。  \n　　4. locale：指定是否把Locale对象保存到当前用户的session中，默认值为false.  \n　　5. processorClass：指定负责请求的java类完整路径。  \n　　6. tempDir：指定处理文件的临时工作目录，如果此项没有设置，将采用Servlet容器为web应用分配的临时工作目录。  \n　　7. nochache：如果为true：在响应结果中将加入特定的头参数：Pragma,Cache-Control和Expise，防止页面被保存在客户端的浏览器中，默认为false  \n如下：  \n\n>>\n< controller  \n　　contentType=\"text/html;charset=\"UTF-8\"\"  \n　　locale=\"true\"  \n　　processorClass=\"con.ok\"/>\n\n7.message-resources元素  \n　　主要配置本地化消息文本，它具有以下属性。  \n　　1. className：和message-resources元素对应的配置类，默认为org.apache.struts.config.MessageResourcesConfig。  \n　　2. factory：指定消息资源的工厂类，默认为：org.apache.struts.util.PropertyMessageResourcesFactory类  \n　　3. key：指定Resource Bundle存放的ServletContext对象中时采用的属性Key，默认由Globals.MESSAGES_KEY定义的字符串常量，只允许一个Resource Bundle采用默认的属性Key。  \n　　4. null：指定MessageSources类如何处理未知消息的key，如果为true，则返回空字符串，如果为false，则返回相关字串，默认为false  \n　　5. prameter：指定MessageSources的资源文件名，如果为：a.b.ApplicationResources，则实际对应的文件路径为：WEB-INF/classes/a/b/ApplicationResources.properties.  \n如：  \n>>\n< message-resources null=\"false\" parameter=\"defaultResource\"/>  \n< message-resources key=\"num1\" null=\"false\" parameter=\"test\"/>  \n\n访问为：\n>>\n< bean:message  key=\"zxj\"/>  \n< bean:message  key=\"zxj\"  bundle=\"num1\"/>  \n\n其中，zxj表法，messagesource资源文件中的一个字符串。\n\n8.plugin-in元素  \n　　配置Struts的插件，属性如下：  \n　　1. className：指定的Struts插件类，必须实现org.apache.struts.action.PlugiIn接口。如：  　\n>>\n　< plug-in className=\"a.b.c.\">    \n　　< set-property property=\"xxx\" value=\"/WEB-INF/aa.xml\"  />    \n  < /plug-in>  \n  \n后记，多模块的配置，可以供多个应用应用不同的struts-config.xml\n\n文件参考：http://blog.csdn.net/huozhicheng/article/details/5426356","slug":"struts-config配置文件","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz3001lb01t6lhz9g8y","content":"<p>&lt; struts-config &gt;是struts的根元素，它主要有8个子元素，DTD定义如下17：</p>\n<p>&lt; !ELEMENT struts-config<br>(data-sources?,form-beans?,global-exceptions?,global-forwards?,action-mappings?,controller?,message-resources*,plug-in*)<br>>  </p>\n<p>以上8个元素，下面一一描述：  </p>\n<ol>\n<li>date-sources元素<br>　　date-sources元素用来配置应用程序所需要的数据源。java语言提供了javax.sql.DateSource接口，所有数据源必须实现该接口。如下配置：<blockquote>\n<p>&lt; data-sources&gt;<br>　　&lt; data-source type=”org.apached.commons.dbcp.BasicDataSource”><br>　　　　………………<br>　　&lt; /data-source&gt;<br>&lt; /data-sources&gt;  </p>\n</blockquote>\n</li>\n</ol>\n<p>在Action中访问方式如下：</p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>javax.sql.DataSource dataSource;<br>java.sql.Connection myConnection;<br>try<br>{<br>　　dataSource = getDataSource(request);<br>　　myConnection　＝　dataSource.getConnection();<br>}<br>…………  </p>\n</blockquote>\n<p>如果是多数据源，可用如下配置：</p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; data-sources&gt;<br>　　&lt; data-source key=”a”  type=”org.apached.commons.dbcp.BasicDataSource”&gt;<br>　　　　………………<br>　　&lt; /data-source&gt;<br>　　&lt; data-source key=”b”   type=”org.apached.commons.dbcp.BasicDataSource”&gt;<br>　　　　………………<br>　　&lt; /data-source&gt;<br>&lt; /data-sources&gt;</p>\n</blockquote>\n<p>访问方式：dataSource = getDataSource(request,”a”);</p>\n<p>2.form-beans元素<br>　　该元素主要用来配置表单验证的类。它包含如下属性：<br>　　1.classname：一般用得少，指定和form-bean无素对应的配置类，默认为org.apache.struts.config.FormBeanConfig，如果自定义，则必须扩展FormBeanConfig类。可有可无。<br>　　2.name：ActionForm Bean的惟一标识。必须。<br>　　3.type：ActionForm的完整类名。必须。<br>如下所示：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; form-beans&gt;<br>　　&lt; form-bean name=”Loign” type=”com.ha.login”&gt;</form-bean><br>&lt; /form-beans&gt;</p>\n</blockquote>\n<p>如果是动态Action FormBean，还必须配置form-bean元素的form-property子元素。它包含四个属性，上面三个，还有一个initial 元素：以字符串的形式设置表单字段的初始值，如果没有设置该属性，则是基本类型为0，如果是对象则为null。可有可无。如下所示：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; form-beans&gt;<br>　　&lt; form-bean<br>　　　　　　name=”Loign”<br>　　　　　　type=”com.ha.login”&gt;<br>　　　　　&lt; form-property name=”ok”  type=”java.lang.String”/&gt;<br>　　　　　&lt; form-property name=”oks”  type=”java.lang.String”/&gt;<br>　　　　　&lt; form-property name=”okss”  type=”java.lang.Integer” initial=”20”/&gt;<br>　　&lt; /form-bean&gt;<br>&lt; /form-beans&gt;</p>\n</blockquote>\n<p>3.global-exceptions元素<br>　　该元素主要配置异常处理，它的exception子元素代表全局的异常配置。struts采取配置的方式来处理异常。它用来设置java异常和异常处理类org.apache.struts.action.ExceptionHandler之间的映射。它有七个属性，如下所示：<br>　　1. className：指定和exception元素对应的配置类，默认为：org.apache.struts.config.ExceptionConfig。可有可无。<br>　　2. Handler：指定异常得理类，默认为：org.apache.struts.action.ExceptionHandler。可有可无<br>　　3. key：指定在Resource Bundle中描述该异常的消息key<br>　　4. path：指定当异常发生时的转发路径。<br>　　5. scope：指定ActionMessages实例的存放范围，可选值包括：request和session，默认为request。可有可无。<br>　　6. type：指定所需处理异常类的名字，必须。<br>　　7. bundle：指定Resource Bundle<br>如下所示：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; global-exceptions&gt;<br>　　&lt; exception key=”global.error.invalidlogin” path=”/error.jsp” scope=”request” type=”com.hn.tree”/&gt;<br>&lt; /global-exceptions&gt;</p>\n</blockquote>\n<p>4.global-forwards元素<br>　　该元素主要用来声明全局的转发关系，它具有以下四个属性：<br>　　1. className：和forward元素对应的配置类，默认为：org.apache.struts.action.ActionForward。可有可无。<br>　　2. contextRelative：此项为true时，表时path属性以＂/＂开头，相对于当前上下文的URL，默认为false．可有可无。　<br>　　3. name：转发路径的逻辑名．必填。<br>　　4. path：转发或重定向的URL，当contextRelative=false时，URL路径相对于当前应用（application），当为ture时，表示URL路径相对于当前上下文（context）。<br>　　5.  redirect：当此项为ture时，表示执行重定向操作。当此项为false时表示转向操作。默认为false。<br>如下所示：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; global-forwards&gt;<br>　　&lt; forward  name=”forms1”  path=”/a.do”/&gt;<br>　　&lt; forward  name=”forms2”  path=”/nb.jsp”/&gt;<br>&lt; global-forwards&gt;</p>\n</blockquote>\n<p>5.action-mappings元素<br>　　描述从特定的请求路径到相应的Action类的映射。它具有以下几个属性：<br>　　1. attribute：设置和Action关联的ActionForm Bean在request和session范围内的key。如：Form Bean存在于request范围内，此项设为“myBenas”，则在request.getAttribute(“myBenas”)就可以返回该Bean的实例。<br>　　2. classsName：和action元素对应的配置元素，默认为：org.apache.struts.action.ActionMapping.<br>　　3. forward：转发的URL路径。<br>　　4. include：指定包含的URL路径。<br>　　5. input：输入表单的URL路径，当表单验证失败时，将把请求转发到该URL。<br>　　6. name：指定和Action关联的Action FormBean的名字，该名字必须在Form-Bean定义过。<br>　　7. path：指定访问Action的路径，以“/”开头，无扩展名。<br>　　8. parameter：指定Actgion的配置参数，在Action类的execute()方法中，可以调用ActionMapping对象的getParameter()方法来读取该配置参数。<br>　　9. roles：指定允许调用该Action的安全角色，多个角色之间用，隔开，在处理请求时，RequestProcessor会根据该配置项来决定用户是否有权限调用Action权限。<br>　　10. scope：指定ActionForm Bean的存在范围，可选取为request和session，默认为session。<br>　　11. type：指定Action类的完整类名。<br>　　12. unknown：如果此项为true，表示可以处理用户发出的所有无效的Action URL，默认为false；<br>　　13. validate：指定是否要调用Action FormBean的validate方法，默认值为ture.<br>注：forward、include、type属性只能选中其中一项。<br>如下：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; action path=”/search”<br>　　　　type=”zxj.okBean”<br>　　　　name=”a1”<br>　　　　scope=”request”<br>　　　　validate=”true”<br>　　　　input=”/b.jsp”&gt;<br>　　&lt; forward name=”tig” path=”/aa.jsp”/&gt;<br>&lt; /action&gt;</p>\n</blockquote>\n<p>注：此中的forward是指局部的转发路径。global-forwards表示全局的转发路径。</p>\n<p>6.controller元素<br>　　该元素用于配置ActionServlet。它具有以下属性。<br>　　1. bufferSize：指定上载文件的输入缓冲大小，可选，默认为4096<br>　　2. className：指定和controller元素对应的配置类，默认为org.apache.struts.config.ControllerConfig<br>　　3. conentType：字符编码，如果在Action和JSP网页中设置了，则覆盖该设置。<br>　　4. locale：指定是否把Locale对象保存到当前用户的session中，默认值为false.<br>　　5. processorClass：指定负责请求的java类完整路径。<br>　　6. tempDir：指定处理文件的临时工作目录，如果此项没有设置，将采用Servlet容器为web应用分配的临时工作目录。<br>　　7. nochache：如果为true：在响应结果中将加入特定的头参数：Pragma,Cache-Control和Expise，防止页面被保存在客户端的浏览器中，默认为false<br>如下：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; controller<br>　　contentType=”text/html;charset=”UTF-8””<br>　　locale=”true”<br>　　processorClass=”con.ok”/&gt;</p>\n</blockquote>\n<p>7.message-resources元素<br>　　主要配置本地化消息文本，它具有以下属性。<br>　　1. className：和message-resources元素对应的配置类，默认为org.apache.struts.config.MessageResourcesConfig。<br>　　2. factory：指定消息资源的工厂类，默认为：org.apache.struts.util.PropertyMessageResourcesFactory类<br>　　3. key：指定Resource Bundle存放的ServletContext对象中时采用的属性Key，默认由Globals.MESSAGES_KEY定义的字符串常量，只允许一个Resource Bundle采用默认的属性Key。<br>　　4. null：指定MessageSources类如何处理未知消息的key，如果为true，则返回空字符串，如果为false，则返回相关字串，默认为false<br>　　5. prameter：指定MessageSources的资源文件名，如果为：a.b.ApplicationResources，则实际对应的文件路径为：WEB-INF/classes/a/b/ApplicationResources.properties.<br>如：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; message-resources null=”false” parameter=”defaultResource”/&gt;<br>&lt; message-resources key=”num1” null=”false” parameter=”test”/&gt;  </p>\n</blockquote>\n<p>访问为：</p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; bean:message  key=”zxj”/&gt;<br>&lt; bean:message  key=”zxj”  bundle=”num1”/&gt;  </p>\n</blockquote>\n<p>其中，zxj表法，messagesource资源文件中的一个字符串。</p>\n<p>8.plugin-in元素<br>　　配置Struts的插件，属性如下：<br>　　1. className：指定的Struts插件类，必须实现org.apache.struts.action.PlugiIn接口。如：  　</p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>　&lt; plug-in className=”a.b.c.”&gt;<br>　　&lt; set-property property=”xxx” value=”/WEB-INF/aa.xml”  /&gt;<br>  &lt; /plug-in&gt;  </p>\n</blockquote>\n<p>后记，多模块的配置，可以供多个应用应用不同的struts-config.xml</p>\n<p>文件参考：<a href=\"http://blog.csdn.net/huozhicheng/article/details/5426356\">http://blog.csdn.net/huozhicheng/article/details/5426356</a></p>\n","excerpt":"","more":"<p>&lt; struts-config &gt;是struts的根元素，它主要有8个子元素，DTD定义如下17：</p>\n<p>&lt; !ELEMENT struts-config<br>(data-sources?,form-beans?,global-exceptions?,global-forwards?,action-mappings?,controller?,message-resources*,plug-in*)<br>>  </p>\n<p>以上8个元素，下面一一描述：  </p>\n<ol>\n<li>date-sources元素<br>　　date-sources元素用来配置应用程序所需要的数据源。java语言提供了javax.sql.DateSource接口，所有数据源必须实现该接口。如下配置：<blockquote>\n<p>&lt; data-sources&gt;<br>　　&lt; data-source type=”org.apached.commons.dbcp.BasicDataSource”><br>　　　　………………<br>　　&lt; /data-source&gt;<br>&lt; /data-sources&gt;  </p>\n</blockquote>\n</li>\n</ol>\n<p>在Action中访问方式如下：</p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>javax.sql.DataSource dataSource;<br>java.sql.Connection myConnection;<br>try<br>{<br>　　dataSource = getDataSource(request);<br>　　myConnection　＝　dataSource.getConnection();<br>}<br>…………  </p>\n</blockquote>\n<p>如果是多数据源，可用如下配置：</p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; data-sources&gt;<br>　　&lt; data-source key=”a”  type=”org.apached.commons.dbcp.BasicDataSource”&gt;<br>　　　　………………<br>　　&lt; /data-source&gt;<br>　　&lt; data-source key=”b”   type=”org.apached.commons.dbcp.BasicDataSource”&gt;<br>　　　　………………<br>　　&lt; /data-source&gt;<br>&lt; /data-sources&gt;</p>\n</blockquote>\n<p>访问方式：dataSource = getDataSource(request,”a”);</p>\n<p>2.form-beans元素<br>　　该元素主要用来配置表单验证的类。它包含如下属性：<br>　　1.classname：一般用得少，指定和form-bean无素对应的配置类，默认为org.apache.struts.config.FormBeanConfig，如果自定义，则必须扩展FormBeanConfig类。可有可无。<br>　　2.name：ActionForm Bean的惟一标识。必须。<br>　　3.type：ActionForm的完整类名。必须。<br>如下所示：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; form-beans&gt;<br>　　&lt; form-bean name=”Loign” type=”com.ha.login”&gt;</form-bean><br>&lt; /form-beans&gt;</p>\n</blockquote>\n<p>如果是动态Action FormBean，还必须配置form-bean元素的form-property子元素。它包含四个属性，上面三个，还有一个initial 元素：以字符串的形式设置表单字段的初始值，如果没有设置该属性，则是基本类型为0，如果是对象则为null。可有可无。如下所示：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; form-beans&gt;<br>　　&lt; form-bean<br>　　　　　　name=”Loign”<br>　　　　　　type=”com.ha.login”&gt;<br>　　　　　&lt; form-property name=”ok”  type=”java.lang.String”/&gt;<br>　　　　　&lt; form-property name=”oks”  type=”java.lang.String”/&gt;<br>　　　　　&lt; form-property name=”okss”  type=”java.lang.Integer” initial=”20”/&gt;<br>　　&lt; /form-bean&gt;<br>&lt; /form-beans&gt;</p>\n</blockquote>\n<p>3.global-exceptions元素<br>　　该元素主要配置异常处理，它的exception子元素代表全局的异常配置。struts采取配置的方式来处理异常。它用来设置java异常和异常处理类org.apache.struts.action.ExceptionHandler之间的映射。它有七个属性，如下所示：<br>　　1. className：指定和exception元素对应的配置类，默认为：org.apache.struts.config.ExceptionConfig。可有可无。<br>　　2. Handler：指定异常得理类，默认为：org.apache.struts.action.ExceptionHandler。可有可无<br>　　3. key：指定在Resource Bundle中描述该异常的消息key<br>　　4. path：指定当异常发生时的转发路径。<br>　　5. scope：指定ActionMessages实例的存放范围，可选值包括：request和session，默认为request。可有可无。<br>　　6. type：指定所需处理异常类的名字，必须。<br>　　7. bundle：指定Resource Bundle<br>如下所示：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; global-exceptions&gt;<br>　　&lt; exception key=”global.error.invalidlogin” path=”/error.jsp” scope=”request” type=”com.hn.tree”/&gt;<br>&lt; /global-exceptions&gt;</p>\n</blockquote>\n<p>4.global-forwards元素<br>　　该元素主要用来声明全局的转发关系，它具有以下四个属性：<br>　　1. className：和forward元素对应的配置类，默认为：org.apache.struts.action.ActionForward。可有可无。<br>　　2. contextRelative：此项为true时，表时path属性以＂/＂开头，相对于当前上下文的URL，默认为false．可有可无。　<br>　　3. name：转发路径的逻辑名．必填。<br>　　4. path：转发或重定向的URL，当contextRelative=false时，URL路径相对于当前应用（application），当为ture时，表示URL路径相对于当前上下文（context）。<br>　　5.  redirect：当此项为ture时，表示执行重定向操作。当此项为false时表示转向操作。默认为false。<br>如下所示：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; global-forwards&gt;<br>　　&lt; forward  name=”forms1”  path=”/a.do”/&gt;<br>　　&lt; forward  name=”forms2”  path=”/nb.jsp”/&gt;<br>&lt; global-forwards&gt;</p>\n</blockquote>\n<p>5.action-mappings元素<br>　　描述从特定的请求路径到相应的Action类的映射。它具有以下几个属性：<br>　　1. attribute：设置和Action关联的ActionForm Bean在request和session范围内的key。如：Form Bean存在于request范围内，此项设为“myBenas”，则在request.getAttribute(“myBenas”)就可以返回该Bean的实例。<br>　　2. classsName：和action元素对应的配置元素，默认为：org.apache.struts.action.ActionMapping.<br>　　3. forward：转发的URL路径。<br>　　4. include：指定包含的URL路径。<br>　　5. input：输入表单的URL路径，当表单验证失败时，将把请求转发到该URL。<br>　　6. name：指定和Action关联的Action FormBean的名字，该名字必须在Form-Bean定义过。<br>　　7. path：指定访问Action的路径，以“/”开头，无扩展名。<br>　　8. parameter：指定Actgion的配置参数，在Action类的execute()方法中，可以调用ActionMapping对象的getParameter()方法来读取该配置参数。<br>　　9. roles：指定允许调用该Action的安全角色，多个角色之间用，隔开，在处理请求时，RequestProcessor会根据该配置项来决定用户是否有权限调用Action权限。<br>　　10. scope：指定ActionForm Bean的存在范围，可选取为request和session，默认为session。<br>　　11. type：指定Action类的完整类名。<br>　　12. unknown：如果此项为true，表示可以处理用户发出的所有无效的Action URL，默认为false；<br>　　13. validate：指定是否要调用Action FormBean的validate方法，默认值为ture.<br>注：forward、include、type属性只能选中其中一项。<br>如下：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; action path=”/search”<br>　　　　type=”zxj.okBean”<br>　　　　name=”a1”<br>　　　　scope=”request”<br>　　　　validate=”true”<br>　　　　input=”/b.jsp”&gt;<br>　　&lt; forward name=”tig” path=”/aa.jsp”/&gt;<br>&lt; /action&gt;</p>\n</blockquote>\n<p>注：此中的forward是指局部的转发路径。global-forwards表示全局的转发路径。</p>\n<p>6.controller元素<br>　　该元素用于配置ActionServlet。它具有以下属性。<br>　　1. bufferSize：指定上载文件的输入缓冲大小，可选，默认为4096<br>　　2. className：指定和controller元素对应的配置类，默认为org.apache.struts.config.ControllerConfig<br>　　3. conentType：字符编码，如果在Action和JSP网页中设置了，则覆盖该设置。<br>　　4. locale：指定是否把Locale对象保存到当前用户的session中，默认值为false.<br>　　5. processorClass：指定负责请求的java类完整路径。<br>　　6. tempDir：指定处理文件的临时工作目录，如果此项没有设置，将采用Servlet容器为web应用分配的临时工作目录。<br>　　7. nochache：如果为true：在响应结果中将加入特定的头参数：Pragma,Cache-Control和Expise，防止页面被保存在客户端的浏览器中，默认为false<br>如下：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; controller<br>　　contentType=”text/html;charset=”UTF-8””<br>　　locale=”true”<br>　　processorClass=”con.ok”/&gt;</p>\n</blockquote>\n<p>7.message-resources元素<br>　　主要配置本地化消息文本，它具有以下属性。<br>　　1. className：和message-resources元素对应的配置类，默认为org.apache.struts.config.MessageResourcesConfig。<br>　　2. factory：指定消息资源的工厂类，默认为：org.apache.struts.util.PropertyMessageResourcesFactory类<br>　　3. key：指定Resource Bundle存放的ServletContext对象中时采用的属性Key，默认由Globals.MESSAGES_KEY定义的字符串常量，只允许一个Resource Bundle采用默认的属性Key。<br>　　4. null：指定MessageSources类如何处理未知消息的key，如果为true，则返回空字符串，如果为false，则返回相关字串，默认为false<br>　　5. prameter：指定MessageSources的资源文件名，如果为：a.b.ApplicationResources，则实际对应的文件路径为：WEB-INF/classes/a/b/ApplicationResources.properties.<br>如：  </p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; message-resources null=”false” parameter=”defaultResource”/&gt;<br>&lt; message-resources key=”num1” null=”false” parameter=”test”/&gt;  </p>\n</blockquote>\n<p>访问为：</p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>&lt; bean:message  key=”zxj”/&gt;<br>&lt; bean:message  key=”zxj”  bundle=”num1”/&gt;  </p>\n</blockquote>\n<p>其中，zxj表法，messagesource资源文件中的一个字符串。</p>\n<p>8.plugin-in元素<br>　　配置Struts的插件，属性如下：<br>　　1. className：指定的Struts插件类，必须实现org.apache.struts.action.PlugiIn接口。如：  　</p>\n<blockquote>\n<blockquote>\n</blockquote>\n<p>　&lt; plug-in className=”a.b.c.”&gt;<br>　　&lt; set-property property=”xxx” value=”/WEB-INF/aa.xml”  /&gt;<br>  &lt; /plug-in&gt;  </p>\n</blockquote>\n<p>后记，多模块的配置，可以供多个应用应用不同的struts-config.xml</p>\n<p>文件参考：<a href=\"http://blog.csdn.net/huozhicheng/article/details/5426356\">http://blog.csdn.net/huozhicheng/article/details/5426356</a></p>\n"},{"title":"svn命令行","date":"2017-08-31T09:49:38.000Z","_content":"\n1. 从SVN上检出  \n\tsvn checkout svnPath  \n\t\n2. 提交svn  \n\tsvn commit * -m \"message\"\n\t\n3. 误删除文件  \n   直接svn up  \n   或 svn revert -r version  \n   \n4. 删除文件后提交  \n\tsvn delete XX  \n\t再 svn ci -m \"message\"    \n\t\n5. 查看本地改动了哪些文件  \n\tsvn st\n\t\n6. 本地文件和svn上文件对比  \n\tsvn diff fileName","source":"_posts/svn命令行.md","raw":"---\ntitle: svn命令行\ndate: 2017-08-31 17:49:38\ntags: 命令行\n---\n\n1. 从SVN上检出  \n\tsvn checkout svnPath  \n\t\n2. 提交svn  \n\tsvn commit * -m \"message\"\n\t\n3. 误删除文件  \n   直接svn up  \n   或 svn revert -r version  \n   \n4. 删除文件后提交  \n\tsvn delete XX  \n\t再 svn ci -m \"message\"    \n\t\n5. 查看本地改动了哪些文件  \n\tsvn st\n\t\n6. 本地文件和svn上文件对比  \n\tsvn diff fileName","slug":"svn命令行","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz3001nb01tf5j36a14","content":"<ol>\n<li><p>从SVN上检出<br> svn checkout svnPath  </p>\n</li>\n<li><p>提交svn<br> svn commit * -m “message”</p>\n</li>\n<li><p>误删除文件<br>直接svn up<br>或 svn revert -r version  </p>\n</li>\n<li><p>删除文件后提交<br> svn delete XX<br> 再 svn ci -m “message”    </p>\n</li>\n<li><p>查看本地改动了哪些文件<br> svn st</p>\n</li>\n<li><p>本地文件和svn上文件对比<br> svn diff fileName</p>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>从SVN上检出<br> svn checkout svnPath  </p>\n</li>\n<li><p>提交svn<br> svn commit * -m “message”</p>\n</li>\n<li><p>误删除文件<br>直接svn up<br>或 svn revert -r version  </p>\n</li>\n<li><p>删除文件后提交<br> svn delete XX<br> 再 svn ci -m “message”    </p>\n</li>\n<li><p>查看本地改动了哪些文件<br> svn st</p>\n</li>\n<li><p>本地文件和svn上文件对比<br> svn diff fileName</p>\n</li>\n</ol>\n"},{"title":"test","date":"2018-10-08T10:23:02.000Z","_content":"\n测试测试测试1\n测试测测试1\n策策策1\n对1\n随时1\n","source":"_posts/test.md","raw":"---\ntitle: test\ndate: 2018-10-08 18:23:02\ntags: 测试\n---\n\n测试测试测试1\n测试测测试1\n策策策1\n对1\n随时1\n","slug":"test","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz4001qb01thzgod0pd","content":"<p>测试测试测试1<br>测试测测试1<br>策策策1<br>对1<br>随时1</p>\n","excerpt":"","more":"<p>测试测试测试1<br>测试测测试1<br>策策策1<br>对1<br>随时1</p>\n"},{"title":"tornado学习","date":"2018-05-18T02:20:21.000Z","_content":"\n学习参考链接：\nhttp://demo.pythoner.com/itt2zh/ch1.html\n","source":"_posts/tornado学习.md","raw":"---\ntitle: tornado学习\ndate: 2018-05-18 10:20:21\ntags: 框架\n---\n\n学习参考链接：\nhttp://demo.pythoner.com/itt2zh/ch1.html\n","slug":"tornado学习","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz4001sb01tc0ezfvcz","content":"<p>学习参考链接：<br><a href=\"http://demo.pythoner.com/itt2zh/ch1.html\">http://demo.pythoner.com/itt2zh/ch1.html</a></p>\n","excerpt":"","more":"<p>学习参考链接：<br><a href=\"http://demo.pythoner.com/itt2zh/ch1.html\">http://demo.pythoner.com/itt2zh/ch1.html</a></p>\n"},{"title":"webstorm快捷键","date":"2017-10-09T02:50:42.000Z","_content":"\n在macos下：\n1. 全局搜索  \nshift + ctrl + f  \n2. 全局搜索并替换    \nshift + ctrl + r  \n3. 当前页面搜索  \ncommond + f  \n4. 快速打开选项卡  \nshift + commond + n\n","source":"_posts/webstorm快捷键.md","raw":"---\ntitle: webstorm快捷键\ndate: 2017-10-09 10:50:42\ntags: [工具,游戏]\n---\n\n在macos下：\n1. 全局搜索  \nshift + ctrl + f  \n2. 全局搜索并替换    \nshift + ctrl + r  \n3. 当前页面搜索  \ncommond + f  \n4. 快速打开选项卡  \nshift + commond + n\n","slug":"webstorm快捷键","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz4001vb01tggo9gdk7","content":"<p>在macos下：</p>\n<ol>\n<li>全局搜索<br>shift + ctrl + f  </li>\n<li>全局搜索并替换<br>shift + ctrl + r  </li>\n<li>当前页面搜索<br>commond + f  </li>\n<li>快速打开选项卡<br>shift + commond + n</li>\n</ol>\n","excerpt":"","more":"<p>在macos下：</p>\n<ol>\n<li>全局搜索<br>shift + ctrl + f  </li>\n<li>全局搜索并替换<br>shift + ctrl + r  </li>\n<li>当前页面搜索<br>commond + f  </li>\n<li>快速打开选项卡<br>shift + commond + n</li>\n</ol>\n"},{"title":"vim常用命令行","date":"2017-08-07T02:06:00.000Z","_content":"\n* grep | history    \n查看历史命令行   \n\n* grep \"getFileMd5\" . -R   \n递归查找当前文件夹下内容包含getFileMd5的文件  \n\n* find ./ -name js2objectc.h   \n查找js2objectc.h文件  \n\n* chmod 777 openCocos.sh   \n修改openCocos.sh权限  \n\n* ssh连接服务器  \n ssh -i ~/.ssh/id_rsa.zyy zyy@111.203.187.123\n\n ssh -Ai /Users/tuyoo/.ssh/id_rsa.zyy zyy#UTF-8@10.3.13.8 -p 222 -oForwardAgent=yes\n \n* 用指定的app打开文件  \n  open -a /Applications/MacDown.app vim常用命令行.md  \n  \n* 修改文件操作权限  \n  sudo chown tyhall:tyhall 0.json （若修改文件夹下的所有文件操作权限，需要在chown后面加上-R）\n\n* 查看磁盘使用情况  df  \n\n* 查看当前java进程 ps -ef|grep java\n\n* 查看当前python进程 ps aux|grep python\n  \n\n\n","source":"_posts/vim常用命令行.md","raw":"---\ntitle: vim常用命令行\ndate: 2017-08-07 10:06:00\ntags: 命令行\n---\n\n* grep | history    \n查看历史命令行   \n\n* grep \"getFileMd5\" . -R   \n递归查找当前文件夹下内容包含getFileMd5的文件  \n\n* find ./ -name js2objectc.h   \n查找js2objectc.h文件  \n\n* chmod 777 openCocos.sh   \n修改openCocos.sh权限  \n\n* ssh连接服务器  \n ssh -i ~/.ssh/id_rsa.zyy zyy@111.203.187.123\n\n ssh -Ai /Users/tuyoo/.ssh/id_rsa.zyy zyy#UTF-8@10.3.13.8 -p 222 -oForwardAgent=yes\n \n* 用指定的app打开文件  \n  open -a /Applications/MacDown.app vim常用命令行.md  \n  \n* 修改文件操作权限  \n  sudo chown tyhall:tyhall 0.json （若修改文件夹下的所有文件操作权限，需要在chown后面加上-R）\n\n* 查看磁盘使用情况  df  \n\n* 查看当前java进程 ps -ef|grep java\n\n* 查看当前python进程 ps aux|grep python\n  \n\n\n","slug":"vim常用命令行","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz5001xb01t2vji4jp6","content":"<ul>\n<li><p>grep | history<br>查看历史命令行   </p>\n</li>\n<li><p>grep “getFileMd5” . -R<br>递归查找当前文件夹下内容包含getFileMd5的文件  </p>\n</li>\n<li><p>find ./ -name js2objectc.h<br>查找js2objectc.h文件  </p>\n</li>\n<li><p>chmod 777 openCocos.sh<br>修改openCocos.sh权限  </p>\n</li>\n<li><p>ssh连接服务器<br>ssh -i ~/.ssh/id_rsa.zyy <a href=\"mailto:zyy@111.203.187.123\">zyy@111.203.187.123</a></p>\n<p>ssh -Ai /Users/tuyoo/.ssh/id_rsa.zyy <a href=\"mailto:zyy#UTF-8@10.3.13.8\">zyy#UTF-8@10.3.13.8</a> -p 222 -oForwardAgent=yes</p>\n</li>\n<li><p>用指定的app打开文件<br>open -a /Applications/MacDown.app vim常用命令行.md  </p>\n</li>\n<li><p>修改文件操作权限<br>sudo chown tyhall:tyhall 0.json （若修改文件夹下的所有文件操作权限，需要在chown后面加上-R）</p>\n</li>\n<li><p>查看磁盘使用情况  df  </p>\n</li>\n<li><p>查看当前java进程 ps -ef|grep java</p>\n</li>\n<li><p>查看当前python进程 ps aux|grep python</p>\n</li>\n</ul>\n","excerpt":"","more":"<ul>\n<li><p>grep | history<br>查看历史命令行   </p>\n</li>\n<li><p>grep “getFileMd5” . -R<br>递归查找当前文件夹下内容包含getFileMd5的文件  </p>\n</li>\n<li><p>find ./ -name js2objectc.h<br>查找js2objectc.h文件  </p>\n</li>\n<li><p>chmod 777 openCocos.sh<br>修改openCocos.sh权限  </p>\n</li>\n<li><p>ssh连接服务器<br>ssh -i ~/.ssh/id_rsa.zyy <a href=\"mailto:zyy@111.203.187.123\">zyy@111.203.187.123</a></p>\n<p>ssh -Ai /Users/tuyoo/.ssh/id_rsa.zyy <a href=\"mailto:zyy#UTF-8@10.3.13.8\">zyy#UTF-8@10.3.13.8</a> -p 222 -oForwardAgent=yes</p>\n</li>\n<li><p>用指定的app打开文件<br>open -a /Applications/MacDown.app vim常用命令行.md  </p>\n</li>\n<li><p>修改文件操作权限<br>sudo chown tyhall:tyhall 0.json （若修改文件夹下的所有文件操作权限，需要在chown后面加上-R）</p>\n</li>\n<li><p>查看磁盘使用情况  df  </p>\n</li>\n<li><p>查看当前java进程 ps -ef|grep java</p>\n</li>\n<li><p>查看当前python进程 ps aux|grep python</p>\n</li>\n</ul>\n"},{"title":"代码大全","date":"2017-06-17T02:38:21.000Z","_content":"\n1. personal character（个人性格）  \n > 你无法提升自己的聪明程度，但性格在一定程度上能够改进。事实证明，个人性格对于造就出程序员高手更具有决定性意义。  \n \n > 高智商与优秀程序员之间并无太密切的联系，如何专注你的聪明才智，比你有多聪明更重要   \n \n * 人的个性对其编程能力有直接的影响\n * 最有关系的性格为：谦虚、求知欲、诚实、创造性和纪律，以及高明的偷懒\n * 程序员高手的性格与天分无关，而任何事情都与个人发展相关\n * 出乎意料的是，小聪明、经验、坚持和疯狂既有助也有害\n * 很多程序员不愿主动吸收新知识和技术，只依靠工作时间偶尔接触新的信息。如果你能抽出少量时间阅读和学习编程知识，要不了多久就能鹤立鸡群\n * 好性格和培养正确的习惯关系甚大。要成为杰出的程序员，先要养成良好习惯，其他自然水到渠成\n\n2. 自说明代码\n >编码是要把维护你程序的人，想象成知道你住址的有严重暴力倾向的精神病人  \n\n >写注释能让你更好的思考代码在干什么。如果注释困难，要么是因为代码差劲，要么是没有理解透彻代码。不管怎样，都得对代码再花时间。所以写注释并非再做无用功，而是指出你该做的工作。 \n\n3. 变量名的力量\n * 变量名的平均长度在10到16个字符，调试程序所需花费的力气是最小的。（8到20个字符也几乎同样容易调试）\n * 计算结果的变量：总额、平均值、最大值等等，使用类似于Total、Sum、Average、Max、Min、Record、String、Pointer等限定词。请记住把限定词加到名字的最后。（例如：总收入-revenueRotal、平均支出-expenseAverage）\n * 典型的布尔变量命名：  \n \tdone：完成（true）、未完成（false）  \n \terror：有错误（true）、无错误（false）  \n \tfound：找到（true）、未找到（false）  \n \tsuccess或者ok：操作成功（true）、操作失败（false）  \n * 标识全局变量：在全局变量名之前加上g_前缀   \n \t标识成员变量：可以用m_前缀  \n \t标识类型声明：t_前缀  \n \t标识枚举类型：全部用大写，或者为类型名增加e_或E_前缀，同时为该类型的成员名增加基于特定类型的前缀，如Color_  \n \t\n4. 防御式编程\n\n5. \n \n \n","source":"_posts/代码大全.md","raw":"---\ntitle: 代码大全\ndate: 2017-06-17 10:38:21\ntags: 编程\n---\n\n1. personal character（个人性格）  \n > 你无法提升自己的聪明程度，但性格在一定程度上能够改进。事实证明，个人性格对于造就出程序员高手更具有决定性意义。  \n \n > 高智商与优秀程序员之间并无太密切的联系，如何专注你的聪明才智，比你有多聪明更重要   \n \n * 人的个性对其编程能力有直接的影响\n * 最有关系的性格为：谦虚、求知欲、诚实、创造性和纪律，以及高明的偷懒\n * 程序员高手的性格与天分无关，而任何事情都与个人发展相关\n * 出乎意料的是，小聪明、经验、坚持和疯狂既有助也有害\n * 很多程序员不愿主动吸收新知识和技术，只依靠工作时间偶尔接触新的信息。如果你能抽出少量时间阅读和学习编程知识，要不了多久就能鹤立鸡群\n * 好性格和培养正确的习惯关系甚大。要成为杰出的程序员，先要养成良好习惯，其他自然水到渠成\n\n2. 自说明代码\n >编码是要把维护你程序的人，想象成知道你住址的有严重暴力倾向的精神病人  \n\n >写注释能让你更好的思考代码在干什么。如果注释困难，要么是因为代码差劲，要么是没有理解透彻代码。不管怎样，都得对代码再花时间。所以写注释并非再做无用功，而是指出你该做的工作。 \n\n3. 变量名的力量\n * 变量名的平均长度在10到16个字符，调试程序所需花费的力气是最小的。（8到20个字符也几乎同样容易调试）\n * 计算结果的变量：总额、平均值、最大值等等，使用类似于Total、Sum、Average、Max、Min、Record、String、Pointer等限定词。请记住把限定词加到名字的最后。（例如：总收入-revenueRotal、平均支出-expenseAverage）\n * 典型的布尔变量命名：  \n \tdone：完成（true）、未完成（false）  \n \terror：有错误（true）、无错误（false）  \n \tfound：找到（true）、未找到（false）  \n \tsuccess或者ok：操作成功（true）、操作失败（false）  \n * 标识全局变量：在全局变量名之前加上g_前缀   \n \t标识成员变量：可以用m_前缀  \n \t标识类型声明：t_前缀  \n \t标识枚举类型：全部用大写，或者为类型名增加e_或E_前缀，同时为该类型的成员名增加基于特定类型的前缀，如Color_  \n \t\n4. 防御式编程\n\n5. \n \n \n","slug":"代码大全","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz5001zb01tg5350drv","content":"<ol>\n<li><p>personal character（个人性格）  </p>\n<blockquote>\n<p>你无法提升自己的聪明程度，但性格在一定程度上能够改进。事实证明，个人性格对于造就出程序员高手更具有决定性意义。  </p>\n</blockquote>\n<blockquote>\n<p>高智商与优秀程序员之间并无太密切的联系，如何专注你的聪明才智，比你有多聪明更重要   </p>\n</blockquote>\n<ul>\n<li>人的个性对其编程能力有直接的影响</li>\n<li>最有关系的性格为：谦虚、求知欲、诚实、创造性和纪律，以及高明的偷懒</li>\n<li>程序员高手的性格与天分无关，而任何事情都与个人发展相关</li>\n<li>出乎意料的是，小聪明、经验、坚持和疯狂既有助也有害</li>\n<li>很多程序员不愿主动吸收新知识和技术，只依靠工作时间偶尔接触新的信息。如果你能抽出少量时间阅读和学习编程知识，要不了多久就能鹤立鸡群</li>\n<li>好性格和培养正确的习惯关系甚大。要成为杰出的程序员，先要养成良好习惯，其他自然水到渠成</li>\n</ul>\n</li>\n<li><p>自说明代码</p>\n<blockquote>\n<p>编码是要把维护你程序的人，想象成知道你住址的有严重暴力倾向的精神病人  </p>\n</blockquote>\n<blockquote>\n<p>写注释能让你更好的思考代码在干什么。如果注释困难，要么是因为代码差劲，要么是没有理解透彻代码。不管怎样，都得对代码再花时间。所以写注释并非再做无用功，而是指出你该做的工作。 </p>\n</blockquote>\n</li>\n<li><p>变量名的力量</p>\n<ul>\n<li>变量名的平均长度在10到16个字符，调试程序所需花费的力气是最小的。（8到20个字符也几乎同样容易调试）</li>\n<li>计算结果的变量：总额、平均值、最大值等等，使用类似于Total、Sum、Average、Max、Min、Record、String、Pointer等限定词。请记住把限定词加到名字的最后。（例如：总收入-revenueRotal、平均支出-expenseAverage）</li>\n<li>典型的布尔变量命名：<br>done：完成（true）、未完成（false）<br>error：有错误（true）、无错误（false）<br>found：找到（true）、未找到（false）<br>success或者ok：操作成功（true）、操作失败（false）  </li>\n<li>标识全局变量：在全局变量名之前加上g_前缀<br>标识成员变量：可以用m_前缀<br>标识类型声明：t_前缀<br>标识枚举类型：全部用大写，或者为类型名增加e_或E_前缀，同时为该类型的成员名增加基于特定类型的前缀，如Color_  </li>\n</ul>\n</li>\n<li><p>防御式编程</p>\n</li>\n<li></li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>personal character（个人性格）  </p>\n<blockquote>\n<p>你无法提升自己的聪明程度，但性格在一定程度上能够改进。事实证明，个人性格对于造就出程序员高手更具有决定性意义。  </p>\n</blockquote>\n<blockquote>\n<p>高智商与优秀程序员之间并无太密切的联系，如何专注你的聪明才智，比你有多聪明更重要   </p>\n</blockquote>\n<ul>\n<li>人的个性对其编程能力有直接的影响</li>\n<li>最有关系的性格为：谦虚、求知欲、诚实、创造性和纪律，以及高明的偷懒</li>\n<li>程序员高手的性格与天分无关，而任何事情都与个人发展相关</li>\n<li>出乎意料的是，小聪明、经验、坚持和疯狂既有助也有害</li>\n<li>很多程序员不愿主动吸收新知识和技术，只依靠工作时间偶尔接触新的信息。如果你能抽出少量时间阅读和学习编程知识，要不了多久就能鹤立鸡群</li>\n<li>好性格和培养正确的习惯关系甚大。要成为杰出的程序员，先要养成良好习惯，其他自然水到渠成</li>\n</ul>\n</li>\n<li><p>自说明代码</p>\n<blockquote>\n<p>编码是要把维护你程序的人，想象成知道你住址的有严重暴力倾向的精神病人  </p>\n</blockquote>\n<blockquote>\n<p>写注释能让你更好的思考代码在干什么。如果注释困难，要么是因为代码差劲，要么是没有理解透彻代码。不管怎样，都得对代码再花时间。所以写注释并非再做无用功，而是指出你该做的工作。 </p>\n</blockquote>\n</li>\n<li><p>变量名的力量</p>\n<ul>\n<li>变量名的平均长度在10到16个字符，调试程序所需花费的力气是最小的。（8到20个字符也几乎同样容易调试）</li>\n<li>计算结果的变量：总额、平均值、最大值等等，使用类似于Total、Sum、Average、Max、Min、Record、String、Pointer等限定词。请记住把限定词加到名字的最后。（例如：总收入-revenueRotal、平均支出-expenseAverage）</li>\n<li>典型的布尔变量命名：<br>done：完成（true）、未完成（false）<br>error：有错误（true）、无错误（false）<br>found：找到（true）、未找到（false）<br>success或者ok：操作成功（true）、操作失败（false）  </li>\n<li>标识全局变量：在全局变量名之前加上g_前缀<br>标识成员变量：可以用m_前缀<br>标识类型声明：t_前缀<br>标识枚举类型：全部用大写，或者为类型名增加e_或E_前缀，同时为该类型的成员名增加基于特定类型的前缀，如Color_  </li>\n</ul>\n</li>\n<li><p>防御式编程</p>\n</li>\n<li></li>\n</ol>\n"},{"title":"产品经理培训","date":"2017-06-08T03:50:16.000Z","_content":" 今天听了一节游戏行业产品课，虽然不怎么懂，但是有些东西记下来，方便以后自己学习。  \n \n> S级别产品：  \n 核心竞争力：发明有效套路的能力   \n 有效套路 = 洞察力 + 逻辑能力 + 同理心（快速切换角色）+ 自我否定  \n \n> A级别产品:  \n 核心竞争力：逻辑思维能力 + 审美  \n 审美：对人性本能的认知深度、对美的事物敏感度  \n \n 做什么样的产品？  \n 特定人群爱不释手，其他人不反感的产品。（例如：微信朋友圈，可以看到好友分享，避免陌生人打广告）  \n \n 过程：目标、规则、自愿、反馈  \n \n > 好看：决定新用户的耐心  \n > 好用：决定用户的学习成本  \n > 有意思：决定用户的保留率\n \n \n 推荐书：  \n 《杰克.韦尔奇自传》  \n 《游戏改变世界》  \n 《java与模式》  \n 《人类群星闪耀时》  \n \n","source":"_posts/产品经理培训.md","raw":"---\ntitle: 产品经理培训\ndate: 2017-06-08 11:50:16\ntags: 培训\n---\n 今天听了一节游戏行业产品课，虽然不怎么懂，但是有些东西记下来，方便以后自己学习。  \n \n> S级别产品：  \n 核心竞争力：发明有效套路的能力   \n 有效套路 = 洞察力 + 逻辑能力 + 同理心（快速切换角色）+ 自我否定  \n \n> A级别产品:  \n 核心竞争力：逻辑思维能力 + 审美  \n 审美：对人性本能的认知深度、对美的事物敏感度  \n \n 做什么样的产品？  \n 特定人群爱不释手，其他人不反感的产品。（例如：微信朋友圈，可以看到好友分享，避免陌生人打广告）  \n \n 过程：目标、规则、自愿、反馈  \n \n > 好看：决定新用户的耐心  \n > 好用：决定用户的学习成本  \n > 有意思：决定用户的保留率\n \n \n 推荐书：  \n 《杰克.韦尔奇自传》  \n 《游戏改变世界》  \n 《java与模式》  \n 《人类群星闪耀时》  \n \n","slug":"产品经理培训","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz50021b01teyzw4g6n","content":"<p> 今天听了一节游戏行业产品课，虽然不怎么懂，但是有些东西记下来，方便以后自己学习。  </p>\n<blockquote>\n<p>S级别产品：<br> 核心竞争力：发明有效套路的能力<br> 有效套路 = 洞察力 + 逻辑能力 + 同理心（快速切换角色）+ 自我否定  </p>\n</blockquote>\n<blockquote>\n<p>A级别产品:<br> 核心竞争力：逻辑思维能力 + 审美<br> 审美：对人性本能的认知深度、对美的事物敏感度  </p>\n</blockquote>\n<p> 做什么样的产品？<br> 特定人群爱不释手，其他人不反感的产品。（例如：微信朋友圈，可以看到好友分享，避免陌生人打广告）  </p>\n<p> 过程：目标、规则、自愿、反馈  </p>\n<blockquote>\n<p>好看：决定新用户的耐心<br>好用：决定用户的学习成本<br>有意思：决定用户的保留率</p>\n</blockquote>\n<p> 推荐书：<br> 《杰克.韦尔奇自传》<br> 《游戏改变世界》<br> 《java与模式》<br> 《人类群星闪耀时》  </p>\n","excerpt":"","more":"<p> 今天听了一节游戏行业产品课，虽然不怎么懂，但是有些东西记下来，方便以后自己学习。  </p>\n<blockquote>\n<p>S级别产品：<br> 核心竞争力：发明有效套路的能力<br> 有效套路 = 洞察力 + 逻辑能力 + 同理心（快速切换角色）+ 自我否定  </p>\n</blockquote>\n<blockquote>\n<p>A级别产品:<br> 核心竞争力：逻辑思维能力 + 审美<br> 审美：对人性本能的认知深度、对美的事物敏感度  </p>\n</blockquote>\n<p> 做什么样的产品？<br> 特定人群爱不释手，其他人不反感的产品。（例如：微信朋友圈，可以看到好友分享，避免陌生人打广告）  </p>\n<p> 过程：目标、规则、自愿、反馈  </p>\n<blockquote>\n<p>好看：决定新用户的耐心<br>好用：决定用户的学习成本<br>有意思：决定用户的保留率</p>\n</blockquote>\n<p> 推荐书：<br> 《杰克.韦尔奇自传》<br> 《游戏改变世界》<br> 《java与模式》<br> 《人类群星闪耀时》  </p>\n"},{"title":"js使用原型方法的好处","date":"2017-09-20T12:58:52.000Z","_content":"\n好处：使用原型方法可以节约内存和降低实例化的开销。最好在声明公共方法时使用基于原型的方法。\n\n例如：  \n//声明一个类表示书  \nfunction Book(title, pages, isBn) {  \n\tthis.title = title;\n\tthis.pages = pages;  \n\tthis.isBn = isBn;  \n}  \n\n//访问和修改对象的属性  \nconsole.log(book.title); //输出书名  \nbook.title = \"new book\"; //修改书名  \nconsole.log(book.title); //输出新书名  \n\n//类可以包含函数。可以声明和使用函数。  \nBook.prototype.pringTitle = function() {  \nconsole.log(this.title);    \n}  \nbook.printTitle();  \n\n在这个例子里，pringTitle方法只会创建一次，在Book类的所有实例中共享。如果是在定义类的内部结构时声明，每个类的实例都会有一份该方法的副本。  \n\n生成私有方法时用在类定义时内部声明的方法，这样其他实例不会访问到这个方法。（这些属性和方法为各个实例单独拥有）  \n\n尽量使用基于原型的方法定义更好些。\n","source":"_posts/使用原型方法的好处.md","raw":"---\ntitle: js使用原型方法的好处\ndate: 2017-09-20 20:58:52\ntags: javascript\n---\n\n好处：使用原型方法可以节约内存和降低实例化的开销。最好在声明公共方法时使用基于原型的方法。\n\n例如：  \n//声明一个类表示书  \nfunction Book(title, pages, isBn) {  \n\tthis.title = title;\n\tthis.pages = pages;  \n\tthis.isBn = isBn;  \n}  \n\n//访问和修改对象的属性  \nconsole.log(book.title); //输出书名  \nbook.title = \"new book\"; //修改书名  \nconsole.log(book.title); //输出新书名  \n\n//类可以包含函数。可以声明和使用函数。  \nBook.prototype.pringTitle = function() {  \nconsole.log(this.title);    \n}  \nbook.printTitle();  \n\n在这个例子里，pringTitle方法只会创建一次，在Book类的所有实例中共享。如果是在定义类的内部结构时声明，每个类的实例都会有一份该方法的副本。  \n\n生成私有方法时用在类定义时内部声明的方法，这样其他实例不会访问到这个方法。（这些属性和方法为各个实例单独拥有）  \n\n尽量使用基于原型的方法定义更好些。\n","slug":"使用原型方法的好处","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz50024b01tg0tf4khn","content":"<p>好处：使用原型方法可以节约内存和降低实例化的开销。最好在声明公共方法时使用基于原型的方法。</p>\n<p>例如：<br>//声明一个类表示书<br>function Book(title, pages, isBn) {<br>    this.title = title;<br>    this.pages = pages;<br>    this.isBn = isBn;<br>}  </p>\n<p>//访问和修改对象的属性<br>console.log(book.title); //输出书名<br>book.title = “new book”; //修改书名<br>console.log(book.title); //输出新书名  </p>\n<p>//类可以包含函数。可以声明和使用函数。<br>Book.prototype.pringTitle = function() {<br>console.log(this.title);<br>}<br>book.printTitle();  </p>\n<p>在这个例子里，pringTitle方法只会创建一次，在Book类的所有实例中共享。如果是在定义类的内部结构时声明，每个类的实例都会有一份该方法的副本。  </p>\n<p>生成私有方法时用在类定义时内部声明的方法，这样其他实例不会访问到这个方法。（这些属性和方法为各个实例单独拥有）  </p>\n<p>尽量使用基于原型的方法定义更好些。</p>\n","excerpt":"","more":"<p>好处：使用原型方法可以节约内存和降低实例化的开销。最好在声明公共方法时使用基于原型的方法。</p>\n<p>例如：<br>//声明一个类表示书<br>function Book(title, pages, isBn) {<br>    this.title = title;<br>    this.pages = pages;<br>    this.isBn = isBn;<br>}  </p>\n<p>//访问和修改对象的属性<br>console.log(book.title); //输出书名<br>book.title = “new book”; //修改书名<br>console.log(book.title); //输出新书名  </p>\n<p>//类可以包含函数。可以声明和使用函数。<br>Book.prototype.pringTitle = function() {<br>console.log(this.title);<br>}<br>book.printTitle();  </p>\n<p>在这个例子里，pringTitle方法只会创建一次，在Book类的所有实例中共享。如果是在定义类的内部结构时声明，每个类的实例都会有一份该方法的副本。  </p>\n<p>生成私有方法时用在类定义时内部声明的方法，这样其他实例不会访问到这个方法。（这些属性和方法为各个实例单独拥有）  </p>\n<p>尽量使用基于原型的方法定义更好些。</p>\n"},{"title":"动感单车","date":"2017-07-25T06:23:31.000Z","_content":"动感单车：  \n\n对这个项目好感由来已久。  \n\n17年4月初，和大学室友们去母校。在抚州凤凰城吃完饭，顺便去附近健身房瞎溜达，正好在动感单车教室外面看到别人练习，一群阳光热血的青年，玩的很嗨，觉得这才是我们该有的生活。  \n\n所以我第一次去健身房就是动感单车。  \n\n可惜我完全没有体验出想象中阳光与活力，可能是平常运动量太少，这种剧烈运动，根本就体力不支。  \n\n一进教室就开始练习各种骑车姿势，对我这么个不爱骑车的人，简直就是摧残，站着骑，坐着骑，不停的加阻力，一节课下来，觉得我活着回去已经很不错了，屁股疼腿疼了一周。  \n\n就此一次，再没去练过。","source":"_posts/动感单车.md","raw":"---\ntitle: 动感单车\ndate: 2017-07-25 14:23:31\ntags: 运动\n---\n动感单车：  \n\n对这个项目好感由来已久。  \n\n17年4月初，和大学室友们去母校。在抚州凤凰城吃完饭，顺便去附近健身房瞎溜达，正好在动感单车教室外面看到别人练习，一群阳光热血的青年，玩的很嗨，觉得这才是我们该有的生活。  \n\n所以我第一次去健身房就是动感单车。  \n\n可惜我完全没有体验出想象中阳光与活力，可能是平常运动量太少，这种剧烈运动，根本就体力不支。  \n\n一进教室就开始练习各种骑车姿势，对我这么个不爱骑车的人，简直就是摧残，站着骑，坐着骑，不停的加阻力，一节课下来，觉得我活着回去已经很不错了，屁股疼腿疼了一周。  \n\n就此一次，再没去练过。","slug":"动感单车","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz60026b01t8y7jasd9","content":"<p>动感单车：  </p>\n<p>对这个项目好感由来已久。  </p>\n<p>17年4月初，和大学室友们去母校。在抚州凤凰城吃完饭，顺便去附近健身房瞎溜达，正好在动感单车教室外面看到别人练习，一群阳光热血的青年，玩的很嗨，觉得这才是我们该有的生活。  </p>\n<p>所以我第一次去健身房就是动感单车。  </p>\n<p>可惜我完全没有体验出想象中阳光与活力，可能是平常运动量太少，这种剧烈运动，根本就体力不支。  </p>\n<p>一进教室就开始练习各种骑车姿势，对我这么个不爱骑车的人，简直就是摧残，站着骑，坐着骑，不停的加阻力，一节课下来，觉得我活着回去已经很不错了，屁股疼腿疼了一周。  </p>\n<p>就此一次，再没去练过。</p>\n","excerpt":"","more":"<p>动感单车：  </p>\n<p>对这个项目好感由来已久。  </p>\n<p>17年4月初，和大学室友们去母校。在抚州凤凰城吃完饭，顺便去附近健身房瞎溜达，正好在动感单车教室外面看到别人练习，一群阳光热血的青年，玩的很嗨，觉得这才是我们该有的生活。  </p>\n<p>所以我第一次去健身房就是动感单车。  </p>\n<p>可惜我完全没有体验出想象中阳光与活力，可能是平常运动量太少，这种剧烈运动，根本就体力不支。  </p>\n<p>一进教室就开始练习各种骑车姿势，对我这么个不爱骑车的人，简直就是摧残，站着骑，坐着骑，不停的加阻力，一节课下来，觉得我活着回去已经很不错了，屁股疼腿疼了一周。  </p>\n<p>就此一次，再没去练过。</p>\n"},{"title":"去健身","date":"2017-06-22T14:33:16.000Z","_content":"\n想去办张健身卡，这个想法反反复复的出现了好多次。    \n\n主要是觉得下班的生活过的太枯燥，又怕自己坚持不下去，而且健身卡比较贵，就一拖再拖。\n\n昨天下班回家，在地铁站门口有人发健身房传单，看了一下，我又想去办健身卡了。  \n\n想找个人一起去健身，问了很多同事，也问了很多朋友，没有人愿意去，大家说的理由都一样，觉得自己坚持不下来。  \n\n思来想去，何必这么委屈自己，想做的事拖拖拉拉，一次次放弃。 \n\n对我这么个周末不睡懒觉，不看电视剧的人来说，窝在家里周末的时间过得很长，再加上室友喜欢睡懒觉，我也就只能在家看看手机看看书了。  \n\n不如去健身，学游泳，学动感单车，学瑜伽，学舞蹈，说不定还能遇到志同道合的朋友，这么一想，我终于还是冒着大雨去把健身卡给办了。","source":"_posts/去健身.md","raw":"---\ntitle: 去健身\ndate: 2017-06-22 22:33:16\ntags: 运动\n---\n\n想去办张健身卡，这个想法反反复复的出现了好多次。    \n\n主要是觉得下班的生活过的太枯燥，又怕自己坚持不下去，而且健身卡比较贵，就一拖再拖。\n\n昨天下班回家，在地铁站门口有人发健身房传单，看了一下，我又想去办健身卡了。  \n\n想找个人一起去健身，问了很多同事，也问了很多朋友，没有人愿意去，大家说的理由都一样，觉得自己坚持不下来。  \n\n思来想去，何必这么委屈自己，想做的事拖拖拉拉，一次次放弃。 \n\n对我这么个周末不睡懒觉，不看电视剧的人来说，窝在家里周末的时间过得很长，再加上室友喜欢睡懒觉，我也就只能在家看看手机看看书了。  \n\n不如去健身，学游泳，学动感单车，学瑜伽，学舞蹈，说不定还能遇到志同道合的朋友，这么一想，我终于还是冒着大雨去把健身卡给办了。","slug":"去健身","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz60028b01t5z559y2s","content":"<p>想去办张健身卡，这个想法反反复复的出现了好多次。    </p>\n<p>主要是觉得下班的生活过的太枯燥，又怕自己坚持不下去，而且健身卡比较贵，就一拖再拖。</p>\n<p>昨天下班回家，在地铁站门口有人发健身房传单，看了一下，我又想去办健身卡了。  </p>\n<p>想找个人一起去健身，问了很多同事，也问了很多朋友，没有人愿意去，大家说的理由都一样，觉得自己坚持不下来。  </p>\n<p>思来想去，何必这么委屈自己，想做的事拖拖拉拉，一次次放弃。 </p>\n<p>对我这么个周末不睡懒觉，不看电视剧的人来说，窝在家里周末的时间过得很长，再加上室友喜欢睡懒觉，我也就只能在家看看手机看看书了。  </p>\n<p>不如去健身，学游泳，学动感单车，学瑜伽，学舞蹈，说不定还能遇到志同道合的朋友，这么一想，我终于还是冒着大雨去把健身卡给办了。</p>\n","excerpt":"","more":"<p>想去办张健身卡，这个想法反反复复的出现了好多次。    </p>\n<p>主要是觉得下班的生活过的太枯燥，又怕自己坚持不下去，而且健身卡比较贵，就一拖再拖。</p>\n<p>昨天下班回家，在地铁站门口有人发健身房传单，看了一下，我又想去办健身卡了。  </p>\n<p>想找个人一起去健身，问了很多同事，也问了很多朋友，没有人愿意去，大家说的理由都一样，觉得自己坚持不下来。  </p>\n<p>思来想去，何必这么委屈自己，想做的事拖拖拉拉，一次次放弃。 </p>\n<p>对我这么个周末不睡懒觉，不看电视剧的人来说，窝在家里周末的时间过得很长，再加上室友喜欢睡懒觉，我也就只能在家看看手机看看书了。  </p>\n<p>不如去健身，学游泳，学动感单车，学瑜伽，学舞蹈，说不定还能遇到志同道合的朋友，这么一想，我终于还是冒着大雨去把健身卡给办了。</p>\n"},{"title":"提升个人卓越领导力","date":"2017-07-29T11:00:49.000Z","_content":"\n公司组织高效人士培训（周六 9：00--16：30）  \n\n1. 基本原则  \n  * 由内而外发挥领导力，从个人到组织  \n  * 领导力四层面：  \n  个人层面做到值得信赖  \n  人际层面做到相互信任  \n  管理层面做到授能自主（授能不授责）  \n  组织层面做到协调一致  \n  * 个人领导力是指个人在组织和社会中的影响力。  \n   个人领导力的主要特征：源于内在的、基于原则的、自我选择的、影响他人的\n   \n  我的感受： 看了个白宫工作人员工作的视频，印象比较深刻的是厨师说的一句话，我的任务是把每道菜做好，让用餐者开心享用。盛大的晚宴，洗碗工依然知道自己的职责是洗碗。  \n  了解清楚自己的坐标，太重要了，追求的东西越多，越忘记最主要的事是什么。      \n  \n2. 自我选择  \n\t做个主动负责的人：把握选择的自由、为自己的行为负责、把重点放在影响范围上  \n\t\n\t我的感受： 只要思想不滑坡，办法总比困难多。任何时候，保持积极乐观的心态，多集中注意力于自己能做的事情上，部位自己无能为力的事情而烦恼，谢坤山手脚没了都能画画，我比他幸运太多了。  \n\t\n3. 自我修炼  \n  注重自己的品格修炼和习惯培养  \n  4L理论：to live、to love、to learn、to leave a legacy(留下传承)\n          \n4. 自我管理  \n   要事第一  \n   如何使用自己的时间  \n5. 互尊互赢\n6. 有效沟通\n7. 协同增效\n\n","source":"_posts/提升个人卓越领导力.md","raw":"---\ntitle: 提升个人卓越领导力\ndate: 2017-07-29 19:00:49\ntags: 培训\n---\n\n公司组织高效人士培训（周六 9：00--16：30）  \n\n1. 基本原则  \n  * 由内而外发挥领导力，从个人到组织  \n  * 领导力四层面：  \n  个人层面做到值得信赖  \n  人际层面做到相互信任  \n  管理层面做到授能自主（授能不授责）  \n  组织层面做到协调一致  \n  * 个人领导力是指个人在组织和社会中的影响力。  \n   个人领导力的主要特征：源于内在的、基于原则的、自我选择的、影响他人的\n   \n  我的感受： 看了个白宫工作人员工作的视频，印象比较深刻的是厨师说的一句话，我的任务是把每道菜做好，让用餐者开心享用。盛大的晚宴，洗碗工依然知道自己的职责是洗碗。  \n  了解清楚自己的坐标，太重要了，追求的东西越多，越忘记最主要的事是什么。      \n  \n2. 自我选择  \n\t做个主动负责的人：把握选择的自由、为自己的行为负责、把重点放在影响范围上  \n\t\n\t我的感受： 只要思想不滑坡，办法总比困难多。任何时候，保持积极乐观的心态，多集中注意力于自己能做的事情上，部位自己无能为力的事情而烦恼，谢坤山手脚没了都能画画，我比他幸运太多了。  \n\t\n3. 自我修炼  \n  注重自己的品格修炼和习惯培养  \n  4L理论：to live、to love、to learn、to leave a legacy(留下传承)\n          \n4. 自我管理  \n   要事第一  \n   如何使用自己的时间  \n5. 互尊互赢\n6. 有效沟通\n7. 协同增效\n\n","slug":"提升个人卓越领导力","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz6002bb01te6ks00wi","content":"<p>公司组织高效人士培训（周六 9：00–16：30）  </p>\n<ol>\n<li><p>基本原则  </p>\n<ul>\n<li>由内而外发挥领导力，从个人到组织  </li>\n<li>领导力四层面：<br>个人层面做到值得信赖<br>人际层面做到相互信任<br>管理层面做到授能自主（授能不授责）<br>组织层面做到协调一致  </li>\n<li>个人领导力是指个人在组织和社会中的影响力。<br>个人领导力的主要特征：源于内在的、基于原则的、自我选择的、影响他人的</li>\n</ul>\n<p>我的感受： 看了个白宫工作人员工作的视频，印象比较深刻的是厨师说的一句话，我的任务是把每道菜做好，让用餐者开心享用。盛大的晚宴，洗碗工依然知道自己的职责是洗碗。<br>了解清楚自己的坐标，太重要了，追求的东西越多，越忘记最主要的事是什么。      </p>\n</li>\n<li><p>自我选择<br> 做个主动负责的人：把握选择的自由、为自己的行为负责、把重点放在影响范围上  </p>\n<p> 我的感受： 只要思想不滑坡，办法总比困难多。任何时候，保持积极乐观的心态，多集中注意力于自己能做的事情上，部位自己无能为力的事情而烦恼，谢坤山手脚没了都能画画，我比他幸运太多了。  </p>\n</li>\n<li><p>自我修炼<br>注重自己的品格修炼和习惯培养<br>4L理论：to live、to love、to learn、to leave a legacy(留下传承)</p>\n</li>\n<li><p>自我管理<br>要事第一<br>如何使用自己的时间  </p>\n</li>\n<li>互尊互赢</li>\n<li>有效沟通</li>\n<li>协同增效</li>\n</ol>\n","excerpt":"","more":"<p>公司组织高效人士培训（周六 9：00–16：30）  </p>\n<ol>\n<li><p>基本原则  </p>\n<ul>\n<li>由内而外发挥领导力，从个人到组织  </li>\n<li>领导力四层面：<br>个人层面做到值得信赖<br>人际层面做到相互信任<br>管理层面做到授能自主（授能不授责）<br>组织层面做到协调一致  </li>\n<li>个人领导力是指个人在组织和社会中的影响力。<br>个人领导力的主要特征：源于内在的、基于原则的、自我选择的、影响他人的</li>\n</ul>\n<p>我的感受： 看了个白宫工作人员工作的视频，印象比较深刻的是厨师说的一句话，我的任务是把每道菜做好，让用餐者开心享用。盛大的晚宴，洗碗工依然知道自己的职责是洗碗。<br>了解清楚自己的坐标，太重要了，追求的东西越多，越忘记最主要的事是什么。      </p>\n</li>\n<li><p>自我选择<br> 做个主动负责的人：把握选择的自由、为自己的行为负责、把重点放在影响范围上  </p>\n<p> 我的感受： 只要思想不滑坡，办法总比困难多。任何时候，保持积极乐观的心态，多集中注意力于自己能做的事情上，部位自己无能为力的事情而烦恼，谢坤山手脚没了都能画画，我比他幸运太多了。  </p>\n</li>\n<li><p>自我修炼<br>注重自己的品格修炼和习惯培养<br>4L理论：to live、to love、to learn、to leave a legacy(留下传承)</p>\n</li>\n<li><p>自我管理<br>要事第一<br>如何使用自己的时间  </p>\n</li>\n<li>互尊互赢</li>\n<li>有效沟通</li>\n<li>协同增效</li>\n</ol>\n"},{"title":"浏览器兼容总结","date":"2017-06-06T13:41:46.000Z","_content":"\n1. ul元素有缩进样式：  \n在Firefox浏览器中，ul元素的缩进是通过padding来实现的  \n在IE浏览器中，ul元素的缩进是通过margin来实现的  \n\n2. button元素：  \n在IE、chrome、FireFox浏览器中的默认样式不同。    \n解决方法：去除元素在浏览器的默认样式（CSS reset）,使得HTML元素具有相同的初始化样式，然后再对元素进行统一定义，就可以让页面在不同浏览器中产生相同的效果。  \n注意： CSS reset代码必须在其他SS之前引入（因为浏览器对CSS代码是从上到下来解析的），只有吧CSS reset放在前面，才有意义。\n\n3. \"border:none\"  \n\"border:none\"  对IE6和IE7按钮的边框无效，在其他浏览器中会去掉按钮的边框  \n\n4. \"display:table-cell\"  \n可以让元素以表格单元格的形式呈现，具备td元素的特点。  \nIE8+以及其他现代浏览器都支持此属性，不过IE6/IE7中并不支持，考虑到IE6/IE7使用率越来越低，我们还是果断使用这一布局神器，可以实现以下3种功能    \n * 图片垂直居中于元素\n * 等高布局\n * 自动平均划分元素，并且在同一行显示\n\n5. ","source":"_posts/浏览器兼容总结.md","raw":"---\ntitle: 浏览器兼容总结\ndate: 2017-06-06 21:41:46\ntags: [html,总结]\n---\n\n1. ul元素有缩进样式：  \n在Firefox浏览器中，ul元素的缩进是通过padding来实现的  \n在IE浏览器中，ul元素的缩进是通过margin来实现的  \n\n2. button元素：  \n在IE、chrome、FireFox浏览器中的默认样式不同。    \n解决方法：去除元素在浏览器的默认样式（CSS reset）,使得HTML元素具有相同的初始化样式，然后再对元素进行统一定义，就可以让页面在不同浏览器中产生相同的效果。  \n注意： CSS reset代码必须在其他SS之前引入（因为浏览器对CSS代码是从上到下来解析的），只有吧CSS reset放在前面，才有意义。\n\n3. \"border:none\"  \n\"border:none\"  对IE6和IE7按钮的边框无效，在其他浏览器中会去掉按钮的边框  \n\n4. \"display:table-cell\"  \n可以让元素以表格单元格的形式呈现，具备td元素的特点。  \nIE8+以及其他现代浏览器都支持此属性，不过IE6/IE7中并不支持，考虑到IE6/IE7使用率越来越低，我们还是果断使用这一布局神器，可以实现以下3种功能    \n * 图片垂直居中于元素\n * 等高布局\n * 自动平均划分元素，并且在同一行显示\n\n5. ","slug":"浏览器兼容总结","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz7002db01t3fiyhzev","content":"<ol>\n<li><p>ul元素有缩进样式：<br>在Firefox浏览器中，ul元素的缩进是通过padding来实现的<br>在IE浏览器中，ul元素的缩进是通过margin来实现的  </p>\n</li>\n<li><p>button元素：<br>在IE、chrome、FireFox浏览器中的默认样式不同。<br>解决方法：去除元素在浏览器的默认样式（CSS reset）,使得HTML元素具有相同的初始化样式，然后再对元素进行统一定义，就可以让页面在不同浏览器中产生相同的效果。<br>注意： CSS reset代码必须在其他SS之前引入（因为浏览器对CSS代码是从上到下来解析的），只有吧CSS reset放在前面，才有意义。</p>\n</li>\n<li><p>“border:none”<br>“border:none”  对IE6和IE7按钮的边框无效，在其他浏览器中会去掉按钮的边框  </p>\n</li>\n<li><p>“display:table-cell”<br>可以让元素以表格单元格的形式呈现，具备td元素的特点。<br>IE8+以及其他现代浏览器都支持此属性，不过IE6/IE7中并不支持，考虑到IE6/IE7使用率越来越低，我们还是果断使用这一布局神器，可以实现以下3种功能    </p>\n<ul>\n<li>图片垂直居中于元素</li>\n<li>等高布局</li>\n<li>自动平均划分元素，并且在同一行显示</li>\n</ul>\n</li>\n<li></li>\n</ol>\n","excerpt":"","more":"<ol>\n<li><p>ul元素有缩进样式：<br>在Firefox浏览器中，ul元素的缩进是通过padding来实现的<br>在IE浏览器中，ul元素的缩进是通过margin来实现的  </p>\n</li>\n<li><p>button元素：<br>在IE、chrome、FireFox浏览器中的默认样式不同。<br>解决方法：去除元素在浏览器的默认样式（CSS reset）,使得HTML元素具有相同的初始化样式，然后再对元素进行统一定义，就可以让页面在不同浏览器中产生相同的效果。<br>注意： CSS reset代码必须在其他SS之前引入（因为浏览器对CSS代码是从上到下来解析的），只有吧CSS reset放在前面，才有意义。</p>\n</li>\n<li><p>“border:none”<br>“border:none”  对IE6和IE7按钮的边框无效，在其他浏览器中会去掉按钮的边框  </p>\n</li>\n<li><p>“display:table-cell”<br>可以让元素以表格单元格的形式呈现，具备td元素的特点。<br>IE8+以及其他现代浏览器都支持此属性，不过IE6/IE7中并不支持，考虑到IE6/IE7使用率越来越低，我们还是果断使用这一布局神器，可以实现以下3种功能    </p>\n<ul>\n<li>图片垂直居中于元素</li>\n<li>等高布局</li>\n<li>自动平均划分元素，并且在同一行显示</li>\n</ul>\n</li>\n<li></li>\n</ol>\n"},{"title":"编程基础知识","date":"2017-07-24T13:03:01.000Z","_content":"\n1. MVC设计模式  \n * Model(模型)：用于处理应用程序数据逻辑的部分。\n * View(视图)：应用程序中处理数据显示的部分。\n * Controller(控制器)：负责转发请求，对请求进行处理。是应用程序中处理用户交互的部分。\n","source":"_posts/编程基础知识.md","raw":"---\ntitle: 编程基础知识\ndate: 2017-07-24 21:03:01\ntags: 编程\n---\n\n1. MVC设计模式  \n * Model(模型)：用于处理应用程序数据逻辑的部分。\n * View(视图)：应用程序中处理数据显示的部分。\n * Controller(控制器)：负责转发请求，对请求进行处理。是应用程序中处理用户交互的部分。\n","slug":"编程基础知识","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz7002gb01tca6c3kjk","content":"<ol>\n<li>MVC设计模式  <ul>\n<li>Model(模型)：用于处理应用程序数据逻辑的部分。</li>\n<li>View(视图)：应用程序中处理数据显示的部分。</li>\n<li>Controller(控制器)：负责转发请求，对请求进行处理。是应用程序中处理用户交互的部分。</li>\n</ul>\n</li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>MVC设计模式  <ul>\n<li>Model(模型)：用于处理应用程序数据逻辑的部分。</li>\n<li>View(视图)：应用程序中处理数据显示的部分。</li>\n<li>Controller(控制器)：负责转发请求，对请求进行处理。是应用程序中处理用户交互的部分。</li>\n</ul>\n</li>\n</ol>\n"},{"title":"瑜伽","date":"2017-07-25T06:25:44.000Z","_content":"\n瑜伽： \n\n想学瑜伽是从读了《遇见未知的自己》开始的。  \n\n自己在家练了几天才去的瑜伽教室。  \n\n第一次去教室练习，感觉自己整个人都硬邦邦的，全都是拉伸之类的动作，感觉老胳膊老腿度随时都有可能折断。  \n\n与想象中的女神天壤之别。","source":"_posts/瑜伽.md","raw":"---\ntitle: 瑜伽\ndate: 2017-07-25 14:25:44\ntags: 运动\n---\n\n瑜伽： \n\n想学瑜伽是从读了《遇见未知的自己》开始的。  \n\n自己在家练了几天才去的瑜伽教室。  \n\n第一次去教室练习，感觉自己整个人都硬邦邦的，全都是拉伸之类的动作，感觉老胳膊老腿度随时都有可能折断。  \n\n与想象中的女神天壤之别。","slug":"瑜伽","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz7002ib01tfzc4g6j7","content":"<p>瑜伽： </p>\n<p>想学瑜伽是从读了《遇见未知的自己》开始的。  </p>\n<p>自己在家练了几天才去的瑜伽教室。  </p>\n<p>第一次去教室练习，感觉自己整个人都硬邦邦的，全都是拉伸之类的动作，感觉老胳膊老腿度随时都有可能折断。  </p>\n<p>与想象中的女神天壤之别。</p>\n","excerpt":"","more":"<p>瑜伽： </p>\n<p>想学瑜伽是从读了《遇见未知的自己》开始的。  </p>\n<p>自己在家练了几天才去的瑜伽教室。  </p>\n<p>第一次去教室练习，感觉自己整个人都硬邦邦的，全都是拉伸之类的动作，感觉老胳膊老腿度随时都有可能折断。  </p>\n<p>与想象中的女神天壤之别。</p>\n"},{"title":"面向对象编程","date":"2018-01-11T11:47:14.000Z","_content":"\n1. 类与对象的比较\n   面向对象设计的一个核心概念就是对象（object）与类（class）的区分。  \n   对象是指运行期间在程序中实际存在的具体实体（enity），  \n   而类是指在程序源码中存在的静态事物。  \n   对象是动态的，它拥有你在程序运行期间所能得到的具体的值和属性。  \n   \n","source":"_posts/面向对象编程md.md","raw":"---\ntitle: 面向对象编程\ndate: 2018-01-11 19:47:14\ntags: 编程\n---\n\n1. 类与对象的比较\n   面向对象设计的一个核心概念就是对象（object）与类（class）的区分。  \n   对象是指运行期间在程序中实际存在的具体实体（enity），  \n   而类是指在程序源码中存在的静态事物。  \n   对象是动态的，它拥有你在程序运行期间所能得到的具体的值和属性。  \n   \n","slug":"面向对象编程md","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz8002lb01t80v9fizj","content":"<ol>\n<li>类与对象的比较<br>面向对象设计的一个核心概念就是对象（object）与类（class）的区分。<br>对象是指运行期间在程序中实际存在的具体实体（enity），<br>而类是指在程序源码中存在的静态事物。<br>对象是动态的，它拥有你在程序运行期间所能得到的具体的值和属性。  </li>\n</ol>\n","excerpt":"","more":"<ol>\n<li>类与对象的比较<br>面向对象设计的一个核心概念就是对象（object）与类（class）的区分。<br>对象是指运行期间在程序中实际存在的具体实体（enity），<br>而类是指在程序源码中存在的静态事物。<br>对象是动态的，它拥有你在程序运行期间所能得到的具体的值和属性。  </li>\n</ol>\n"},{"title":"肚皮舞","date":"2017-07-25T06:26:47.000Z","_content":"肚皮舞：  \n\n对肚皮舞还是挺感兴趣的。\n\n心目中的肚皮舞就是抖肚子，想着肚子最近长得肉肉挺多的，开心的时候抖抖，不开心的时候也可以抖抖，既减肥又性感，最主要是想着年会的时候去表演一个节目~   \n\n兴冲冲的去上第一节课，教练胸大肚子上略微有肉，跳起来感觉全身骨头都在抖。  \n\n第一次上课前半节课练习抖胸，右上左下抖法，可是胸不听话啊，再加上我穿的保守的运动衣，就更加看不出来了，越抖越想笑，还有点不好意思。  \n\n下半节课练习抖腿抖肚子，8字形方向抖，就觉得更加想笑了，腿抖了就划不了8字，划了8字就抖不了腿，严重感觉自己肢体不协调。  \n\n一节课就这样笑过去了。","source":"_posts/肚皮舞.md","raw":"---\ntitle: 肚皮舞\ndate: 2017-07-25 14:26:47\ntags: 运动\n---\n肚皮舞：  \n\n对肚皮舞还是挺感兴趣的。\n\n心目中的肚皮舞就是抖肚子，想着肚子最近长得肉肉挺多的，开心的时候抖抖，不开心的时候也可以抖抖，既减肥又性感，最主要是想着年会的时候去表演一个节目~   \n\n兴冲冲的去上第一节课，教练胸大肚子上略微有肉，跳起来感觉全身骨头都在抖。  \n\n第一次上课前半节课练习抖胸，右上左下抖法，可是胸不听话啊，再加上我穿的保守的运动衣，就更加看不出来了，越抖越想笑，还有点不好意思。  \n\n下半节课练习抖腿抖肚子，8字形方向抖，就觉得更加想笑了，腿抖了就划不了8字，划了8字就抖不了腿，严重感觉自己肢体不协调。  \n\n一节课就这样笑过去了。","slug":"肚皮舞","published":1,"updated":"2025-03-10T10:51:32.320Z","comments":1,"layout":"post","photos":[],"_id":"cm848piz8002nb01t1mlqe9jt","content":"<p>肚皮舞：  </p>\n<p>对肚皮舞还是挺感兴趣的。</p>\n<p>心目中的肚皮舞就是抖肚子，想着肚子最近长得肉肉挺多的，开心的时候抖抖，不开心的时候也可以抖抖，既减肥又性感，最主要是想着年会的时候去表演一个节目~   </p>\n<p>兴冲冲的去上第一节课，教练胸大肚子上略微有肉，跳起来感觉全身骨头都在抖。  </p>\n<p>第一次上课前半节课练习抖胸，右上左下抖法，可是胸不听话啊，再加上我穿的保守的运动衣，就更加看不出来了，越抖越想笑，还有点不好意思。  </p>\n<p>下半节课练习抖腿抖肚子，8字形方向抖，就觉得更加想笑了，腿抖了就划不了8字，划了8字就抖不了腿，严重感觉自己肢体不协调。  </p>\n<p>一节课就这样笑过去了。</p>\n","excerpt":"","more":"<p>肚皮舞：  </p>\n<p>对肚皮舞还是挺感兴趣的。</p>\n<p>心目中的肚皮舞就是抖肚子，想着肚子最近长得肉肉挺多的，开心的时候抖抖，不开心的时候也可以抖抖，既减肥又性感，最主要是想着年会的时候去表演一个节目~   </p>\n<p>兴冲冲的去上第一节课，教练胸大肚子上略微有肉，跳起来感觉全身骨头都在抖。  </p>\n<p>第一次上课前半节课练习抖胸，右上左下抖法，可是胸不听话啊，再加上我穿的保守的运动衣，就更加看不出来了，越抖越想笑，还有点不好意思。  </p>\n<p>下半节课练习抖腿抖肚子，8字形方向抖，就觉得更加想笑了，腿抖了就划不了8字，划了8字就抖不了腿，严重感觉自己肢体不协调。  </p>\n<p>一节课就这样笑过去了。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cm848piyv0008b01th9jvd3g6","tag_id":"cm848piyt0004b01tboptdorq","_id":"cm848piyw000cb01t6az82n45"},{"post_id":"cm848piyp0001b01taiik4bcs","tag_id":"cm848piyt0004b01tboptdorq","_id":"cm848piyw000eb01tf9p26fgy"},{"post_id":"cm848piyv000ab01t24ci9l7c","tag_id":"cm848piyt0004b01tboptdorq","_id":"cm848piyx000hb01t4f9odof3"},{"post_id":"cm848piyw000db01t4flaa903","tag_id":"cm848piyt0004b01tboptdorq","_id":"cm848piyx000jb01t0afz1ejl"},{"post_id":"cm848piyw000fb01tfn96ghp3","tag_id":"cm848piyt0004b01tboptdorq","_id":"cm848piyy000mb01tapkebwiq"},{"post_id":"cm848piys0003b01t6stx5fth","tag_id":"cm848piyw000bb01tgf903zcw","_id":"cm848piyy000ob01teb8lf9pg"},{"post_id":"cm848piys0003b01t6stx5fth","tag_id":"cm848piyx000gb01tdxh2f1s9","_id":"cm848piyz000rb01t6pwahhb5"},{"post_id":"cm848piyx000kb01tgl1n5s3t","tag_id":"cm848piyt0004b01tboptdorq","_id":"cm848piyz000tb01tb07f00az"},{"post_id":"cm848piyy000nb01t0iitbtco","tag_id":"cm848piyx000gb01tdxh2f1s9","_id":"cm848piz0000vb01t4jx0bj69"},{"post_id":"cm848piyy000nb01t0iitbtco","tag_id":"cm848piyw000bb01tgf903zcw","_id":"cm848piz0000yb01tfw4v8gug"},{"post_id":"cm848piyu0006b01t2i7a2top","tag_id":"cm848piyt0004b01tboptdorq","_id":"cm848piz00010b01te0z4gzf2"},{"post_id":"cm848piyz000pb01td0fk23o9","tag_id":"cm848piyw000bb01tgf903zcw","_id":"cm848piz00012b01t7bcb5hvh"},{"post_id":"cm848piyz000sb01tawc86y8k","tag_id":"cm848piyw000bb01tgf903zcw","_id":"cm848piz10015b01tctmle6y6"},{"post_id":"cm848piyx000ib01t0xvce2vq","tag_id":"cm848piyz000qb01tbrdkhtgk","_id":"cm848piz10017b01t5hwx2rek"},{"post_id":"cm848piyz000ub01t4wwqct62","tag_id":"cm848piz0000xb01t3puiaam7","_id":"cm848piz2001ab01tc5vp36gp"},{"post_id":"cm848piz10016b01t9jxw67dm","tag_id":"cm848piz10014b01t5ofv2y77","_id":"cm848piz2001cb01teyqo2mau"},{"post_id":"cm848piz0000wb01t2tp5g39h","tag_id":"cm848piz10014b01t5ofv2y77","_id":"cm848piz2001fb01t1g6234ru"},{"post_id":"cm848piz2001bb01ta4fa11rt","tag_id":"cm848piyx000gb01tdxh2f1s9","_id":"cm848piz3001hb01t03mufbq6"},{"post_id":"cm848piz0000zb01t71aqbkq0","tag_id":"cm848piz10019b01t114g2jya","_id":"cm848piz3001kb01ta0d5bslc"},{"post_id":"cm848piz2001db01t4zli7fep","tag_id":"cm848piz10019b01t114g2jya","_id":"cm848piz3001mb01tdad24sio"},{"post_id":"cm848piz2001gb01t0wvx2a4p","tag_id":"cm848piz10019b01t114g2jya","_id":"cm848piz4001pb01tbt322576"},{"post_id":"cm848piz00011b01t9zifgke5","tag_id":"cm848piz10019b01t114g2jya","_id":"cm848piz4001rb01t5pxbgcr0"},{"post_id":"cm848piz3001lb01t6lhz9g8y","tag_id":"cm848piz0000xb01t3puiaam7","_id":"cm848piz4001ub01t35asbjwc"},{"post_id":"cm848piz00013b01t7ykcdae2","tag_id":"cm848piz10014b01t5ofv2y77","_id":"cm848piz4001wb01tao1d7pac"},{"post_id":"cm848piz3001nb01tf5j36a14","tag_id":"cm848piz10019b01t114g2jya","_id":"cm848piz5001yb01tdsdj8rlo"},{"post_id":"cm848piz3001ib01th9xz7psw","tag_id":"cm848piz4001ob01tcblk1eu7","_id":"cm848piz50020b01thighg4wg"},{"post_id":"cm848piz4001sb01tc0ezfvcz","tag_id":"cm848piz0000xb01t3puiaam7","_id":"cm848piz50023b01t9ix70148"},{"post_id":"cm848piz4001vb01tggo9gdk7","tag_id":"cm848piyx000gb01tdxh2f1s9","_id":"cm848piz60025b01tb5zdcabf"},{"post_id":"cm848piz4001vb01tggo9gdk7","tag_id":"cm848piyw000bb01tgf903zcw","_id":"cm848piz60027b01t1rly5ly2"},{"post_id":"cm848piz5001xb01t2vji4jp6","tag_id":"cm848piz10019b01t114g2jya","_id":"cm848piz6002ab01t97r6eljw"},{"post_id":"cm848piz4001qb01thzgod0pd","tag_id":"cm848piz4001tb01te5e74k48","_id":"cm848piz7002cb01t4bcog208"},{"post_id":"cm848piz50024b01tg0tf4khn","tag_id":"cm848piz10014b01t5ofv2y77","_id":"cm848piz7002fb01teqx26yal"},{"post_id":"cm848piz5001zb01tg5350drv","tag_id":"cm848piz50022b01teayzemvt","_id":"cm848piz7002hb01tgnom9msw"},{"post_id":"cm848piz6002bb01te6ks00wi","tag_id":"cm848piz60029b01te0mvekwi","_id":"cm848piz8002kb01t5xeg2u8c"},{"post_id":"cm848piz50021b01teyzw4g6n","tag_id":"cm848piz60029b01te0mvekwi","_id":"cm848piz8002mb01t0nfdace1"},{"post_id":"cm848piz7002db01t3fiyhzev","tag_id":"cm848piyt0004b01tboptdorq","_id":"cm848piz8002ob01t4wzg805c"},{"post_id":"cm848piz7002db01t3fiyhzev","tag_id":"cm848piyz000qb01tbrdkhtgk","_id":"cm848piz8002pb01t3jm43nar"},{"post_id":"cm848piz7002gb01tca6c3kjk","tag_id":"cm848piz50022b01teayzemvt","_id":"cm848piz8002qb01t2csvg3v5"},{"post_id":"cm848piz60026b01t8y7jasd9","tag_id":"cm848piz7002eb01tdhs1aipy","_id":"cm848piz8002rb01t46iq9tkf"},{"post_id":"cm848piz7002ib01tfzc4g6j7","tag_id":"cm848piz7002eb01tdhs1aipy","_id":"cm848piz8002sb01tfz9d79oz"},{"post_id":"cm848piz8002lb01t80v9fizj","tag_id":"cm848piz50022b01teayzemvt","_id":"cm848piz8002tb01t6y8m902h"},{"post_id":"cm848piz60028b01t5z559y2s","tag_id":"cm848piz7002eb01tdhs1aipy","_id":"cm848piz8002ub01tgmg80n1g"},{"post_id":"cm848piz8002nb01t1mlqe9jt","tag_id":"cm848piz7002eb01tdhs1aipy","_id":"cm848piz8002vb01t0p8fe800"}],"Tag":[{"name":"html","_id":"cm848piyt0004b01tboptdorq"},{"name":"游戏","_id":"cm848piyw000bb01tgf903zcw"},{"name":"工具","_id":"cm848piyx000gb01tdxh2f1s9"},{"name":"总结","_id":"cm848piyz000qb01tbrdkhtgk"},{"name":"框架","_id":"cm848piz0000xb01t3puiaam7"},{"name":"javascript","_id":"cm848piz10014b01t5ofv2y77"},{"name":"命令行","_id":"cm848piz10019b01t114g2jya"},{"name":"python","_id":"cm848piz4001ob01tcblk1eu7"},{"name":"测试","_id":"cm848piz4001tb01te5e74k48"},{"name":"编程","_id":"cm848piz50022b01teayzemvt"},{"name":"培训","_id":"cm848piz60029b01te0mvekwi"},{"name":"运动","_id":"cm848piz7002eb01tdhs1aipy"}]}}